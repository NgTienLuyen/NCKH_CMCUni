{"cells":[{"cell_type":"code","execution_count":34,"metadata":{"id":"2rhVwSBySL-b","executionInfo":{"status":"ok","timestamp":1720690263529,"user_tz":-420,"elapsed":563,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"}}},"outputs":[],"source":["import os\n","import cv2\n","import numpy as np\n","from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n","from sklearn.svm import SVC\n","import matplotlib.pyplot as plt\n","from skimage.feature import hog"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"DPMfJLtESMnt","executionInfo":{"status":"ok","timestamp":1720690265241,"user_tz":-420,"elapsed":349,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"}}},"outputs":[],"source":["# Hàm load hình ảnh từ thư mục và gán nhãn\n","def load_images_from_folder(folder, label):\n","    images = []\n","    labels = []\n","    for filename in os.listdir(folder):\n","        img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)\n","        if img is not None:\n","            img = cv2.resize(img, (64, 64))  # Resize ảnh về kích thước 64x64\n","            images.append(img)\n","            labels.append(label)\n","    return images, labels\n","\n","# Đường dẫn tới thư mục chứa hình ảnh positive và negative\n","positive_folder = '/content/drive/MyDrive/HOG_Face_Detection/dulieu/images'\n","negative_folder = '/content/drive/MyDrive/HOG_Face_Detection/dulieu/results'\n","\n","# Load hình ảnh\n","positive_images, positive_labels = load_images_from_folder(positive_folder, 1)\n","negative_images, negative_labels = load_images_from_folder(negative_folder, -1)\n","\n","# Kết hợp hình ảnh positive và negative\n","all_images = positive_images + negative_images\n","all_labels = positive_labels + negative_labels"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"rx-FJTnOSQt1","executionInfo":{"status":"ok","timestamp":1720690267177,"user_tz":-420,"elapsed":5,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"}}},"outputs":[],"source":["# Hàm trích xuất đặc trưng HOG\n","def extract_hog_features(images):\n","    hog_features = []\n","    for image in images:\n","        feature = hog(image, pixels_per_cell=(8, 8), cells_per_block=(2, 2), feature_vector=True)\n","        hog_features.append(feature)\n","    return np.array(hog_features)\n","\n","all_features = extract_hog_features(all_images)\n","all_labels = np.array(all_labels)\n","\n","# Chuẩn hóa đặc trưng\n","mean = np.mean(all_features, axis=0)\n","std = np.std(all_features, axis=0)\n","all_features = (all_features - mean) / std\n","\n","# Chia dữ liệu thành tập huấn luyện và tập kiểm tra\n","Xtrain, Xval, ytrain, yval = train_test_split(all_features, all_labels, test_size=0.2, random_state=42)\n"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"executionInfo":{"elapsed":1057,"status":"ok","timestamp":1720690269656,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"},"user_tz":-420},"id":"8SgXWxZ0TgKx","outputId":"8ab4f975-9a73-49e4-8727-951c727c744f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 8 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Visualize một số ví dụ hình ảnh positive và negative\n","def visualize_images(images, labels, num_examples=5):\n","    num_pos = np.sum(labels == 1)\n","    num_neg = np.sum(labels == -1)\n","    num_examples = min(num_examples, num_pos, num_neg)\n","\n","    fig, axes = plt.subplots(2, num_examples, figsize=(15, 6))\n","    pos_imgs = images[labels == 1].reshape(-1, 64, 64)\n","    neg_imgs = images[labels == -1].reshape(-1, 64, 64)\n","    for i in range(num_examples):\n","        axes[0, i].imshow(pos_imgs[i], cmap='gray')\n","        axes[0, i].axis('off')\n","        axes[1, i].imshow(neg_imgs[i], cmap='gray')\n","        axes[1, i].axis('off')\n","    axes[0, 0].set_title('Positive Images')\n","    axes[1, 0].set_title('Negative Images')\n","    plt.show()\n","\n","visualize_images(np.array(all_images), np.array(all_labels))"]},{"cell_type":"code","execution_count":38,"metadata":{"executionInfo":{"elapsed":463,"status":"ok","timestamp":1720690273074,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"},"user_tz":-420},"id":"6ob6L-QesIfK"},"outputs":[],"source":["import scipy.io as sio\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn import svm\n","from sklearn.metrics import accuracy_score\n","\n","pos_data = sio.loadmat('/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/possamples.mat')['possamples']\n","neg_data = sio.loadmat('/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/negsamples.mat')['negsamples']\n","\n","pos_data_reshaped = pos_data.reshape((24 * 24, -1)).T\n","neg_data_reshaped = neg_data.reshape((24 * 24, -1)).T\n","\n","y_pos = np.ones(pos_data_reshaped.shape[0])\n","y_neg = -1 * np.ones(neg_data_reshaped.shape[0])\n","\n","X = np.vstack((pos_data_reshaped, neg_data_reshaped))\n","y = np.hstack((y_pos, y_neg))\n","\n","X, y = shuffle(X, y, random_state=20)\n","\n","Xtrain, Xval, ytrain, yval = train_test_split(X, y, test_size=0.3, random_state=42)"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7779,"status":"ok","timestamp":1720690282560,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"},"user_tz":-420},"id":"uask3wHhz-LQ","outputId":"e86a1195-0846-423a-ee9f-d9032ef6e830"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-39-44b04765609f>:6: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  feature = hog(img.reshape(24, 24), pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False)\n"]}],"source":["from skimage.feature import hog\n","\n","def extract_hog_features(images):\n","    hog_features = []\n","    for img in images:\n","        feature = hog(img.reshape(24, 24), pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False)\n","        hog_features.append(feature)\n","    return np.array(hog_features)\n","\n","Xtrain_hog = extract_hog_features(Xtrain)\n","Xval_hog = extract_hog_features(Xval)\n"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":561,"status":"ok","timestamp":1720690283108,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"},"user_tz":-420},"id":"ZREstmRc1QCM"},"outputs":[],"source":["scaler = StandardScaler()\n","Xtrain_hog = scaler.fit_transform(Xtrain_hog)\n","Xval_hog = scaler.transform(Xval_hog)"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":576},"id":"tB3tpilR1To7","executionInfo":{"status":"ok","timestamp":1720691068551,"user_tz":-420,"elapsed":780739,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"}},"outputId":"50bbd220-2084-4300-b252-ee1619c62476"},"outputs":[{"output_type":"stream","name":"stdout","text":["C: 0.01, Độ chính xác huấn luyện: 0.9743262316015862, Độ chính xác kiểm tra: 0.9689509173592599\n","C: 0.1, Độ chính xác huấn luyện: 0.9754687815041333, Độ chính xác kiểm tra: 0.9683236631644974\n","C: 1, Độ chính xác huấn luyện: 0.9754687815041333, Độ chính xác kiểm tra: 0.9678532225184255\n","C: 10, Độ chính xác huấn luyện: 0.9761408696821023, Độ chính xác kiểm tra: 0.9681668496158068\n","C: 100, Độ chính xác huấn luyện: 0.9758720344109147, Độ chính xác kiểm tra: 0.9681668496158068\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["def train_evaluate_svm(Xtrain, ytrain, Xval, yval, C_values):\n","    best_acc = 0\n","    best_C = None\n","    best_clf = None\n","    for C in C_values:\n","        clf = svm.SVC(C=C, kernel='linear')\n","        clf.fit(Xtrain, ytrain)\n","        train_acc = accuracy_score(ytrain, clf.predict(Xtrain))\n","        val_acc = accuracy_score(yval, clf.predict(Xval))\n","        print(f'C: {C}, Độ chính xác huấn luyện: {train_acc}, Độ chính xác kiểm tra: {val_acc}')\n","        if val_acc > best_acc:\n","            best_acc = val_acc\n","            best_C = C\n","            best_clf = clf\n","    return best_clf, best_C\n","\n","# Định nghĩa các giá trị C để thử\n","C_values = [0.01, 0.1, 1, 10, 100]\n","best_clf, best_C = train_evaluate_svm(Xtrain_hog, ytrain, Xval_hog, yval, C_values)\n","\n","# Lấy trọng số và bias nếu tìm thấy mô hình tốt nhất\n","if best_clf is not None:\n","    W = best_clf.coef_\n","    b = best_clf.intercept_\n","\n","    # Hiển thị trọng số dưới dạng biểu đồ thanh\n","    plt.figure(figsize=(10, 5))\n","    plt.bar(range(len(W[0])), W[0])\n","    plt.title('Trọng số của SVM')\n","    plt.xlabel('Đặc trưng HOG')\n","    plt.ylabel('Trọng số')\n","    plt.show()\n","else:\n","    print(\"Không tìm thấy mô hình SVM tốt nhất.\")\n","\n"]},{"cell_type":"code","source":["import cv2\n","\n","# Hàm để áp dụng kỹ thuật cửa sổ quét\n","def sliding_window(image, step_size, window_size):\n","    for y in range(0, image.shape[0] - window_size[1], step_size):\n","        for x in range(0, image.shape[1] - window_size[0], step_size):\n","            yield (x, y, image[y:y + window_size[1], x:x + window_size[0]])\n","\n","# Hàm thực hiện non-maxima suppression\n","def non_max_suppression(detections, threshold):\n","    if len(detections) == 0:\n","        return []\n","\n","    detections = sorted(detections, key=lambda x: x[2], reverse=True)\n","    new_detections = []\n","    while detections:\n","        best = detections.pop(0)\n","        new_detections.append(best)\n","        detections = [d for d in detections if not (d[0] < best[0] + threshold and\n","                                                    d[1] < best[1] + threshold and\n","                                                    d[0] > best[0] - threshold and\n","                                                    d[1] > best[1] - threshold)]\n","    return new_detections\n","\n","# Phát hiện khuôn mặt trong ảnh kiểm tra\n","def detect_faces(image_path, clf, window_size, step_size, conf_thresh, nms_thresh):\n","    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n","    detections = []\n","    for (x, y, window) in sliding_window(image, step_size, window_size):\n","        if window.shape[0] != window_size[1] or window.shape[1] != window_size[0]:\n","            continue\n","        window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","        window_flat = scaler.transform([window_flat])\n","        confidence = clf.decision_function(window_flat)\n","        if confidence > conf_thresh:\n","            detections.append((x, y, confidence))\n","\n","    # Áp dụng NMS\n","    detections = non_max_suppression(detections, nms_thresh)\n","    return detections\n","\n","# Đường dẫn tới các ảnh kiểm tra\n","test_images = ['/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/img1.jpg',\n","               '/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/img2.jpg',\n","               '/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/img3.jpg',\n","               '/content/drive/MyDrive/HOG_Face_Detection/dulieu/images/img4.jpg']\n","\n","for img_path in test_images:\n","    detections = detect_faces(img_path, best_clf, (24, 24), 8, 0.5, 0.3)\n","    img = cv2.imread(img_path)\n","    for (x, y, conf) in detections:\n","        cv2.rectangle(img, (x, y), (x + 24, y + 24), (0, 255, 0), 2)\n","    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n","    plt.title(f'Phát hiện trong {img_path}')\n","    plt.axis('off')\n","    plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"PtpL0AivFyn1","executionInfo":{"status":"ok","timestamp":1720691116150,"user_tz":-420,"elapsed":4572,"user":{"displayName":"Tiến Luyện Nguyễn","userId":"14181701096745099528"}},"outputId":"41e9468f-10e1-4c9b-c4e7-3be6c3c8537d"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAtQAAAGcCAYAAAD5zjdsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOy9d5wlRbk+/vTJOc2ZvAl2F3ZZQHCXIEFAiRdEECR5CSrIVRExyxcT6AX9XQMKguL1ggEVYTHBEiWjCMiS2cDu7GyYPCfnc7rr98fZt6a6T580YRe0nv3MZ3b6dFdVV1Wffuqt531fhTHGICEhISEhISEhISExLVh2dwMkJCQkJCQkJCQk3s6QhFpCQkJCQkJCQkJiBpCEWkJCQkJCQkJCQmIGkIRaQkJCQkJCQkJCYgaQhFpCQkJCQkJCQkJiBpCEWkJCQkJCQkJCQmIGkIRaQkJCQkJCQkJCYgaQhFpCQkJCQkJCQkJiBpCEWkJCQkJCQkJCQmIGeMsR6rvuugvf+973oGna7m4KAOAHP/gB7rrrrt3dDAkJCQkJCQkJibco5oRQ33bbbVAUBc8//3xb1z399NM4//zzsWLFClgsM2uaoii47LLLmp5Hbd2yZUvNZz/72c9w/fXX4+KLL8Ybb7wxo/ZISNTD0UcfjaOPPrqlcx977DEoioLHHntsTtv0r4BFixbhoosu2t3NkJCYERq9o3YXLrroIixatGha137jG9+Aoii6Y7vzWZXfE1W08x56q8FsTu0OtMVa6cGmH5fLhb322guXXXYZRkdHZ9SQWCyGc889FzfccANOPPHEms9/85vf4Prrr59RHe1gy5YtuOqqq/DHP/4R1113HT72sY+BMTarddx000247bbbZrXM3QVN09DZ2Yn/7//7/3ZbG3K5HL7xjW/sMrLZyvitXLkSn/jEJ3ZJe2Yb8XgcNpsNv//97wFUXzyKouDYY481Pf9nP/sZ/25odzENVF/S4veLz+fDnnvuiTPPPBOrV69+y+xameGMM87Af/zHfwCY+nKfmJgwPXfRokU45ZRTao5ns1l885vfxP777w+Px4NgMIgjjzwSv/zlL+t+9xSLRdxwww044ogjEA6H4XA40NfXh1NPPRW//e1voapqW/dx9NFH68ZA/Fm3bl1bZe1K0NxUFAUWiwWhUAj77bcfPvaxj+Ef//jHjMreVd/T1157Lf74xz/OeT3NIM7lf0UYv9f+XfFWeGcTMpkMvv71r+PEE09EJBKBoihvS25km85F11xzDfbYYw8UCgU89dRTuPnmm7FmzRq8+uqr8Hg802rIiy++iG9961u44IILTD//zW9+g1dffRVXXHHFtMqvh/PPPx/nnHMOnE6n7vjrr7+O//u//8OBBx6IAw88EJVKBVu3bsXChQtnre6bbroJ0Wj0X2J1/Oyzz2JiYgInn3zybmtDLpfD1VdfDQC7ZKXdbPyGh4exdu1aXHPNNbNW57vf/W7k83k4HI5ZK7MeHnjgASiKguOPP54fc7lcePTRRzEyMoKenh7d+bfffjtcLhcKhcK063Q6nfjf//1fAEA+n8fg4CD+8pe/4Mwzz8TRRx+NP/3pTwgEAi2VtX79+hnvdLWCcrmMhx56CNddd920yxgdHcV73/tevPHGGzjnnHNw2WWXoVAoYPXq1bjwwguxZs0a3H777bBarfya8fFxnHTSSfjnP/+JE044AV/5ylcQiUQwMjKChx9+GOeddx7efPNNfPWrX22rLfPmzTO9l76+vmnf367AAQccgM997nMAgHQ6jTfeeAN33nknfvazn+Ezn/kMvv/970+r3F31PX3ttdfizDPPxGmnnaY7Xu8dNReYjbk8HeyqZxWo/V7blXW/lWB8Zz/44IO7rS0TExO45pprsGDBArzjHe9o2yj2la98BV/+8pfnpnFtYFqE+qSTTsKqVasAABdffDE6Ojrw/e9/H3/6059w7rnnTqsh73nPe6Z13UxhtVp1LymCcYX+qU99alc1yRTZbBZer3e3tqER1qxZg4ULF2LFihW7uylvGdx3331wuVyzMrcLhQIcDgcsFgtcLtcstK451qxZg8MPPxyhUIgfO/zww/Hcc8/hjjvuwKc//Wl+fPv27XjyySdx+umnY/Xq1dOu02az4T//8z91x771rW/h29/+Nq688kpccskluOOOO+pezxhDoVCA2+3eJQQEAJ588kmk0+kZLSYvvPBCvPHGG/jDH/6AU089lR+//PLL8YUvfAHf/e53ceCBB+JLX/oS/+z888/H2rVrsXr1anzgAx/QlXfllVfi+eefx/r169tuSzAYrBmDtwP6+/tr2v2d73wH5513Hn7wgx9g6dKl+PjHP76bWjd91HtHzQVmYy5PB7vqWQVqv9d2Zd1vJRjf2bvCSFMPvb29GB4eRk9PD55//nkcdNBBbV1vs9lgs02Lzs4qZmVZRoRhYGBAd7xYLOKzn/0sOjs74fV6cfrpp2N8fFx3zp/+9CecfPLJ6Ovrg9PpxOLFi/HNb35Tt1V59NFH495778Xg4CDf1mtVv/XHP/4R++67L5xOJ1asWIH7779f93k9fdp9992HI488El6vF36/HyeffDJee+013TkXXXQRfD4fduzYgdNOOw0+nw+dnZ34/Oc/33SrddGiRXjttdfw+OOP83siqyq16fHHH8cnPvEJdHV1Yd68efzam266CStWrIDT6URfXx8++clPIpFI6Mo/+uijse++++L111/HMcccA4/Hg/7+ftPtncHBQZx66qnwer3o6urCZz7zGb6Kb3WleO+999Z8Cd9333046qij4Pf7EQgEcNBBB+E3v/mN7pw777wTK1euhNvtRjQaxX/+539ix44dunNa6ectW7ags7MTAHD11VfzPv3GN77By1m3bh3OPPNMRCIRuFwurFq1Cn/+8591dVHfP/300w3nbqPxE/vkmGOOgdvt5sduueUWLF68GG63GwcffDCefPLJmr4knfTvfvc7fOUrX0F/fz88Hg9SqVSNhvqyyy6Dz+dDLperKefcc89FT0+Pbi62Mq+B6nbg/fffXzOmLpcLH/jAB2rG8be//S3C4TBOOOEE3fFbb70ViqJg7dq1NXVce+21sFqtNeNthi9/+cs4/vjjceedd2LDhg38OMknHnjgAaxatQputxs//elP+WdkVXz++eehKAp+8Ytf1JRNc/2ee+7hx3bs2IGPfOQj6O7u5t8d//d//2fatnvvvRf77LPPtDWlzzzzDB544AFcdNFFOjJNuO6667B06VJ85zvfQT6fBwD8/e9/xwMPPICPfexjNWSasGrVKnzoQx+aVpvqoZXva8I//vEP/Md//AfC4TC8Xi/2339//PCHP9Sd08ozORO43W786le/QiQSwX//93/rpDOapuH666/HihUr4HK50N3djUsvvRTxeJyf0+w5TyQSuOKKKzB//nw4nU4sWbIE3/nOd2rkSZqm4Yc//CH2228/uFwudHZ24sQTT+TSKEVRkM1m8Ytf/ILXQ3O33jtqtt8DgPlcpneoy+XCvvvuiz/84Q8119Xz7diyZUtL2/dmOuZW+rbdes2+14x1U38/9dRT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eO973wtN0/Db3/4W73//+xuSSCNowWC8ptV+esc73oFly5bhjjvu4C/FO+64A9FolPfL+Pg4EokEbrnlFtxyyy2m5YyNjfH/33vvvTj++ONNHWLe/e53IxqN1hw3LjLpftLpdA0BJRhJN/3OZDI6snPGGWfw5+5zn/tc22HzgKqRo15oxNdeew1f+cpX8Mgjj3BST6Dv61ae/+k8kzOBce5s3LgRyWQSXV1ddetuho0bN+Lll1+uuzVMZWzatAl9fX2IRCLTaXoN5uI9ANTO5XrfWVS3SA5nG632bTto5XtNhPEdQM+ZUZ4XDAZr3gv33HMPvvWtb+HFF1/U6YrFcRgcHITFYqn5/jK+e9v5TvrSl76Ehx9+GAcffDCWLFmC448/Hueddx4OP/xwfm67kVza6QdN05BMJtHR0dHy/c0lzObuXnvthVwuh/HxcTDGkM/nTds0nXZOi1AffPDBPMpHI9TzTGY7BfypVApHHnkkgsEgrrnmGixZsgQulwvPPvssPv3pT8847myz+s1Adf7qV78yFckbX5xz6X3dyuqxEaZz/+3iqaeeQiqVmvO4pTPpZxrTz3/+83UtmcaHZyZ9NzAwgHXr1uHmm29us6V6tDr+hx56KBYtWoTf//73OO+88/CXv/wF+XyeW12B9uY1RSc55phj6tZ5yCGHYPHixbjiiiswMDCg0+cZYbVacd555+FnP/sZbrrpJjz99NMYGhpqW//76quvAqgdq3aek7PPPhv//d//jYmJCfj9fvz5z3/Gueeey++f+uk///M/a7TWBNLl53I5PPbYYzMe5+XLl+OPf/wjXn75Zbz73e82PYfID1kGly1bBqDaJ+LLcv78+fxFR9a92UIikcBRRx2FQCCAa665BosXL4bL5cILL7yAL33pS219X0/nmZwJjHNH0zR0dXXh9ttvNz2/Ff2kpmk47rjjuPXeCFHnvzvRynfZTOdyvcX0dBZ0QOt92069rXyviajXb2bHxb588sknceqpp+Ld7343brrpJvT29sJut+PWW281dQ5shna+k5YvX47169fjnnvuwf3334/Vq1fjpptuwte+9jUeUrbdd3Y7/QDMLr94u2G3xhl59NFHMTY2hrvvvlv3UjCunIHpbY1NByQR6erqqmulmS20e08UA3v9+vU6q2apVMLAwMC02rtw4UK8/vrrYIzp2vPmm2+2dL2ZVzj14auvvlr3pSjei9Fqun79+mnF+67Xn9RXdrt9Vse0Xn1mMgC6n40bN+rut1wuY2BgAO94xztm1JazzjoLP/zhD5FKpXDHHXdg0aJFOPTQQ/nn7cxrs+gkZjj33HPxrW99C8uXL8cBBxzQ8NwLLrgA3/ve9/CXv/wF9913Hzo7O1uSaYj41a9+BUVRcNxxx7V1nYizzz4bV199NVavXo3u7m6kUimcc845/PPOzk74/X6oqtq0nx555BEUi8VpbQ2KOOWUU3Ddddfhl7/8pSmhVlUVv/nNbxAOh/n35CmnnIJvf/vbuP3223XfnXOJxx57DJOTk7j77rt17TRGdxKf/3p9OFfPpBkymQz+8Ic/YP78+Vi+fDlv48MPP4zDDz+8JVmVGRYvXoxMJtO0/YsXL8YDDzyAWCzW0Erd6vtgLt4DZnNZ/M4ywhiOkXbwjFFGWpXIGdFq37ZTb6vfazPF6tWr4XK58MADD+hC8t1666268xYuXAhN0zAwMKCzpBrfve18JwHVHaazzz4bZ599NkqlEj7wgQ/gv//7v3HllVfC5XLNOCpRq2j1/uYSZnN3w4YN8Hg8fNHscrlM2zSddu7WaOb0BVIul/mxYrGIG2+8seZcr9c7YwlIKzjhhBMQCARw7bXX6tpFMIb9mwm8Xm/NF0EjHHvssXA4HPjRj36kWwX+/Oc/RzKZnJb37AknnIAdO3boQlUVCgX87Gc/a+l6M03a8ccfD7/fj+uuu64myQe1e9WqVejq6sJPfvIT3ZbYfffdhzfeeGNa90JJhYx92tXVhaOPPho//elPMTw8XHPddMe03vitWbOmRgawatUqdHZ24ic/+QlKpRI/ftttt7U1B+rh7LPPRrFYxC9+8Qvcf//9OOuss3SftzqvaTuwlf6/+OKL8fWvfx3f+973mp67//77Y//998f//u//YvXq1TjnnHPaihv67W9/Gw8++CDOPvts0228VrF8+XLst99+uOOOO3DHHXegt7dXRw6tVivOOOMMrF69mls1RYhzZc2aNVi1alWNJrpdHHbYYTj22GNx66236kL3Ea666ips2LABX/ziFzkZOPzww3HcccfhlltuwZ/+9CfTcmfbUkQWKbHcUqmEm266SXfeO9/5Tuyxxx64/vrra+Y2XTtXz6QR+Xwe559/PmKxGK666ir+zjnrrLOgqiq++c1v1lxTqVR07a73nJ911lk8fKERiUSCa0nPOOMMMMa4hVCE2Jetvg/m4j1gNpd7e3txwAEH4Be/+IXu3fvQQw/h9ddf112/cOFCWK3WGm2zcW60ilb7ttV62/lemymsVisURdFZybds2VKTBZMMCsa23nDDDTXltfqdNDk5qfvM4XBgn332AWOMf++3oyOfCVq9v3YxPDyMdevWmb7HjPj73/+ukyZt27YNf/rTn3D88cfz+O7HHnss/vjHP2JoaIif9+abb+K+++5ru2271UJ92GGHIRQK4aKLLsLll18ORVHwy1/+0vRFu3LlStxxxx347Gc/i4MOOgg+n0+nUZ0tBAIB3HzzzTj//PPxzne+E+eccw46OzuxdetW3HvvvTj88MNNCf90sHLlStx888341re+hSVLlqCrq6thEpDOzk5ceeWVuPrqq3HiiSfi1FNPxfr163HTTTfhoIMOmlYIrUsvvRQ33ngjzj33XHz605/mWlfSeTaymgwMDOCNN96o2SYMBAL4wQ9+gIsvvhgHHXQQzjvvPITDYbz00kvI5XL4xS9+Abvdju985zv48Ic/jKOOOgrnnnsuD5u3aNEifOYzn2n7XtxuN/bZZx/ccccd2GuvvRCJRLDvvvti3333xY9//GMcccQR2G+//XDJJZdgzz33xOjoKP7+979j+/bteOmll9quz2z83vWud+HRRx/FT37yE925drsd3/rWt3DppZfiPe95D84++2wMDAzg1ltvrauhbgfvfOc7sWTJElx11VUoFos6uQfQ+rym7cBWvnAXLlxYEyu1ES644AJ8/vOfB1A/3FulUsGvf/1rANWF3eDgIP785z/j5ZdfxjHHHFNXQ9gOzj77bHzta1+Dy+XCRz/60Rr/j29/+9t49NFHccghh+CSSy7BPvvsg1gshhdeeAEPP/wwD4e3Zs0afPjDH55xewDgl7/8Jd773vfi/e9/P8477zwceeSRKBaLuPvuu/HYY4/h7LPPxhe+8AXdNb/+9a9x4okn4rTTTsNJJ52EY489FuFwmGdKfOKJJ2ZsPRdx2GGHIRwO48ILL+Tf17/61a9qiLvFYsHNN9+M973vfTjggAPw4Q9/GL29vVi3bh1ee+01TpJm+5ncsWMHnzuZTAavv/467rzzToyMjOBzn/scLr30Un7uUUcdhUsvvRTXXXcdXnzx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\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAtQAAAGcCAYAAAD5zjdsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOy9d6BlVX32/1ll79NumRkYhiICgoqABgVFQQQUKS+KBQQhQbASSxRLjP40KmpE38SIJRA1BixoULFSLEQ0amJHfW2IiqjUYcpt5+yyyu+PtfY+58y9M0y5iEn2o4eZOWfXtdfe+1nf9Xyfr/Deexo0aNCgQYMGDRo0aLBdkPf2ATRo0KBBgwYNGjRo8N8ZDaFu0KBBgwYNGjRo0GAH0BDqBg0aNGjQoEGDBg12AA2hbtCgQYMGDRo0aNBgB9AQ6gYNGjRo0KBBgwYNdgANoW7QoEGDBg0aNGjQYAfQEOoGDRo0aNCgQYMGDXYADaFu0KBBgwYNGjRo0GAH0BDqBg0aNGjQoEGDBg12AH9yhPqTn/wkb3/723HO3duHAsA73vEOPvnJT97bh9GgQYMGDRo0aNDgTxT3CKG+9NJLEULwve99b5vW++Y3v8lZZ53FgQceiJQ7dmhCCF70ohfd7XLVsf72t79d9Nv73/9+LrzwQp7znOfw85//fIeOp0GDzeHoo4/m6KOP3qplv/rVryKE4Ktf/eo9ekz/E7D33ntzzjnn3NuH0aDBDmFL76h7C+eccw577733dq37hje8ASHE2Hf35r3aPCcCtuU99KeGpfrUvYFtYq3VjV192u02D3jAA3jRi17EHXfcsUMHsn79es444wze/e53c8IJJyz6/aMf/SgXXnjhDu1jW/Db3/6W17zmNXzmM5/hggsu4HnPex7e+2Xdx0UXXcSll166rNu8t+CcY/Xq1fzf//t/77Vj6Pf7vOENb/ijkc2tuX6HHHIIL3jBC/4ox7Pc2LBhA1prPv7xjwPhxSOE4Nhjj11y+fe///31s2FbB9MQXtKjz5eJiQnud7/7ceqpp3LFFVf8ycxaLYVTTjmF//N//g8wfLjfddddSy67995784QnPGHR9wsLC7zpTW/iIQ95CN1ul+npaY488kg+9KEPbfbZk+c57373u3n0ox/NypUrSdOU3XffnZNPPpmPfexjWGu36TyOPvrosWsw+vnFL36xTdv6Y6Lqm0IIpJSsWLGCBz/4wTzvec/j29/+9g5t+4/1nH7LW97CZz7zmXt8P3eH0b78PxGbPtf+t+JP4Z1d4ac//SlPe9rTuN/97ke322XnnXfmMY95DJ///Ofv7UPbJujtWemNb3wj++yzD1mW8Y1vfIOLL76Yq6++mp/85Cd0u93tOpAf/vCHvPnNb+YZz3jGkr9/9KMf5Sc/+QnnnXfedm1/czjrrLN4+tOfTqvVGvv+Zz/7Gf/6r//KQx/6UB760IdijOF3v/sde+2117Lt+6KLLmLnnXf+HzE6/s53vsNdd93FSSeddK8dQ7/f5/zzzwf4o4y07+763XbbbVx//fW88Y1vXLZ9PuYxj2EwGJCm6bJtc3P44he/iBCC4447rv6u3W5z3XXXcfvtt7PrrruOLX/ZZZfRbrfJsmy799lqtfiXf/kXAAaDATfffDOf//znOfXUUzn66KP57Gc/y9TU1FZt64Ybbtjhma6tQVmWfPnLX+aCCy7Y7m3ccccdPO5xj+PnP/85T3/603nRi15ElmVcccUVnH322Vx99dVcdtllKKXqddauXcuJJ57I97//fY4//nhe+9rXsmrVKm6//XauvfZazjzzTH71q1/xt3/7t9t0LPe5z32WPJfdd999u8/vj4GDDz6Yl7/85QDMzc3x85//nE984hO8//3v56UvfSn/+I//uF3b/WM9p9/ylrdw6qmn8uQnP3ns+829o+4JLEdf3h78se5VWPxc+2Pu+08Jm76zv/SlL91rx3LzzTczNzfH2Wefze67706/3+eKK67g5JNP5r3vfS/Pe97ztrj+a1/7Wl71qlf9kY52C/DbgEsuucQD/rvf/e7Y9y972cs84D/60Y9ucbkdwUknneT32muvrV4e8C984QuXbf/3BA488EB/1FFHbdWy8/Pz9+zB7CD+9m//dpuuzz2BtWvXesC//vWv/6Ps7+6u3wc+8AHf6XR8v9/f4naOOuqou+0Hg8HAW2u34yi3H2edddbYce21117+cY97nJ+amvIXXnjh2LK///3vvZTSn3LKKdt975999tm+1+st+dsFF1zgAX/aaadtcRvOubtt7+XGv//7v3vA33TTTd5771//+td7wK9du3bJ5ffaay9/0kknjX13/PHHeyml/+xnP7to+Ve84hUe8G9961uXXOeKK65Ycj/f/e53/Uc+8pFtOpejjjrKH3jggdu0zp8ClmpT773v9/v+yU9+sgf8RRddtF3b3pbn9I6g1+v5s88++x7fz5awaV/eHM4+++ztft5X98e9hU2fa/9b8afwzt4SjDH+z/7sz/wDH/jAe/tQthrLMix77GMfC8BNN9009n2e57zsZS9j9erV9Ho9nvKUp7B27dqxZT772c9y0kknsfvuu9Nqtdh3331505veNDZVefTRR3PVVVdx880319N6W6vf+sxnPsNBBx1Eq9XiwAMP5Atf+MLY75vTp11zzTUceeSR9Ho9JicnOemkk/jpT386tsw555zDxMQEt9xyC09+8pOZmJhg9erVvOIVr7jbqda9996bn/70p3zta1+rz6mKqlbH9LWvfY0XvOAF7LLLLtznPvep173ooos48MADabVa7L777rzwhS9k48aNY9s/+uijOeigg/jZz37GMcccQ7fbZY899lhyeufmm2/m5JNPptfrscsuu/DSl760HsVvrXziqquuWhSdvuaaazjqqKOYnJxkamqKhz/84Xz0ox8dW+YTn/gEhxxyCJ1Oh5133pm/+Iu/4JZbbhlbZmva+be//S2rV68G4Pzzz6/b9A1veEO9nV/84heceuqprFq1ina7zaGHHsrnPve5sX1Vbf/Nb35zi313S9dvtE2OOeYYOp1O/d373vc+9t13XzqdDo94xCP4+te/vqgtK530v/3bv/Ha176WPfbYg263y+zs7CIN9Yte9CImJibo9/uLtnPGGWew6667jvXFrenXEKYDv/CFLyy6pu12m6c+9amLruPHPvYxVq5cyfHHHz/2/SWXXIIQguuvv37RPt7ylreglFp0vZfCq171Ko477jg+8YlP8Mtf/rL+vpJPfPGLX+TQQw+l0+nw3ve+t/6tiip+73vfQwjBBz/4wUXbrvr6lVdeWX93yy238KxnPYs1a9bUz45//dd/XfLYrrrqKg444IDt1pR+61vf4otf/CLnnHMOJ5988qLfL7jgAu5///vztre9jcFgAMB//dd/8cUvfpHnPe95PPWpT11yu4ceeih//ud/vl3HtDlszfO6wre//W3+z//5P6xcuZJer8dDHvIQ3vnOd44tszX35I6g0+nw4Q9/mFWrVvF3f/d3Y9IZ5xwXXnghBx54IO12mzVr1nDuueeyYcOGepm7u883btzIeeedx5577kmr1WK//fbjbW972yJ5knOOd77znTz4wQ+m3W6zevVqTjjhhFoaJYRgYWGBD37wg/V+qr67uXfUcr8HYOm+XL1D2+02Bx10EJ/+9KcXrbe53I7f/va3CCHuVjKzlI55a9p2W/e71HNt031X7f2Nb3yDF7/4xaxevZoVK1Zw7rnnUhQFGzdu5BnPeAYrV65k5cqVvPKVr1wkyfqHf/gHDj/8cHbaaSc6nQ6HHHLIkuYGg8GAF7/4xey8885MTk5y8sknc8sttyx6d8HWP5Pe/e53c+CBB9Ltdlm5ciWHHnroouc1LH5nb6qhrtr24x//OOeffz577LEHk5OTnHrqqczMzJDnOeeddx677LILExMTPPOZzyTP8+0+v02hlGLPPfdc1KeXwlIa6iqP7rLLLuOBD3wg7XabQw45hP/4j/9YtP5Xv/pVDj30UNrtNvvuuy/vfe97t0uXvV2Sj03x61//GoCddtpp7Pu/+qu/YuXKlbz+9a/nt7/9LRdeeCEvetGLuPzyy+tlLr30Unq9Hi972cvo9Xr8+7//O6973euYnZ3l7//+7wF4zWtew8zMDH/4wx94xzveAcDExMTdHtc3vvENPvWpT/GCF7yAyclJ3vWud3HKKafwu9/9btGxjuLDH/4wZ599Nscffzxve9vb6Pf7XHzxxTz60Y/m+uuvH3vYWGs5/vjjOeyww/iHf/gHrr32Wt7+9rez77778vznP3+z+7jwwgv5q7/6KyYmJnjNa14DwJo1a8aWecELXsDq1at53etex8LCAhA6zvnnn8+xxx7L85//fG644QYuvvhivvvd7/LNb36TJEnq9Tds2MAJJ5zAU5/6VE477TQ++clP8jd/8zc8+MEP5sQTTwSCbvOxj30st912Gy95yUvYdddd+ehHP8p11113t+1b4fbbb18kbbj00kt51rOexYEHHsirX/1qVqxYwfXXX88XvvAFzjzzzHqZZz7zmTz84Q/nggsu4I477uCd73wn3/zmN7n++utZsWLFVrfz6tWrufjii3n+85/PU57ylJpkPOQhDwGCRuuII45gjz324FWvehW9Xo+Pf/zjPPnJT+aKK67gKU95ytg53V3fvbvrV5Yl1157LW95y1vq7z7wgQ9w7rnncvjhh3Peeefxm9/8hpNPPplVq1ax5557LmrXN73pTaRpyite8QryPF9S5nH66afzT//0T1x11VU87WlPq7/v9/t8/vOf55xzzqllAtvSr7/73e+ydu3aJbWUZ555Jscddxy//vWv2XfffYEgyTr11FPH+h/Aqaeeygtf+EIuu+wyHvrQh479dtlll3H00Uezxx57LNrHUjjrrLP40pe+xJe//GUe8IAH1N/fcMMNnHHGGZx77rk897nP5YEPfOCidQ899FDud7/78fGPf5yzzz577LfLL798bDBwxx138MhHPrJ+IK9evZprrrmGZz/72czOzi6SnV199dVLaqLXr1+/5HlsSrYqneDm5G5aa84880zOP/98vvnNb3LsscfW6/zFX/zFkuvsCKy1i/Tf7XabiYkJLr30UiYmJnjZy17GxMQEX/nKVxY9rwG+/OUv84QnPIHddtutfq78/Oc/58orr+QlL3kJsO335PZiYmKCpzzlKXzgAx/gZz/7GQceeCAA5557bv0MevGLX8xNN93Ee97zHq6//vr6Wbql+7zf73PUUUdxyy23cO6553Lf+96X//zP/+TVr341t91221jOz7Of/WwuvfRSTjzxRJ7znOdgjOHrX/863/rWtzj00EP58Ic/zHOe8xwe8YhH1NPb1b21FJb7PVBh0778pS99iVNOOYUDDjiACy64gHXr1vHMZz5zLMBzT2Bb2nZbsKXn2qb4q7/6K3bddVfOP/98vvWtb/G+972PFStW8J//+Z/c97735S1veQtXX301f//3f89BBx00dv++853v5OSTT+bP//zPKYqCf/u3f+NpT3saV1555RiJPeecc/j4xz/OWWedxSMf+Ui+9rWvLSmb3Npn0vvf/35e/OIXc+qpp/KSl7yELMv48Y9/zLe//e36vQtLv7M3hwsuuIBOp8OrXvUqfvWrX/Hud7+bJEmQUrJhwwbe8IY38K1vfYtLL72UffbZh9e97nXbfH4VFhYWGAwGzMzM8LnPfY5rrrmG008//W6PcXP42te+xuWXX86LX/xiWq0WF110ESeccALf+c53OOiggwC4/vrrOeGEE9htt904//zzsdbyxje+sQ7QbRO2JZxdSTmuvfZav3btWv/73//e/9u//ZvfaaedfKfT8X/4wx/Gljv22GO9c65e/6UvfalXSvmNGzfW3y0lZXjOc57ju92uz7Ks/m57JB9pmvpf/epX9Xc/+tGPPODf/e53Lzqnaoprbm7Or1ixwj/3uc8d297tt9/up6enx74/++yzPeDf+MY3ji370Ic+1B9yyCF3e4ybm0qsjunRj360N8bU3995550+TVN/3HHHjU3/v+c97/GA/9d//df6u6OOOsoD/kMf+lD9XZ7nftddd/WnnHJK/d3b3/52D/jPfOYz9XeDwcDvv//+HvDXXXfd3Z7HptKGjRs3+snJSX/YYYf5wWAwtmzVH4qi8Lvssos/6KCDxpa58sorPeBf97rX1d9tbTtvSfLxuMc9zj/4wQ8e61POOX/44Yf7+9///vV329J3tzQVvOnUaXW+Bx98sM/zvF7ufe97nwfGtnPdddd5wN/vfvdbJF+ofquui3PO77HHHmPX1HvvP/7xj3vA/8d//If3ftv6tfdLTwdW0+rGGL/rrrv6N73pTd5773/2s595wH/ta19bUu51xhln+N13332sz/7gBz/wgL/kkkvq77Yk+fDe++uvv94D/qUvfenYMQH+C1/4wqLl99prr7Ep9Fe/+tU+SRK/fv36+rs8z/2KFSv8s571rPq7Zz/72X633Xbzd91119j2nv70p/vp6emxa/Kb3/xm0X1STWlv6TMqT6gkCRs2bNjsuX/qU5/ygH/Xu97lvff+KU95igfG+qP34d5du3Zt/dnSNpdC9dzY9FO141JymnPPPXfseW2M8fvss4/fa6+9Fu1/9J7a2ntya7A5yUeFd7zjHR6oJTVf//rXPeAvu+yyseW+8IUvLPp+c/f5m970Jt/r9fwvf/nLse9f9apXeaWU/93vfue99/4rX/mKB/yLX/ziRdsYbY/NST42fUfdE+8B75fuywcffLDfbbfdxvrZl770JQ+MPR82fS5VuOmmmxbd50tJPja9V7e2bbdlv95v/rk2uu+qvY8//vix6/OoRz3KCyH8X/7lX9bfGWP8fe5zn0X9Y9P7pCgKf9BBB/nHPvax9Xff//73PeDPO++8sWXPOeecRe+xrX0mPelJT9oqydZScsRNpYdV2x500EG+KIr6+zPOOMMLIfyJJ544ts1HPepRY227LedX4dxzz62fOVJKf+qpp449rzeHpfpUtZ3vfe979Xc333yzb7fb/ilPeUr93ROf+ETf7Xb9LbfcUn934403eq31NkuTtkvyceyxx7J69Wr23HNPnv70pzMxMcGnP/3pRZGm5z3veWMh8yOPPBJrLTfffHP9Xa/Xq/9urSXLMk444QT6/f4OZ5Ufe+yxY6P8hzzkIUxNTfGb3/xms+t8+ctfZuPGjZxxxhncdddd9UcpxWGHHbZk5PYv//Ivx/595JFHbnEfW4vnPve5Y0lI1157LUVRcN55540lUTz3uc9lamqKq666amz9iYmJsQhWmqY84hGPGDu2L3zhC+yxxx5jU83tdpvnPve5W32cV1999Zi04ctf/jJzc3O86lWvot1ujy1b9Yfvfe973HnnnbzgBS8YW+akk05i//33X3QusP3tvH79er7yla9w2mmnMTc3V1/TdevWcfzxx3PjjTcukh1sTd/dEq6++uqxqdPqfP/yL/9yLNJ8zjnnMD09veQ2zj777DG5yFIQQvC0pz2Nq6++mvn5+fr7yy+/nD322INHP/rRwLb366uvvnqzkQSlFKeddhof+9jHgBBp3nPPPTnyyCOXXP4Zz3gGt95669g+LrvsMjqdDqeccsoWz28U1azU3Nzc2Pf77LPPIqnJUjj99NMpy5JPfepT9Xdf+tKX2LhxYx0F8d5zxRVX8MQnPhHv/VhbHX/88czMzPCDH/ygXv+qq65ienq6budRXHHFFXz5y19e9Nl0Jqo6n8nJyc0ee/Xb7Ozs2J+bztT98z//M6tXr64/Sx3X3WHvvfdedMyvfOUrAcb6Y3UvHXnkkWPP6+uvv56bbrqJ8847b2yWCYb3//bckzuCTfvOJz7xCaanp3n84x8/do0POeQQJiYmtmqG7hOf+ARHHnkkK1euHNvGsccei7W2nlq+4oorEELw+te/ftE2tsfq6554D8Divnzbbbfxwx/+kLPPPnvsGfX4xz+eAw44YJuPe1uwtW27rdjSc21TPPvZzx67Pocddhjee5797GfX3ymlOPTQQxe15eh9smHDBmZmZjjyyCPHnh2V/HRTF6i/+qu/Gvv3tjyTVqxYwR/+8Ae++93vbvHcNn1nbwnPeMYzxmY8qnZ41rOeNbbcYYcdxu9//3uMMdt0fqM477zz+PKXv8wHP/hBTjzxRKy1FEVxt8e4OTzqUY/ikEMOqf993/velyc96Ul88YtfxFqLtZZrr72WJz/5yWNJ1/vtt9+i2ZutwXZJPv7pn/6JBzzgAWitWbNmDQ984AOXzJK9733vO/bvlStXAoxp1H75y19y/vnnc91113HHHXeMTYfOzMxsz+Ftdv/VMYzuf1PceOONwFAXvik2dRio9HDbso+txT777DP274rMbTqlnaYp97vf/RaRvfvc5z6LHtgrV67kxz/+8dg2991330XL7bffflt1jEtlhVcSoGpKZSls7lwA9t9/f77xjW+Mfbcj7fyrX/0K7z1/+7d/u1nHgzvvvHNsQLg1fXdLuOqqq3jiE59Y/7s63/vf//5jyyVJwv3ud78lt7Hp9d8cTj/9dC688EI+97nPceaZZzI/P8/VV1/NueeeW1/XbenXt99+Oz/4wQ+2OB145pln8q53vYsf/ehHfPSjH+XpT3/6ZsnB4x//eHbbbTcuu+wyHve4x+Gc42Mf+xhPetKTtkgiN0U1YNh0na1tpz/7sz9j//335/LLL69fipdffjk777xz3S5r165l48aNvO997+N973vfktu58847679fddVVHHfccWi9+FH6mMc8hp133nnR95sOMqvzmZubW0RAK2xKuqs/5+fnx8jOKaecUt93L3/5y7fZNg9CkGNz1og//elPee1rX8tXvvKVmtRXqJ7XW3P/b889uSPYtO/ceOONzMzMsMsuu2x233eHG2+8kR//+MebnRqutvHrX/+a3XffnVWrVm3PoS/CPfEegMV9eXPPrGrfo+RwubG1bbst2Jrn2ig2fQdU99mm8rzp6elF74Urr7ySN7/5zfzwhz8c0xWPXoebb74ZKeWi59em795teSb9zd/8Dddeey2PeMQj2G+//TjuuOM488wzOeKII+plt9XJZVvawTnHzMwMO+2001af3yj2339/9t9/fyAQ+eOOO44nPvGJfPvb396uwedSffcBD3gA/X6ftWvX4r1nMBgseUxby4FGsV2E+hGPeASHHnro3S43Gl0dhY8C/tnZWY488kimp6d54xvfyH777Ue73eY73/kOL3nJS3bYd/bu9r8Uqn1++MMfXmQLBix6cW5uH8uBrRk9bgnbc/7bim984xvMzs7e476lO9LO1TV9xStesdlI5qY3z4603U033cQvfvELLr744m080nFs7fV/5CMfyd57783HP/5xzjzzTD7/+c8zGAzGtGfb0q+vueYa2u02xxxzzGb3edhhh7Hvvvty3nnncdNNN43p8zaFUoozzzyT97///Vx00UV885vf5NZbb91m/e9PfvITYPG12pb75PTTT+fv/u7vuOuuu5icnORzn/scZ5xxRn3+VTv9xV/8xSKtdYVKl9/v9/nqV7+6w9f5QQ96EJ/5zGf48Y9/zGMe85gll6nITxUZrF46P/nJT8ZelnvuuWf9oquie8uFjRs3ctRRRzE1NcUb3/hG9t13X9rtNj/4wQ/4m7/5m216Xm/PPbkj2LTvOOfYZZdduOyyy5Zcfmv0k845Hv/4x9fR+00xqvO/N7E1z7Id7cubIzvbM6CDrW/bbdnv1jzXRrG5dlvq+9G2/PrXv87JJ5/MYx7zGC666CJ22203kiThkksuWTI58O6wLc+kBz3oQdxwww1ceeWVfOELX+CKK67goosu4nWve11tKbut7+xtaQdYXn5x6qmncu655/LLX/5yyeDbnxqWJSlxe3Hddddx55138qlPfWrspbDpyBm2b2pse1BJRHbZZZfNRmmWC9t6TpUH9g033DAW1SyKgptuumm7jnevvfbiZz/7Gd77seP51a9+tVXrL5UVXrXhT37yk82+FEfPZdOo6Q033LBdft+ba8+qrZIkWdZrurn9LSUDqM7nxhtvHDvfsiy56aab+LM/+7MdOpbTTjuNd77znczOznL55Zez995788hHPrL+fVv69VLuJEvhjDPO4M1vfjMPetCDOPjgg7e47DOe8Qze/va38/nPf55rrrmG1atXb5VMYxQf/vCHEULw+Mc/fpvWG8Xpp5/O+eefzxVXXMGaNWuYnZ3l6U9/ev376tWrmZycxFp7t+30la98hTzPt2tqcBRPeMITuOCCC/jQhz60JKG21vLRj36UlStX1s/JJzzhCbz1rW/lsssuG3t23pP46le/yrp16/jUpz41dpybujuN3v+ba8N76p5cCvPz83z6059mzz335EEPelB9jNdeey1HHHHEVsmqlsK+++7L/Pz83R7/vvvuyxe/+EXWr1+/xSj11r4P7on3wFJ9efSZtSluuOGGsX9XM3ibOjJsrURuU2xt227Lfrf2ubajuOKKK2i323zxi18c8w6/5JJLxpbba6+9cM5x0003jUVSN333bsszCcIM0+mnn87pp59OURQ89alP5e/+7u949atfTbvd3mFXoq3F1p7fllC5Gm2vWmGpvvvLX/6SbrdbD5rb7faSx7Qtx1nhXnUzrx4gZVnW3+V5znve855Fy/Z6vR2WgGwNjj/+eKampnjLW94ydlwVNrX92xH0er2tsoSpcOyxx5KmKe9617vGRoEf+MAHmJmZ2a6iKscffzy33HLLmFVVlmW8//3v36r1l9KkHXfccUxOTnLBBRcsKvJRHfehhx7KLrvswj//8z+PTYldc801/PznP9+uc6mKCm3aprvssgtHH300733ve7ntttsWrbe913Rz1+/qq69eJAM49NBDWb16Nf/8z/88pgm79NJLt6kPbA6nn346eZ7zwQ9+kC984QucdtppY79vbb+upgO3pv2f85zn8PrXv563v/3td7vsQx7yEB7ykIfwL//yL1xxxRU8/elPX1ImsTm89a1v5Utf+hKnn376ktN4W4sHPehBPPjBD+byyy/n8ssvZ7fddhsjh0opTjnlFK644oo6qjmK0b5y9dVXc+ihhy7SRG8rDj/8cI499lguueSSMeu+Cq95zWv45S9/yStf+cqaDBxxxBE8/vGP533vex+f/exnl9zuckaKYBiRGt1uURRcdNFFY8s97GEPY5999uHCCy9c1Lerde+pe3JTDAYDzjrrLNavX89rXvOa+p1z2mmnYa3lTW9606J1jDFjx725+/y0006r7Qs3xcaNG2st6SmnnIL3vo4QjmK0Lbf2fXBPvAeW6su77bYbBx98MB/84AfH3r1f/vKX+dnPfja2/l577YVSapG2edO+sbXY2rbd2v1uy3NtR6GUQggxFiX/7W9/u6gKZhVQ2PRY3/3udy/a3tY+k9atWzf2W5qmHHDAAXjv6+f+tujIdwRbe36wtISnLEs+9KEP0el0xjT7t912G7/4xS+WfI9tiv/6r/8akyb9/ve/57Of/SzHHXccSimUUhx77LF85jOf4dZbb62X+9WvfsU111xz9ye5Ce7VCPXhhx/OihUrOOecc3jxi1+MEIIPfehDS75oDznkEC6//HJe9rKX8fCHP5yJiYkxjepyYWpqiosvvpizzjqLhz3sYTz96U9n9erV/O53v+Oqq67iiCOOWJLwbw8OOeQQLr74Yt785jez3377scsuu2xW4wphpPrqV7+a888/nxNOOIGTTz6ZG264gYsuuoiHP/zh22Whde655/Ke97yHM844g5e85CW11rXSeW4panLTTTfx85//fNE04dTUFO94xzt4znOew8Mf/nDOPPNMVq5cyY9+9CP6/T4f/OAHSZKEt73tbTzzmc/kqKOO4owzzqht8/bee29e+tKXbvO5VDfe5ZdfzgMe8ABWrVrFQQcdxEEHHcQ//dM/8ehHP5oHP/jBPPe5z+V+97sfd9xxB//1X//FH/7wB370ox9t8/6Wun6PetSjuO666/jnf/7nsWWTJOHNb34z5557Lo997GM5/fTTuemmm7jkkks2q6HeFjzsYQ9jv/324zWveQ15ni+yGtrafl1NB27NA3evvfa6Wy/RUTzjGc/gFa94BbB5uzdjDB/5yEeAMLC7+eab+dznPsePf/xjjjnmmM1qCLcFp59+Oq973etot9s8+9nPXpT/8da3vpXrrruOww47jOc+97kccMABrF+/nh/84Adce+21tR3e1VdfzTOf+cwdPh6AD33oQzzucY/jSU96EmeeeSZHHnkkeZ7zqU99iq9+9aucfvrp/PVf//XYOh/5yEc44YQTePKTn8yJJ57Isccey8qVK+tKif/xH/+xw9HzURx++OGsXLmSs88+u35ef/jDH15E3KWUXHzxxTzxiU/k4IMP5pnPfCa77bYbv/jFL/jpT39ak6TlvidvueWWuu/Mz8/zs5/9jE984hPcfvvtvPzlL+fcc8+tlz3qqKM499xzueCCC/jhD3/IcccdR5Ik3HjjjXziE5/gne98J6eeeiqw+ef0X//1X/O5z32OJzzhCZxzzjkccsghLCws8P/+3//jk5/8JL/97W/ZeeedOeaYYzjrrLN417vexY033sgJJ5yAc46vf/3rHHPMMbzoRS+q93Pttdfyj//4j+y+++7ss88+HHbYYYvO8554D2yuL19wwQWcdNJJPPrRj+ZZz3oW69evr32OR5Ogp6enedrTnsa73/1uhBDsu+++XHnllduldQa2um23dr/b8lzbUZx00kn84z/+IyeccAJnnnkmd955J//0T//EfvvtNzb7fsghh3DKKadw4YUXsm7dutpWrvLZH333bu0z6bjjjmPXXXfliCOOYM2aNfz85z/nPe95DyeddBKTk5ObfWffE9iW8zv33HOZnZ3lMY95DHvssQe33347l112Gb/4xS94+9vfPpZ8/epXv5oPfvCD3HTTTXcbZT/ooIM4/vjjx2zzgLHB7Rve8Aa+9KUvccQRR/D85z8fay3vec97OOigg/jhD3+4bSe9LZYgW1sBcXPLLWVx8/Wvf90fdthhvtPp+D322MP/f//f/1fb8owuNz8/788880y/YsWKRZY9S4HNVErcnEXOppWhrrvuOn/88cf76elp3263/b777uvPOeecMQuWzdl8bW0lqNtvv92fdNJJfnJycsw67e7a+T3veY/ff//9fZIkfs2aNf75z3/+InuqzVU8W6rC1W9+8xt/0kkn+U6n41evXu1f/vKX+yuuuMID/lvf+tZmj/8973mPn56e9mVZLvn75z73OX/44Yf7Tqfjp6am/CMe8Qj/sY99bGyZyy+/3D/0oQ/1rVbLr1q1yv/5n/95bb84esxb287/+Z//6Q855BCfpukia55f//rX/hnPeIbfddddfZIkfo899vBPeMIT/Cc/+cl6mW3pu0tdvyuvvNILIfwdd9yxZJtcdNFFfp999vGtVssfeuih/j/+4z82a1f0iU98YtH6m7OJ8t7717zmNR7w++2335L7rtbfUr9+xSte4Q844IAl1707azLvt9x3b7vtNq+U8g94wAOWXLeyR6w+3W7X77333v6UU07xn/zkJ5esFLmlY9r0Xq9w44031vv4xje+seS6d9xxh3/hC1/o99xzT58kid9111394x73OP++973Pe+/9T37yEw/473znO4vW3Z5Kid4Ha8M3vOEN/sADD/SdTsdPTk76I444wl966aVj9l2jGAwG/sILL/SPetSj/NTUlNda+1133dU/4QlP8JdddtmY7ebW4O4qJX7zm9/0j3zkI32n0/G77767f+UrX+m/+MUvLtknv/GNb/jHP/7xfnJy0vd6Pf+QhzxkzLLU+627J7cGlX0i4IUQfmpqyh944IH+uc99rv/2t7+92fXe9773+UMOOaRu7wc/+MH+la98pb/11lvrZTb3nPY+XLNXv/rVfr/99vNpmvqdd97ZH3744f4f/uEfxqzGjDH+7//+7/3+++/v0zT1q1ev9ieeeKL//ve/Xy/zi1/8wj/mMY/xnU5nzKpwc++o5XoPbKkve+/9FVdc4R/0oAf5VqvlDzjgAP+pT31qyffI2rVr/SmnnOK73a5fuXKlP/fcc+ttb6tt3ra07dbs9+6ea0txgk2fYZu7r5d6P33gAx/w97///X2r1fL777+/v+SSS5Y874WFBf/CF77Qr1q1yk9MTPgnP/nJ/oYbbvAsURn17p5J3nv/3ve+1z/mMY/xO+20k2+1Wn7ffff1f/3Xf+1nZma891t+Z2/te2hb2mdrz+9jH/uYP/bYY/2aNWu81tqvXLnSH3vssUtWjq3eE6P3w+Zs8174whf6j3zkI/W1eOhDH7rku/Pf//3f/UMf+lCfpqnfd999/b/8y7/4l7/85b7dbi9adku49+p/NviTRuXbuim5HcWJJ57on/a0p/0Rj+pPH89//vP9wx/+8Hv7MLYbD3rQg/xf//Vf3yPbXrt2rddaL/IT/++It73tbX7NmjWbJboNGvx3wf+GvnxPPteWG5Xf/kc+8pFl3/afwjv7nji/1772tV4pNfbd5oKqW4snPelJWwxOLYV7VfLx3wHVtIRfZj3inxIGg8FYokaWZbz3ve/l/ve//xZtq44++ujNeg//b8XBBx98j0iR/hgoioLTTz99kf56uXDppZdireWss866R7b/x8Tee+/NO97xjj9asnSDBvcU/qf35Xv6ubYj2PTdC6EKr5Rys44/O4I/9jv7j3V+t91225IWpVuLTY/zxhtv5Oqrr96sq8rmIPz/ZKa4DPjfQKhPPPFE7nvf+3LwwQczMzPDRz7yEX76059y2WWXbdEOrUGDrcFXvvIVfvazn/G3f/u3HHPMMWOFVRr8cbB27dotWpilabpsPsnLidtvv32Lv3c6nc0WRmrQ4E8d559/Pt///vc55phj0FpzzTXXcM011/C85z2P9773vff24e0w7unz+81vfsOnP/1p3vjGN/KEJzxhzAZTCMELX/jCrcp522233TjnnHNqH/eLL76YPM+5/vrrty0Jfrvj4f9LMDMz4xcWFu7tw7hH8Y53vMMfeOCBvtfr+Xa77R/2sIf5f/u3f7u3D6vB/xAcddRRPkkSf/TRR29RQtTgnsOoxnipz1Kltf8UsKVjZkRn3KDBf0d86Utf8kcccYRfuXKlT5LE77vvvv4Nb3jDZvOS/rvhnj6/Sy65xE9OTvonPvGJ/vbbbx/7jW2QfJxzzjl+r7328q1Wy09NTfnjjz9+LL9ha9FEqBs0aNDgfzi++c1v1p6uS2HlypVjJXr/VHDttddu8ffdd9/9Hi+D3aBBgwZbg4ZQN2jQoEGDBg0aNGiwA7hXC7s0aNCgQYMGDRo0aPDfHY3LR4MGy4gPv/jkUJXKWLLSYIxl7bo5ZuczpE5odboIpejnOQuDnCRNuM/uu7BiepJOKpjuSJQEky9g8wUEoJRECCiMZSE3GOeYyRzzhcdYR78wGOdJlaKTJCgp6bRS0kTjrKHI5nHOsvPqnVmz6xqsc9yxfh2z8/MUZclC1sc6Rztp0047CADvEICWgnaikFKglEQqMe4GIARIgZCSVqtNkrYwxjA3N0dZlrjSYnMDHhKhkEKgtaaddlBKkbbapO0u/UHGj3/5a265Yy2tboepnVahtKa0htIZyrJkdnaWPM/ppB2metNIISn6C5RZn147Ze/ddmK61yFNNZ12CgIK7ym9R2tFr9NBK4WyFmVtaFsNUkLpDP0iwzhLVhZkZaxmKTQIiVKatNVGCIX1AufBOSiswzpPaRx5aXAOHOHT7w+47dY76PcHrN5lDbvfZ0+ch9/dejt3rdsAQiCVQghJb6LL5GSPdrvNfe+7J6tWhQItP/7xj5mfn6fT6dJud7DGMrtxniwrAIFH4j3khaUsLUIIlE4QUuKr/3mPMQbnHNY6ytLgvafdbtPpdML1dB48OOfqZb0H70IzSCkRYhh/8T6URHfO1YJmROgO4SOQoWugpCSJfcgZg8lLhBC0Wi201ljryAYlznmElAgV9mO9xXsHzoIzSAFrdppmzarp0B+FQ+Cx1lKUJdY5BnlGVuR4BKgUj6S0lrwo6+sSpmRFXfnRGospQ+U9HY95551WccAD92Oi12NudiOzMxsAaLdStFZ4wHiwznHnXeu4a/16Wu02e9x3Lyanp7lr3Xp+97s/kOcFhSkx1qK1ZmpqiiRJsNZgTB4aMh5VohWdbgelJM56rI3XAIEHytIx6BdY6zDOY5yP1ya0PfHcvI+brW/R8KNzYE34IU1TtNYIIfjOt6/fnkddgwYNNkEToW7QYJlRvcDE8Ivhv4dfLlovvDzjX9hUibWEpdXoW3Ozyi2/9Lp3CzH8Y4w/j2+rzg7zvj7iMRXZ6KmIan0x/rMPxI/giz/8YfRoxkj84tZZDF8fS/gM29cz9p968dFtik1PfJMT8n4zxyAWLz3226abXHIjw2Nf+pfFm1ny35t0o7tT9/nR9l/yAKvjGv1mmCNYtfOm641tYQuH4DdtjKWOZ3PtztJXq+43YvSKDgeFi6ziYh8VVMTUL2qXxfZyVd8dObalbuElsNT1XNq+bvP3cN2VfXWNh9fjbvffKD4bNFg2NBHqBg2WEWmrBYCXGicMSEu7YymdQEiNTFIQAmUdKgkRotnZOfI8o5tKyp4i0YK2FqQ6RYghgUMopPIIBMaUDAY51oOxHuc9QmsSrZFSYqzBmhJBiPppmSCExLnw8tdSkiQa7z1aKgQCJSVKBrKhRPgzUZJ2qpFSIKVEyoqIhPNd6PeZmZ3FA1PT0/QmJmPEz+KMwxpHaSxSCLrtLt1W9Pr0Audgfr5POTPPIC+Y7/cpTYkocvqDPspo0lZKr9vFmJIyzxGEY3e2xHkoypyiyEl1CI0KpTDWMb/Qx3nHbL9PP89J05SV09OkaYJyDm1D6FUqH9pYCryWICStVpdWT4aZhtJibIjCFnmIcpbGUZgQ7e3nBmMtSdqm3e0hhKSMUWshC7z3WO8QSpK22njvkULinAMRIo84R3+hT1EWtNKUVrtFUZbMzM4hpSJttXDOx6RCQbvTph3b0TmB856FhQHe5ZEQegQheuucwzlHWeQURRma3oeLVxYFeB8HD2EQMUoeh+M6j7HDgU5FnK2zWGfDdyOjRSE8Qgi0kmglsdZiyiISWo8AJKEveg/OeYy1WOuQGpQI5LooC6w1CDwKhxJQlAVZliGFQGJDjF5KtA59mWxAURRIpUkTidIJSZLQ6YaIfWEspQ2R/CGpBu8cCGilCanWqETRHyzgXMnGjRvYsP4utNbssstqOmmKtQ5rQlS7NJZBnlM6x/p16xhkGXNz8+RFgTEGHyPJQgzb1zmLieuniUJrRZJoWq0WSisK4rqAUglCapwHRDXr4MIHwIShiHMO62zoY0vMKOBFfe2NEQ2ZbtBgmdEQ6gYNlhGtdiSMyuKFQWpHxwi8SvEIbJyi19aTJA5nLes3bMSagl5bk02mtBLFzjtN0101BXicMXhvQUqk1ijCtP3CQh+PwIkw5ytaLdI0RQhB1l+gyDO0VnQ7KVoppJTxRRwkEO00RXgotMYYS6IUSkqkEKRJgpSSNNF0WmkgMCNT+hV5mtk4yx233xEJhgck3nlMEWQDZWkoS4NWinary9T0CowxDBYGGGuZmZ1n/YaNZJFA5kWBFeC0QicJO7VTpiYmakIt8XgHtixwzlHkA/J8QCuReCkRSUKRDcj685RlwZ3r7mLDzAzdbpdil9W0W220B12zRQfCkbRa9Kan0GlCr9OjOzWJ8465uXmKIifPSxbyDGMs/bxkkJcYY5mdH5AXhlU778zkilVonSBKS2EsUhU4gixASkWn3cZ5kCoSaqjJ1iAbUJqSJEnwAubm5yhLg1SKVrtDNsjIBwO00qycXkWn3cE5j7MeZx3CeWxZBrJGFfEP/ctZSz7IGGRZIJ8qRUpJYQuKLA/SEyFrkhnImKg/3gd5QTUY8zb0IescNko+IJA2EUPjAkjTBBIdCX2Bd5YkSWi3UrwE5x3OBWlDaYM8SuPxArx35HkYLCkJqRI4KciynIW+Dv3QGfAueFF32uFY5yDPc3Ti6fYUaSslSVLSdhuPYCEbMCiKeLwV0QVrDEJAp9um226TKMn8whz9vmDdXXeydu0dtNttVu20E2mrTWEMOIt3BNlUf4CQOcZDkqaUpSHLSpx3QcYyUs8gyGosZRn22W6npO1WaJtOB6VVkNN4GwbfWpEkKc57ELHdsDg/vA7OBVlPUYRBXJIkcZBBLd8RQiKFiveux1pzzz0IGzT4X4iGUDdosIyoNKUV2agJhxAxqudw1Z/OYb0LETxrMUZgjEXKELULscOKxUqcszgbthk2KREEHS5CoqQaTldXU74xWqWUAiGwNug1hxFpGcly2JdkPJJmrQ0RPyFItEKr8EKWStbkK4hTPc5abBkiZN45fCRhxlogRFIhtoP1gVQYQxFJt/NDPe5opDTItAWtJMG3WpjSkJdF2IcP7ei8qwma88OPtaF9rTFY43CJo2oBPFjv8M4ilKU0FoTEE3XIzqGURkqDELaWjVgbCZEJ0euK0NS/Oxf1xWF2QCmFVDKGQv1war76d2xvax1CGvI8pz9IAvFyLp7nMMpZfZQUKAFOClqppp0mOO8prcX5MPCoI8IjRNnHyPWoNKlq71EyTfV9+Avg43bD8VRtXv9MFfX0dR+qlnexPwyjotWRjV9v5x3SV+1ZnXc4diXDsRsbI9PehkGDd1QCbilCv5YyRmdH5FPhNop9Fh+jteFYhQxtq5RC6aj39uEYwr1pKE3od1lRUJqSvCgpoz66uteqGQFXnasHKSRSq1qzPezbw2taz/6I4b1bzWIIAVKJepZIKYnDI1w87xEslqeM/YjHx24XlvufWRuxQYN7Bw2hbtBgGbF23UYA8jIkQlkHmfUUNiQqzg1yjHWUxlBaGwiv8AilcUJSOIGwgtIJjJNIAYgUlKfI+2zYOE9pLN5LpienEDIk9kmliGqMGJEKREhqRbvTodVKAZifnw8vcC3ptdtIIB9olPdoGUia9548y3DWURQ5/fk5wLPzqp1YtXIlaZIwNTVFmqZMdidZObmCsiyRVpDN9iMDDlHzbFAwMzuPkopudxqVdijygrmZecrCMLeQkxWWwnqcUKATUBqhFEJKnHWYPEdJyZqddkIryYb1G7mlfxvG5FhTYm1IWpwf5KhkAN6CThBAkiS0dEKqdDg/QvS9nbZwzrGwsEBWGnJbMF9sRGmFavdYubqNkp40MXgnsVaidInzAmMGLPRznAMhNUmaYJHM93OEKplf6NMf5Dhr6XYnaLe7tDvdOgprrImEVtZEu0rGc86zfuMMs/MLwDDBL00SOt0uSkq8M5T5gDQNchgpBBOtlDWrVpAXRYj45wW5DBFcKwQTvS7tTgdjwsyGMZZWu0273QEEZVlirQ0R8U4bKRVlWcSIZyXpAOcthcnDYKnSvsNwgfqYwdhAVL0bKq2FkEipkUqGhEylwAbpiLElzkcZCSEamySKVpowNdFFK4lwhoWFBYQALUMCoS5Doq4Sina7w4oVK6MEwpINQuS/MCER0gpQalS7DyoR6DTMzrR7Kd1eB+EdwtkwGBCO0jtsnnHzLX/gzo0bQlTdWKxz9AcDhFYoHRJX07SFJ4fSgBd0el263S5Vcuho0qcQYXCqtQYhKMoSDPSzPvP9+TCz0euRpBoPTMcBan+QhT7mHcKEAbisx2werTVKhde7UlWCaZjRGF7Qhk43aLCcaAh1gwbLiNn5PpXLRx41t0YorFAMioK5hT6FMWGq2zuEgFaiSZTECYn1AmPBOIF1Ai9FeFEStNLz/YyyNKhWj06ni9aaTrcXHDHKgjzPItEhBO2kJG21SFspptKfSklPd2glCc4YUiURLkQApRA4H6boy9IwNzfLXXfegXMOLRQTnR4KiVaadtqi2+rQa3cpZBFcLwZ5iMomKUJKytzQX8iQStHPMjpZTpGVzC/klEWQThQmuBY4AhEX1UcIvHPYsiRJU1ZMTdLrdHBlyW04nClx1gQ9qrVkRUFaFCgpSJVCKFBKk6gQWZdCRpeRhLTVxjnH3MKA0oD1hjIe+85rLFKmweVEF1jr0dohpUYIj7WePC/xSGSSorTGI8iKEoRgfn7A/MICSik6nQ5a6+B+YgOZtlXEWfgYgRx+gh66H2UiwRFFKsmKqUnSKL3xzmHKglaiabeCbl51OyghGAwyymyAsAacpIiaeJ0kIGSQTMzPY0xJm3YcaAmcs4FQC0GSJCitsc7GWYWIGD2tBgQ1qs6GqP6PIEgTjI0aa3zNtIWUSKkQUlGxwEqP7SKRraLGUkmSNKHT7ZBoRTY/T5YXCOFJdZhhMdbhvEcS5BYTUmCsZWGQY6zBxP4hpECmCTJR4fiiPEUqUDpEfpNWQtpO8M7iChdFQeFeLY1l7fp1iJmNwTGjckCJMxAyypR0kqCsraPLrVaLiYkJjDHMz89jbXQvIUbfxTCibmxwYMmLgkGeoZXG41BakgqN9+04y+XCIMiFqD3WgVB10qdSCilDRDxIvcIMiKtlHkESNB7CbtCgwY6gIdQNGiwj0rQNgCPHR/mDdZ7S2xGphgCCXEGIkByYJgmtRJK2NKkO0TsXo0rWOfCeLC/o9/uUxtJRLXQKeI8xQatpyhCtddbho3a2LArmZmfJEh0n2T1eySCBUBIfiZtSsk5KlELRbbexadjOoNPDWotSweKsKA0L831MacmyAiFVSJyqpQwSkHFKPRAoEEGHvDDAGYeUMug8rUXpEu8cqQScQieRJCqFd44iyxDOUWQ5qZQ4G/Te7TRYA05NTtBqtWi322HKPvq1SaDTm0AJQStNmZiYJE1TEp0glAYcQoW/C+ci8RP0Bznr129ECEFZZBhrGGQFeV4GK0Av0DoNswPdCVSShPWyEDEc5DlFaVDOI3WJ9R5dFOR5sDxLkoSJiYlaCgQiDK6MQHgCEYryg1Y7DfaCaYs0SUPEuQwJa4lWFFmG0wqFQAlJlg0oioyyzENCZRkGdToN0XAdo6HOumjHKKrQcf2JabAxamxGtNEiyhAI5LqWcAQ5QujXwyTaqr/jQ7QYD6UxZEWOkgoHJC7op5VWeAFKhgQ9AOdi7gCEBL5IJMNgK+r1o6Wcc74m+UJKhBtKlkStMgmJkqgwC1NG8krUMUspMaZgYcHjnQUT+mWSaFatWol1ceDnwVhHUQYZUCDRGq3DQERpHUi2DDMOeV4wNxesK/M8jxHqOICRQSsutYz3RLz2UpHoBB1lVkqFe0gnHmGDrlppBdZR2qG7h4qWg5V0ZxRKSkSiR55BDZlu0GA50RDqBg2WEVMrVoWp5Pl5FkqLM5bCGjITomRegvAC76gJdafbZqLXpaUVk52UREl0mlDaoOEsTY5zlvUzs9yxdh3GWNbINr3eFDhHPuiH5CNvsdbUEUxbFvSLjLmNG/A4JicmmJ6aCNPBMhAW5yyJliipUTImJUpFa3ISrRNmO12Uh7IsaSVtitxQFo7+QlFPL0vVIpVpnFaOUcyonxZCoWWKwzM7u8CgX5KmKVPdKXRb4YSgdJYEjxZgZSADVRTRlgWz/XlaSUon0fiywBYF3XZKO9VMr1jB5OQkILDEaXSiQlcn7LKmR6oUWmu6nTZKasqYEOaERaYdlAn6b58VeO+4a90sg/w3ISkz1SgtyfKc+fkFjLU4r2h3JknSFit2Xk2722Xt+vX8/tZbKYqSvDSBJCpF7hxaSUrnsV4ghKTb7dFqdUJUPS+C3hrIixKkR6owvd9qpUxM9kgSTa/ToddpY4qSmbk5soUFvCnQ3oZoJCFCm2U5c7MbWOgPyI0jKxwIiU4S0iQB7+m222ilaKVplPgQJRgSoaLG2jtKU5JlWdDaymGCopAhqmpc0BVLKQPBUyoSxSg5KktspaW2IVWyNCVZEWYC2q2QiCelJGm3aElJK01pt1p451joz1HkGeAYDPpIoq91ktTq65CvQJRBBY200gnWRdJblAhpEKVESIETHu0dxhoW8gHWGqamp1m100q898xsWM9dCwvRWcQjBayYXsHuu++KdZ4Ns3P0BzlZUTA338c6T6fTCcmEStFqhRkJbQ1aq5C4OjvLhvUbgDjWhNqlo9K097MBrVaLFSumSVJFkqZ0e2EGqtVqkSSakCqhcM7H3IMSEwco1obrkKTJiOVjbPs4rtGJQrXCK98Y0yQlNmiwzGgIdYMGywitEwCkCgVBvAjT0SFxLiYhSTHmhqCVIkkS0kQFW7doeWVj0l3Q3YboaFEEdwnnXLA5I5DBKoGqStSLjB1nLFk2wFobJB62i5M2Jk6FqecQXZQxMRGUECH6m7Yo84J2qx3JtorJVgZjQvKVUpok0cGiy1cJjQ7vLSGwHuUMHoyxWFuEZYVASoVUgYiJkL0VFABSxCgtuNxRFgaJCDIUrXHWopXCS0mv02HF9HTQsmZZnSDmvQvyhbRFp91CR/s5KSWOIDPxwoNQIFVIrBQC52SQ6vgFlAqDnSTRFEVInrTW4YVGSo2K0pFWu4OUiqIoyaJ9mo2RTKkNHkVRhiQ2JSVaJyRJSmkMprLvi9c82ByGSLHWYeaijthLFa+dxZoSYxTGlHhnQzKp95RlgTEl1pbYWBwk2Kf5kaQ2hY4zE6FDRvpVkT2G3su1DRtyGNAUxL43ktwW5Q0VQQSCleNIsuEw8dDHJDyJhyiJSZEqSCbSNA0So1xjYgJhNejQMSlv09iqcw4nJZIgW6oSPb33eAtCOoQXgdjHxEFTlhgbdOaJ1riYIJxlA5QQJHHmJkk0k1OTWOsYFCWlDcmiQkkEDqU1Oknq/iziuYV2D0VjsiyP0hs5FslHEGc9ghNMuI/D/ahUmKWpBjMhOVGC8GEANDIrECQkMVFYyJhIOrQxrGaKhtF/i3NNhLpBg+VEQ6gbNFhGlA7wIRqJkAipoqQAEg0qDcmBRZFT5OFlPdHrMDnRIdWSVpogBeSDPrMz/aAPLgusC7rr3XZdA8CKFVN0WkmMJBKnuwX4QEDaSuJaLayz9DohAa/TaZNoRaI1vW6HTjfoiK0pcc4xPzvLxplZWq02K6YmmJ7oIpxlsDBJXpTkhSEvTPRInicrykjQgp+2lkGnHNQBgZ0VxuCFCklkKgnLIhkM+hS5xHpHK9E47xmYAm8sQslo0Rc01TJNEEIws2Ej8zMz0cfYo5UilYJUghMClyYYq5ifX2DDxo0451inFFpWEeouWmms85hIqgaDjKIMLg55FtrBC4HUCR4YZGVIMM1zZuezME2ftJGJxGQF5R1rkXojswvzWCRCJYDFe4sXEhsj9rY/oD/IkVLS7fRoxYqS/cEgyBk89Ho9oCJNoUKmtxbrHQNjsINBSMKM/tGp1kxOTEQJh8EZi5eSbq8LSiHyktLlgIyDKxM1tA5E8EIuywLwQV6BwzpDng0iIXW0O+0gJzKb6KYhumHIKBPxGBeTbKObRRT8BMJdOWEIUQ+obNBOhMGHc1EiYWt7xiTVaD2BjZaJzrta/iQEaK1QQsRZjjCwlE4gonsMyKh7FzUpVVIikQhHqOJpDHk/Y35mNrS5EEz2ekxO9Nhj113otNu0Ox067Q5ZnnPXho1x0FIlFoZzChUvY1JhWQYP6lhJEhkkGjA6ACG2UfBjFxaKwjA/PyBJ4oAoOgLNL/Qx1kXHmIQqibSMEepqYFwNmkR07Am+08PBkYp+3ZUUpHZCadCgwbKgIdQNGiwjChsiT9YTIp8ehHJIHwhSkiYIKcgzRa4EaaqZnOwwPdlBSUmqNVRTz2vvjNHIIOOYnJhgj913C0ljKug1vXUUwuMsdSIXgCCNiWG+ToKSUiCVQCeaiV6XiamJoLMuC6wxbLxrLXfdeSu97gT77b0XK6e6SOHJsqD/vWv9LLN5Rn+Qceud65ib74ckwuhh3E5SUh0i7K0kaFKllgitY7Jb0C975+j3Fwjlr1u02y2sc2RFhstzRKJrCYJUikS0KMuS9evWk2cDpnpddl45RSoVLQUtGcqYIFKM82zcuJG1a+8iL0pMabHWkyQpkxOTIZKoFFKHR5+P3srGlBSRUAuVkLRCNe7CloBnkOXMzA2wztHqKFISbJ6zsGEuyA2kwCmJ0HHK3YMXAuMFwnnybMBgoY+QklXTK5joBW/tfj/MHnS6XSYnJ2MUORBAa0qKLMOUQS40sDYmy+UIH7S9U1NBFx48mwvQim4xiUxTWBiQFWGmgJjc6YyhsmtzzuBKG2UTsd/aIPWAkGzXjoOufr8f3TeoOhg6iVFz7ymLspYd6GjRKKPto/e+ln4QbROFCPaDLu43y1yUEDm0DtvotFqkiSbPM8qyxBuL8R4bI9xKa1CVbMhhwwWt7etAIlUybFMhUEKF4/KBUJuiJFvoMytlSPxLNe2JHrvtuoaHPfQhrJiaYjAIfX5ufh4pwmC4jLNEzhNmVrTCe0+RFcFSMQ+uKTbaE6pYeMbZciSiH4ht1ay+sMzN98N9o4IbiRCe2fkFFgYDkiSl2+kFD/GiqAn1aJJjGINWIndZ2+9V0e0kSYa2i3Hg06BBg+VBQ6gbNFhGFGUZCFr0IR71J66twwi+wFUiYD0tbi1llGyUZXDZ8N6FqoVaBwu4VoskykoqX9l6ByJ43hK3L4RARq9ZH8TbVGSqdpeIBEgQCP+wGmKYmsdHTbMM/tOVz7NH4EXlVVypAYbbVFHK4QU4G6J0EOQc3leROjdGBJQUIQGr8sYmJJghQ4Q10RqrdZAIxE+dsOXBGYONhU5qH2oXHFc8hqwo0c6H4jiV6URUnDpfCXCGtfxCrp6Kbhyy3p6xDhGvbyCFwWEhRF7BY3E+bIk4c2CtC+s5T1maKN0JGmQXfa0DMRIIoWpSXl9b58C5mLQYqv7JStYw4u9cJbk670mKoOMWYugvXcs+pBvrj5WMwjmPNSZceynZNIbpqwteiS4q+cKoeqAmi6KWhoR1fd1HwmKVLrvqD2BtiC5770l0SDAN5NgzslcguG+EaxLcRGQl4q/aI1rSja5TJVxWHtGjvwRXF02rFYuiuDAYNcYEuVFR1v7i1ahgbNv1ecTiOrVDyug5y3CMdc8bsfCL/akaeNQSmurfI202/hk/j9pfuuo7DPt6k4fYoME9h4ZQN2iwjLhz7V1AKHFclMHhoYhE2UU5Rkjqgk47RHPLomBhbi5UOssyrDHMzc4wt7BAK0lYtXpnJnpdet0uq1auQElJv99nMBjEEsZF0BVrjdAqkvVIaOsItce4UIhCRIuyypqt1W2D90xNT7HTqlWk0eJtbn6OLC8D1RAyuBsYi/OCdreH161Y7jiQu16nS7fdDlKEXg+tFDNzs6zbsB6BiIMBjQWsCAVVvLNBhiBgotum120TiysDIlj+pSnOupCUZ0o6qWay0yZNNBMTk3S7XbKiZDAzx8IgY5AXSJ2ivaS0Jd4ICgv57AIgSFopSasVzj0JVSS9F6AShAKhUpChhHvaTlFaYfwsdmaO0lrKrEDEZD+pg8ZZJBqVJjg8gzzopan0vECeG4rSIgTMzfcpihBZzPNQoCYvSgZZhtaaXi/4hntrwVqkd4Hiy0AOlQ6acy0kg4U+hcqxVYETKZhaMQ1IdDJDlgddsE7aKJ1gjIouFSHqXRqDECLY+6Upgyxj/YaNlMagfBxoRF1vMJX29SAolL4eSg1AjTlLVIMrrMVEV4ugCw6ae62DtZtzhrwIfSErMtysRUlJPkhJtI65AbYm6iKwQ0pr6o914Tx81EgHy8IuLa2DdV5ZhoGgBUfUQEsRXUWCbjtNE1auWMHkRI800dzyh1u4XYaE1CzLGGQ5s7OhgqWDMLCNx2OiFWZlWVmVnHcxiVPLGKEWwfZwODAJ/No4Fwo6UYbjUgJlg6yl2+3Sabdr7b0QIv49ic4lGqfDoNQYixBRT11pqEcIvQ8jvXDf2pEZhwYNGuwwGkLdoMEyYm5+PkaowEYyYmK0FFzw1vUCpSCpKrJZQ5E7sixjPhLrbNAnz4tQECUm3nU6bXq9HhIo8iySURu9mB3eyzqKVRNqqBO0bGnHqgg671BSx2lg6HQ6dHu98IJ2wc6rLIdWf1WZY+9Bpy1aKgkSgdKESobtNp1OJ1jUTU6Sak1/MKAsgoQgOIJUdnpQkzJvkUKSpsEizjpHYcLUeCtJ6HRCUYxWqnHOkipJJwn2aq1IuEtjKYogoTDGIJRCekCE5ENjHXlR4JwnsZ6WDzMECIUXMZlN6picp0LEWSp02iJJE1SW4xAYR2hvLFJpOjpF6SREvZOkrgZpTGy3eKYmaoXxnowCU9pYmr2s29VYExMRVbB3cw4RJQwqRuylECSqqnApKfIiRvHDzqRO6HQ6KJ2QF4ZWax5jTDjGqHVPo980BGIto1d5qx09jqmqW0pEjNQH7lclwPnq6kVyTR39HkNMDgx66aB/FjIUEBJRd6yUCjcKIVJbRvcJKSXOlPUMRKJ0rCQY5DBAnTBZEXsBddJhkiT0ekHe5PF1OzsXKmVWlSKr5Eilgu1dN0pvbFmyccPGoLEuCvIiWCFmWR519sPqo0ActMbBxyb/C/7nsp6m8lEGM0z+JMpuXJBuOVF/FwYQgfRrncQZh+EMkHMuSKNs6ABVsnIVfheEBF8RZ67qa+fHKyo2aNBgx9EQ6gYNlhNVBK1KBoLoX+uQXkAk1DrYWcRom6iJb7V+u90hTVM60VpMAM5Y8sEAIYJbgY4l32otpg9WYTIWSZGRNIRCKQLhFcprUIIsz/BzjjRJcLaDEIKFQUY/y5HS0JpfqIvLGCMx1lOUjtKMlj6PMhGhY7Jdm8leF60ViRJI4Um0pN0KEpVES6QIbh5povFKkCRBtiGEiD7DobhFkedx2j8lSU1I9IyJhLk1mMIFuYzSOCkZZDlZdGAorQsKCU+dGCp9nG4XgYAoHY7ZOlfLdIRzoThIKw3XRFaJc2F7UmqUcjgbNOsIT1EajAfKEoqCqhqeqopqVLIG53GmcroQtX54qOgIEUMhRJQVuFC9UunovAJBdAPC+1jq3VEWIaLpZSgbqJxAJQblqCVDgTeNk6eK61ZSkLIocN5TFGUdta1kPuPrxhUjeQzWiEEjLIjE2QQ7toqsArTb7eh9HbY91BCHBhDVn9HFQ4pA2CvfayUdxEJHvnavqIrWaNqtELm1xuBMGJgQS5U7HE4E4u1iu3nnEEqF6plaI2LFympQ5l3Q3nsvcD5Y84UE00CIkySl3ZsIemZjKPLQfmEGJ9jaVZUkK4eTcIrDxM5qkFIPFIRAqGqwEaLUQkiKIvi3a1VQlAYhQn8vSoM1FmuqaLOMRaBCQqIg6PjxAkQg9lUfqxMqGzRosGxoCHWDBsuJWO4X66JlXtDO5sYgpYgJVYJEpbFS3DCKVzkgSKWZmOzS7YTqcJ12G4XEliVzRR5ItBSkSQspSvI8x2IjSQvV+nwRZBQ61XR63SATUKCTUBVvw+wMdn1Ju91ixdQ0SknWbZxh7cxceGEbQau1gFYt0qSH99DPC7LCYL3HCeJUtgykV2l2WjnFTtNTYTAR/bC7bcXK6R4eT7ulUDJEW9NeG3woNlFJU4qyxNoiEIj+QpguFzH5TIhYHMTRzzP6C3MAzGY5k/0BhbHM9PtkRfD8DtZ1gFQoHVyahXJIhpUSAcoiZ2CyYKVmQqQ96bSZ0hqkpCgdmJLSeJRuob3C5AWuNFjvKGwGQmCcJY9EUqfDqflggQgShUThrCPLc/LCjOnfDRbnY9S6KGuteLfdDu4MQqCjHr3Igu+wdQZTmiDJUUFrrrTGeonUmjwroia3Ik/xI6LePro+OO9DwSBr8YSiNUql0VrR1dHSCiLasoVBS/DBbkdt/2AwIBsMGJa/liRa02136qh4JXeoEuqINo8Ch5KKNBYfcS6co/KKUKsnEkUfIsupDtHrVrvN1NQkSkqKPMcURRhAKsJ9IUL5cCvCrEtRluGY2y2UUiTtFlJrvBDMLfTJsjwm1oZkWmOhNB5jfbSak3Q6PXbbbXd0knDLbbexYcMdUScfqj1WkWg8lM7iXVTmV0R3pEG1CsVgqsRBKkKtQ1LhwvyAudn5kKCbhKTmcK+Hez4vyjhLFCtQUim040BbxKi1g0rP3RDqBg2WHw2hbtBgOVEF3eLst4fahzpMyYYXciUNiKlrQ8JSRd20jpX/BD6FQgeNqTUlCE8Sq7KVylOWnkKGyFe9XxFKKycKZGojkXaBDFvPwBYUJsN4T0ILhaIvC/qqJPgz5BQeEjxtlYCXZNpQpCECZ6UIpFoJfCLwCugJxES0eiuCHMW2PfQCsbBtj2nZmPIXzj40h8c7R4nFCEPuSnJd4pwn1SVpYkI+pfMIF4hYXoQp/DQv0FkeItPGRmmBr/WsoUlDZT1RD1yGVeSqAU8lnxFQlwZ3PhwXVC4Y1XpDGYSNetjSGoqyAEBqTTKa8CkEXnmslDWndaMJY4wkF7qhT7L3vnbNCIRa4LAYIWo5kcUP+44PCZHKWKSn1s4PZQguLj3scZVIw9pgjYeQSJXWSaTBhSNufthJqZIEvfOxenhMABRVMZGhFERIEfTSQg6PZ0R6gK/SQWNiqlaApyxDZJ9aPDEUM3gAGcuYKxUqFEqJjoOuaoPjZz7yP8GwxH1t/RdzBIwNSa/RA9rH6+UIciAZbRjTVitG22WdVFoR6tDnhjKLSopRJwfGCyaIkpM4U1Dpw0NycSUnCddGxoRFIYftWPWTUQnJcA8j8g48Mvar6ho1hLpBg+VFQ6gbNFhGVK8oF0sqh1LdwZdWSYkDpHQYm4SELxunyJ0NZcCFCPpfIRDeMd8r+fFD1rNxzSC+QEMikYpEwLmgDQ6WZqL++MBhQ4SwlUZniBCtdN5RFjnWGBKtabfXIYVgfmGBubl5hBAkSRYSyKRG6xS8YKE/oD/IAsGIM8lKyNodZLI7Q7cdEhytCXKDoigYZBkQSjQHDeiQyImYuOe9r317jbUUUT7R6gxIWxtpb5Ss+c+Eid+rSJYDOe4XJWa+j3GOfhEKpQyygv4gSEa0bEUPYEFiE6QM0+ML8wsxyhpkJi4Sdbxnod9nw8xsTDYbHlMWp/WdD0U9qgqAFXmv7chi1D1NU1ZMT5OmKRs3zlDctY6qOl5FnCrqIxV1UZuyLBkMQMdtaa1JpEQLiRUWRMEmVBprwVkL1lPaPkhBluXRy9hh8gzy4NJSmKFDSWmHBYeU0kilSdIWQkjK0iBEGXXy4U9B7GKIWBwkELrBYFDbuCmtUVGuked5qOQoJEqBNSGqXhUWstHBI0kThEiYmppk5YrpEJldmKfIs6gDDvkBMpbcFkKglYiSGjCmxMWKjUnSxTlLURZYayhMEQY7AqZWTNPudIIHeH9AYWIVxSzMJDhr8dbRbrWQKiFJJMYLHCH6v+tuK1A6DDjyvAiWejGqbaNnuI8zKzUp9oHYS6L8iChFcSGRMNFJsI70oZ3DsyMMGMNMgojXZCgPsdaE/grBjjIJ/vbDRMSggK+uc52cnOdRh764NHmDBg12DA2hbtBgGVHF02wkiNYGt4+iKJFK4WQgSUEPHJYu8wJriiCFiGQ6EGrPQjfnewffwo0HrBvuAMbsr4Ya2c28IEcI7DCaOSRjtQNATJAK342sXK+7ydz/prsZ0cWOBr+Glm6bHPiSGF8XsRGBYPK3mod8f4I161okaUq70w3SlMLQLxeiZ3Tw/x7kgVAD9DopqdIIHNpZRIxkD/I+QCB/So6Ur3bM9wdINYsHiiIU8RAiRjIJdoEi2h06E0kUI9Z0MWmw3Wqx00470e12cc6xft36+gpUbVENLiqPcCFEsI1zlnb0zE60RktFIhVCGJAqJLaNmNpZV1kuWqwvop1ccHNxPmq9TZB0ODeMxhpj4vlUg6eEdqsdE9mKMHDBBC2xjT7Hahi9rvTeWZYFEiklupZsBEKto3xFiDBYyAZZJIuhLaQUoUKokqyYnmbXXdfgvWP9Ok1/YX4YicWTJAk6TcKMQxXlF9Ql0JNum047FM3JTE5pg7NNUQZiP7VimtVr1rAwv8Dvf/8HiiyLFyOcU5HlGFPS6zo6vQmQCuPA+pA0u+uuuzO9YgUbZ2e55bbbGQwGLCz0ybIsDqxcTCas5BdREy0EXlSDrirhNOw6SRLanU6shFpE68CS0obCSd1elyQWhKruDxftF6WUtNttkiQJOv2q8A2hecPApYgWngZjQucL/b7xoW7QYDnREOoGDZYRWmuIhFoaWUcugZGoVOXq4EKsylfEQgbnDyUZTBv6qxa4a5c+/W5Jmbgt7LXC9k7hbmm9bdnm1iy7PcfoKTqW+V0N7b0k3VKR5gLlQsQ/kMeQkGl9kAYEUieGpZvd6NaGbV5JEyp5RVX2uR63RCeIEM2OYoNKJjA67T56XnXCXph9GBbfGFbJq6ODdah+OOoZ+l0HWzslJQZL6UVI2CxLChtnJCqpQi03CFUgK9u26u+1JzpR6oBASh8HCUNds4szJk76oNO2VZn7mMAYLd2qtgsSppC4J0faNZQgrwZXoS2MM1EiUwk4AqQMBUf0SPQZgvQjSZKYsBm8qZUalh4Xfli2vUKQAwmMKUNpcRPs9lqtVigRHpNRRb1OiOIa62Lia5j9qNpfWhusEo1BSEmeF0GHnRfBmzpGlMdkMJ6o+ZY1ma5Kgg8t7IYWgD6WPB+6lsREz1jGfNQCM0iFhn22lm1Ufc5GX3dCtHpUshNIfmj1yuu9QYMGy4eGUDdosIyYnp4CIBlkEKfN+3kJMiSPldZhXPAq1ipHCdAxAz9NU6Yne4gO/OjQ2/l/D7uDQbdk7a4L9/JZ3fvIdnL85ql9bjkmY4+fCnpfkagZHVw6nMNaRz/LMdYFqcWqVYHA+FAVz/sY0Ywa5YqMVI4lSkpaaScku6UpUgRipzrhEVkUBQv9Ps57dJKipY5SEYMxZXQTkXXClzOWIsvZsGEDC/MLzM3OUpoS52zQFCcqkq/owhHVAY4gycA7VJaxbmaOVGuKLKfMi6i1jucjFUppPJAXQdbgnKe0JiTGCVlroUsbEti01rSTNMh5jEWaQHKz3FCaAiEMWV4AIhB6a4FAZDuqNaxQKARZNgAikfPBS1mLqnIm0d4uFKHJ8hxRDGUiAEqJ2ut7xcoVtNI0RpeDzWKn3aaVaIwpybIBzjl0ktQ2j6HE9hDee2bn5oKDzQgJn5iaYPUuu6CThG6vNxRhB9NxSuPJizCjEbapKBzM9TN0XpLnGXmeoZXCOli3bj2DLGfj7CylCUV6lNIgHLYMybgyWjpWTicyHquo5N1KxuqNhEql81GaY8rYxxLarQ5KKtrdDmmS1FIoy4ijjwdjQkKnMSVFXhCKQVWSkxDRDr7fmjRN61yChk43aLC8aAh1gwbLiHa7BQRykeRFeJnFan/DCm2e0jiK0qIESB2mvZVSdNopvgsb98j55YHrMFsVmf6fD9v1bDjAgIeesdj/lDAng+zAg4naYGMsaatNp9sNNmGFwZmh7/KwKMmQUHvvETpB6SRWatRR4hGipEKJWotsrUXpitBVUdrgLy6Q9fV1LiSSDfoDSh2cWJyrEtaCtj1EomOlu+i8EWY3gp6+KEv6eShz3Z9fYDC/ECOXwdJOKUcominIiyArctHD23kfSFsssW6ixEh6oudydE6B4EhDGbW2ti7m4mKUO2jqkxgpDbIQom65LMM18NENZKjXiZFYSdTHm3FrCwBCZUmlFe12O7jZKFGXyk60QmhFKUPE2TmLVhKtqqqPIwOYmECaZTmzc7Nh65XftVRMTE6SpAlaJbVdXaS4oZpmGXITqgi2dZCXJcZa8jwnz7K4P8VgkFGWhkGWhciydVEzPTrhIKPLiaoj1GEawBLLaNbEtkpm9IwM8JSklbaQSpImSZB8lCVlWQ4TauOMiYtSD2ddlAu5oCcXVaKjrCPeVenxBg0aLD8aQt2gwTLCWhe1tyX9QUZhQmJilSxYyTWH7gKxQIULiWJCqqClHZnGbjCOyqat1U7J+31MXrXxqI47apNjpNQpEYql+FgOPTo3CBtIcai27oJWOJLh4Fctox2ZJEkTpI2yBCmQPmh/kWLoCuKHRUSsNYBHSkWeZTGhNMxGBF/wQKwqxw8bZQfBZ1lgHaGionQUpaGM56icQAiLVAodzLYDWZZVuXQx5pwhhAgVBwmWgTImkframcLF5EpXR5urBlRC1oL68HuIaOMJln1xWVXtWw51uZW7ClQ6ej/U+Y4I+62xwbavLFHxOgmC97YEnLOY2KYyJuIGP+tQddFYQx4TRpESqcKAp4oAG2uZmZ2Ny4fo/KA/iF7OJca4WhriEUjlYxuFa40QQZ7lg780QlGYkjwPemdTVtKYofAn+JEHuzwVt4X3+HiNAYQfVlWMymtiri1SKVrR1q/d6ZAkCVJKyjJE71tpiu8RFEiRlHuIlSV9jIgvTZwbQt2gwT2DhlA3aLCMKMpQMW2hn8UpYUsRSU+I2FUFHDRCBb11WRZ4GxwqlNIoLevCIA0WQ2vNxMQE3SxlIStiZDa0cRW1FDFHU8lIK70kTXWwa7aB4DjvKApBaS2qIsXOYkwoAiKdRKcaJQQq0bTa7TjoidX6hKLdaZG4hKIoQxU978nzkIwnhKDfXxhGUaNlmUo1SqtAAK1BOl9XehREBxcU1noW+llI5suLmDTpwQfyJKVCqxCxTBNNojQIC2booSJjJFelsaKjVOgkQQqJo6AwZdRfm5qUVTZrKlozwrDwTBgoRF10LJQSCruoYfJd3LuSQ81upbOw1uFN+HelvMjLgvUbN4ZZGiGINWrQIlaHlBKtZR3pVUrF6o5tWq02g2zAIC8wcUCq01acBQjXKS9Kbr9jbXQGSVEqoSgLZufnQ9/xYG0Y3Gjlog2fQiYJOklw/T55jAwrVWK9IM9zFvoDrDWUxoZrUyfUBp/ooihiXoQmOAF6XIwgV6ii96GKZCw4FAsP9Xq9OmExSRKyLCPPgzRF9zTdTg9jLf2FhXpfrVar3m79qSrSsMmAsyHWDRosKxpC3aDBMsKYQKirJLEwhStDJTaoQoZj63hfkZhqGvhuotMeZCGQprLkWgwR7cSqHYx5gIhh5FIQIriVF/LwmKqSyJVMpdqAGEmqG0aCayIWI6OjlnBbfnFXGs8qoilCRFab2lN7qXOrvHsheCFXUblKG1on0okYPZWqjlA7QHmPcCHBrSqJXkkEwvk7Nq3IJ5UC4YYaVBkT4kT1p4gR5qo6ITHJcenjx3ukkzg5tNIL10XWEcaxaf3KhaX6E4ettkXlvhHaxXsXnEMqEhqT20YTZEej6iNXvr52o8mTQ99jP0ywjN9XbS5HEivBD8+TcKwwmiQ33i7WGpwTWBET+iA44ggRZR5JiCBHOc3QY7xKiqzOI7RB/BEhwqyRtSUgsMqjVJBGGBs9y6uovAenotY+Xu+qoqaPTVPJK6wbFlbZtEjKaJu5KLXx0tdJrKPtWSW72lilU27S70JLjfw99gshh7NYIm5PMKx8WQ3g4pWgekqMJj02hLpBg+VFQ6gbNFhG3Hbn2hB1ywsQGp2EMuI6SSlNSX/Qr50TSmOQwkd3A4lQCYUDYV0oZ70ZyEKw+js9Vv24i3e+JgVAIAJC0Om0SdM0FiyJiUp4dIz+dVIdy4KnrJicRGuFLS22DNGy/iCjNIYsL5nr97HO1T7FeiR6VhEv5zz9hQWyLEMKQRqnqBOd0KpKTVeWcfV/QplxYw1KKaZXrKDT6XDzTuv5r31+w2w3W/L8vbOYMscUDmcKsAYtJe1OB6U1piyZWXcXUknW7LwzK6amgu9wS2OMZZDl9AchmtxuR//eaHOGCLZ1xhikBKVDdNQLReIVzg8LbrhKg+1ChbvKkcJEmU+lPZZ1IY4QhWylKWkrVCLUSuGco5O28L0oUyG4QVhrMVEXHQYb0VIxEuNRB4l2u0Wv3cJ7T7udDAlmRQ5j5NM6R5b1o9bagPBhYKAFKmZGVi4gQ6mHj1phOxz8jRBq4Rz4kCOAG+qu0ySh1UoJg6bohCKI0pcgl9Fa15rzSiZTWBP6aJJEezdNu9NFKYUxhoX+AKUKPJJ0kJOXJf1B8GLPC1tLY0S0+TMm2NDhPVKWCKnwzmOMi/aD1JZ2SqtQyrzbZqedVtHptLHWsLAwH8g0UMSItLHh3qvINwwHt6HcPCCC84bBDgexQowV76nuisqLXXjP/MI88q5Q4Knb7ZK2WhR5zsLCAtZaWmmLVqoBRZJonLdoNUw6DD7u0QVFRUcaghxJShG11I2srEGD5URDqBs0WEbcedd6AKTSSB0Subq9CdrdbijLnOe1RVZpQvQ0aYXoqdAK4zzYqjLf0pClYKcfdtn70yvxJeTWYkeSwYKf7xS9iS7eGsp8Ae8siXS0pEdLwYqJlG5LMzUxwX3WrKadphRZQZEVlKVh/cwcgyxjdqHPHeskpbEkaQudtmi1Wuy80850Op06YuacZd1d65idmUFLRbfTQStNt9Wi1+6G6O+Ic3L1Ls/LnDzPSNKU3e9zH1asXMm397mJ/7f7LZsl1M45TFlgCo83JViDkim9dji2jRs3sm7jepSU7L56Z1ZMT2KMIdEyeveKOsqq07Qu/AIS76GfZVhnYqJoLAEtPNbr4J5BqJ4nnAvSD0ddgKWKDDrnolQhiZZnIaIphCBNU1ppK2q3gyY42MbpYfJaJSso52P0UdbOIzr6U4ccxhCZb7VSOt12/C5M+1cOFLW2WYbKg0UeCpq4alQjQ3RbEnXDKhyHtQ5nqwi5qwl13G1ttRfV0Qh8nbgpZXTwSJOwvo9RbecxMbKaJAmtVit4tRdFdOZwwbNdCFpRbiKVptXqoLVibn6OwSALRY28RCcFxjqyWCymNJYylJGs7eVKEworVZaFlfxKxvOMKo3QDlqiEkW702bFyhX0el0WFhZYv74diHkZKmqG6HaIlAspamlLlMPHqDHgwcbovBCg44yGh3rQUwlAqgRRnKPfDwNvrRV5ntNqRW/tLHh4J0qhZBuBDITa2ejikcR7xEYNfyjB7n0oJmNMJV1pJGUNGiw3GkLdoMEyYkQdifAO52W0CgsJaUmiEcJTKUB8RVZEKCySFSVoaj3rkvAgvERahbceYRwiRsqEEEgvoQQKD9YjTeAWiVa0lEALSYuUFooWmsRrtNeBRJrg79yRCVIDLUE5ETS+Xkg8gsQrKD1O2mh11g7JeO0MchuKmqStUIxEaIQNgwQXi4yECJkOxNYrHBrtFcKAzx2+3IyOJaJOtqsm+IWIvr/he61UdIxQcT/DktjeV9PzgVxprWLRjCGhzmPiV31t4mxCXuRBshCdEyqSWckAKju+UG472qXVMpLhx1pbJy4aY6JcRda+xUoG/2FZJwSKEW3zuP+wJCaxwXCwIsIUf6IUMh2WtnciFHWpCgeF/iqQPiTO1fsa3b4UtQRh6HksKkOSWgk0mgBZnXed/OhdbfUnlYxRa1EPIESVVzDabiPnXUX9Q8KnoSxN1AhlqCjdKExo+zJqwQXBKaMi0KOzClQkOGQHo3VIPhUy+FXrRCOkoD/o47wjy7N6kBQqFDpsHBxVUp+qRHnVcUXVTiPyqKHAIso2KhmH9/h4zariSaFPWawNEXalwnlVI5nRojqh7LkDIoEW1JUtQ3+QtZyo0tRX90Mj+2jQYPnQEOoGDe4BOO/x1iDx5EVWTylPTU8ggKIYUGQDnHfkJkSrvXMI5/CDkNS4OVZZWYGpJAlV+ozFuehqIFWMLhqKPAdnIToUpO2UqYkOiZZMdhI6LUWn0ybRwVe58AJnDQJYMTWJkAqLYA8hsc6zfsNG1s/MBtu/PKMscrqrV7PrbruglWZqqsf83Fz94hZAPsgZ9AdYa8mzjLIsabdarGhNoRONFgnI4NxRFDnz87NBkuA3bxcoAAUoIUikINWSRMnwHZ6pXpdeJxDqqYlJtFRYguVYnue1BZtUim63S29iAggWct55Clcy1w/XMC8LDEECs3F2BmNsLKEeCsdUWnNrXa2fF1KRpKqO9gZniiHhyrKMwWAwljiW6gSr0zCj0e2RJglO2RiVdlGX70F4KA3SObSU6EShZBxQRIKkogY6aad1ktqgKChKQyY8WRJKgxvvKZ3HC4nWCoSkNIZBluOsQ+tQ0loIhxBZ1KUPyXj131E9ropJeKH6oSZJFdaGZF1rLe12i+7KaQRBWmNNkH/Ikai1kpW2P/S7vCyZnZtDCMF8v8/8wkKQh/i5OMAQ2Ir0x2RHrRUTEz1SnQTvZxkGPM6GCLPUgiSWKu9N9JiankIqGcqZy6CF/93vfw/eMegPyIo8uJEsZCGCLlU9IKgGLN4PCwVVYe+ga1aRxMYfQrIESioclX7b1et7PKKsCLsDBpRlQV0cRoApSxYWBjhn6ffD79XAbviMCAO/UcvDVppEf+qRY23QoMGyoCHUDRosJ+qIT1Ui2MaoVpiabaVtpJI4V1KIYeKSBwoDg0zgRLTn2lKUVlTkudpb9Z4O2lfvPNYYhHdIF7yXlVSkaUqqg+NFmigSnUQ3hpjgF0lZK01D5FYnyFYb54OEYGEwwBpLUZjaL7jX64bSx96gVUxurCzYrGVhIUT0ClOSFzlSyZBwGKOYiigxcK4u9T2a5LXk+cePFNEZQghklJToJEFFEpGmSR3tHEaULWGiPZTJbrVaQ0LkfT0d7nyooOekpSgL+oMsSEesjURzmAAXIoaVh7AakqjKdaTSznofI4rj5yh8nFmIF1LWBVKq9aLNH4TBhiOUDK8IbUXeYhtIAalWdKMvuvMuSiokWgqsFDgXA72AUBIhVR1pt86iqchg1aVj9qiv+tno1RiSOBUj01W/qu34ot1dp9MO59QPJJ3KixtidFpTJ9ERBit5GRxQ8nzo6lJYEyRSdSJilSwqovQiRKDFSLGZymdbRFIrpCRJU7q9bh3RFnjyPGNubi4QVRuIeF0SvCzROpB/GatqVv0n9AU3EpUeib7XzejD1ZICGY8jikSoHFa8D1aGeOL94FBSIXUgycEzvKyj92UleYkzH1W5d6WGMwtSCrQa3mvVjEqDBg2WBw2hbtBgGbFy1RQeH1++BgDnDXlucT5BpwqNwnqLw0ff2eC7W7kKCO3HyikvhRBNUwgdvIV9jPJJIZGESKuzDuFD1FuIIAHotTukWjHRTemkilSrWnoAgUAJKYOln1QY68gX+hjrGGQFpXF1cpZDkJeG2fl5tNbMz80xWFhAa0W310UrRVGWJFkLYSTaWawAryQLWUZWlsF9QobzH2QZuZAMsgy/BQ25c46yKDGloJ222GlFOOY0SUMClhAI7/CW6G9syIuCLC8ojKUwQSIgvWW+P8ALFbS7JhCU+f4g6IuFiGJviUpSer3JughHWdrI34L+2lqHNUGmo4XE+VDaO0z7h4ini3IT70K1w0reEOzcQgKeEDJG0U2ctrdRpytjWfthwRKtdZS2BJLsjQERCqVoIUgFtFQga6UUWDxWQCoEXoSS16UpqR2rFXhr8NbircVZgzUlztra6i1UlGwHe7xI/hCBkBN18j7a6RVFAWIoH1FK1uXE43gK72wgubGCYqIVaRIGAdaUeBsitmUcZIXS5XE2IXiBAIEwE5NAdaJD4RznKMtYqr0IxW6CWwooRPR8D8fTbrcQUlLkGaUJ7V5pjYfyDIlWGquCRMdZjxdRUy8qBxJfE+tKxBGi4kPXGRiOuyuViI8RbRWtNLUaRsAFYrhNGc/VB/9uG11EqkFOEir9IKO1YLWutQ4jLIUshrrxhks3aLCsaAh1gwbLiDW77wQEctjv9zHGMDffZzDIadkWaUvj0VhvsSLEtpRUoSCFTtBpik+JFm2b349SQfurcBgXvHOrMJkgEGpbWCQO6R0IT0slTPcmaacJ0xMtOm0dpsFNcEjwXqB0Goi5SoLrSJaxYW6eojTM9fsUUdZgfShC0S8K7tqwESUlC3MzZP15ut0uUyun6HY7lN7RMgWyTDASfKJw1rJhYR7vHN1Ol4luN8hIBhmuNMwv9LHObvbcnbXkWU4rh16vR6fbpSqoUiWK2ah5nZ3NKa2LUc5YZrswZKVFGIefnWM+KyjLkoWFPsbakFBaJawJFRw+0g7TK0Mi4caNs/QHsyFgq3ydwGfKMCixXhDqgQQLwMrCsJISuFjbQyJJkjQkNCpNIkNRjsFggDEm2qkFCYOUYeoeKjImaKUtJno9tJLIIscXOShJogWJULSVoKtDPzISrAyh2bYMx+KcY1BEvbgDlMOXZUz0dFhRUMbIvo/FXBKlmej2UEpFTXwYRLhYmsTGGRmHZzBw5EUW/ZHTkDRXOX94T3AOtHhnsKYIhLrdY2KiB94zGPRDqW0bBlDOOQprsVE9X5tB1rM1IlRc7HbqQWIWi7dksWy7rCLYYmiLl7ZadHtdAPJ8EDTTNpSIVyhkyOrDCkeRlFEPTp2kGfZdOblUhNrX96+1Fh9dX6oBVFV0pmp7Hwmx0jpYPWqFTqJziI/l5mWUeklFWRpMjEo7G+QiUip0q5KhDAXuYcahsj2sKnWq2pmkQYMGy4OGUDdosIyobMKsNeRK4pwczugCHjd88Y5Ma1fV0mr3hK1AlQQWLN8qZwNi0mI1Eb1J0tjIelJIrHfRSzc4j7gYAbTeI1yQPORFGSr1lbauBOliRM3aUCJbSklRlpSlCWS4JixB6+0glF8X4BgSXle5HHgf/YJjgtUWGiEYOIRIb1U4w/kgUwgRQV9HI611tSODiQmGNhIMREgERQQ3jLwoMNaSJIJEKvDR39iFBMZAsl0kT/EQXZhlqHyiIf5dDuUZgpAAF4K81ZT+UKITZihiRNx7rLNhmh9wI2bcSyaQVddbDP2bg748iiCiK4nEh+RDAYlSeA9aGhTRITp0imDYF/vPsL+I8X4jK2LoEZ4RIln15+Gfw0S9ke+cG1tnU9lBVRxm9HxDGfRh4RRfVe5hmO5XJTWqWLRnzGe7+kTJSmj/eB1iXwnNP5RBVNur/b+pEvwk4Iee2iP38pL9drRt6j+JCZtV41NHoxGbudYM+z6btNnYMVfnGEl1vYs4SyIQ4fo2co8GDZYVDaFu0GAZsXLVVCA4ErKsj0AxOdGl3U4RKuhRPUHDG8iFJzcmEDNjSVGgoLRu03fmGEL00oIDrWKEbkTIKawB51DCk0qFkuCsYX5+njLRSGGxJsWUBdlgoS6hXBYmlD0uSnSaMjPf5451G8ljlC8rDEhBosP5LBQGNdtHSMj7A4o8Q7RSrJB4lZB0e0wITVHkrJ+bZ2N/ISTM6aA/tVKRmWHSnXNgtsynY0RU4AhGfF5KcAJkmJ43Jmchy0LUT6ckOsUVJf2FAUVRUhhDXpQgBAaJtp6iLFnIDc5aSi9JKhZSlngBaZrS7fVAqWCHmKQ4F3yDfVW8IxI754JOWgqJTAJJNc7FxLOqUI5HOBGJnI8FgCzeR8JfJ6nFk640y56wHTx5ljHjDFpJduq2mJzooQW0lQy6cmsp+wuhvfIMaUraSrHrqpUgJOtmZhF4rAeZthBJQn+QUWQZhXchmtzpBFu7rMBQVkplpPAIGZ1anMXkNlQBjOHW2h5wxIfaWsPC/AI2youKPMeZ2E+liMlysXJoHQH2sZ3DwM9WVUcRgdCLIYkcLWCDE7EapKulG8PiNEF3nEVN/MaNChWTEa0N163SlAPkg4xBMQh6bwEq2iNCvEY+RIGHA9wwMKqi+rXmnCHxBYmUOjZmqIwYfnMx/8EG8isqHXuYKcj6AxCiloS4mHew6eCkKjgz9EIXccAwLOzSoEGD5UVDqBs0WEZMTvYAyIssOCfgkbpF26c4D8a56MnrYuTLYcsy6p0hVyloUSe4bQ5Bpxp1mVJSWciJGBEMeWseBaHSnBQ4axn0+5hEk+igdy3yvCY5lSWZVIq2A92yzMwvsH5mlrw0FDYUzVBK0RYaLRVZaaA/QAgo8gxTFKSliYRao1uKbpIisxQjYC4bBFeRThulNFZI8ugbbKO22Hq/RUJNPFsXtauhMomvCZD1niyWlG4nbdK0BVHyMah11CZIMoRBexF01mUoyJLUZTjCthyerhe0e9HSLnqMV1pj60YHP7EaoHcgwXkFIlbMM4Z61kCAczFC6cO1wtlaJ1xFxitCXSU3ImJSovcUpcHl/UiodwrOJgISZ5E+bM9kQXvsyxLpDDrRTE5NopIU7zz9hT7We2S7jUxShPPMSIkTgpZSdNIUYyyJlORUEevQ17QKum5jBSKL5zhiHJnohHa7jXOWLAsJiAM7IMsGQIyiR/JZVb3ED60EKxcK5ysyHasI1hFdGWcMRiPowUvbV43M0CqukoE458ASEmCtCSXKRdAtt9ttkkSjZCCtAiiyvJbgIEL+QpUoigujHl8VeBm1aHSLo+/hFIdVJMej4A5jgjrcxih0GJiEqLiPjifeezqdDq2WDlZ6LJ4lcNHTu3IXCdUewz6q3xs0aLC8aAh1gwbLiIWFPuDJszyWU3bhBVy9NIVE+uDFLCMphMrFAYx10bP57gh18KmVXsQXvBwSau/xiQx2aEIQrHKDfKGIOl9jLWVMnMxLgzFBG4oMEV8nBBYwHkrngw7ZgY3SBV+USOMorcNFBwVbOqz15KVjvp+hkkFI1hKCwjocIdlRSIUTEitkiD764GgikbGk8pa1nc57jAufwgSi7LynjL68TirSTjckrklJYS25tZFI2zioCduSPlT680Kg0xbK+Xi9VE16ghuJpigMQoYkQaV1kLSoEFm0seiHH5HdVNfJR0lGXUwjjHridYtfxX3V5aIjka9kJKomhSE+6xmSMlUlo8ZS3akK1925kFjovUNLAT4MrJQQaCloJZpep41xjsJ7bJHjrSFREhJNohWJDIMVrWTwtRZBw25GroextpbwUOmDZeVq08KYkpzo6BHdRojXRkVrtyoBT0oZySl11T+Z5eSFwZsogfFVqH6IUReV2snFV6W3hxjXMIePs44iL7BKBW2xCAmchS+AMHsxeo0QYKtCNSNSi+q6UUmSlpCzVCXCfd1exEqnrh5M4UP1ytFzCsmOlSVe2I6Jz5fqu7D9MOioNPtVwZlq5FZ7XzcR6gYNlh0NoW7QYBlxyx9uBTxZnjHIQuS2o9ukaYL3Hh21tqY05JW4Or5zrXUheUqGQiqbh8d5g7U5AkWatFFa1cU9hAcsYBUCj4qRbGMN8/1+cFJoJSAV2aBgw1wfU5a02m3a7TYohZEahyJ30C8tWWlxQuEJjhjZwgLGWtqtFr1uGQcIFoHDqZzf3b6e3lxGq92i0+uGctxCo1q94G+tEpxQlCYnH2QoIZlsd4I0JplnS2WRrfNkxqJKi89yihh9LH0gu2m7w/T0KjywfmYuJoVmzOY5WZ7HhLY4BW4dVji01kx0J5BSYY0Nkg0lafe6JGlKluXMzM4FOzkdS2HLUEBGa01/YcDs7CzGWExZ1gmKLiZ7aq1J0iQSn0BupAgDLUSIQCutIUYcbdQZ20iilAh69EDQBM5Gz2cpSZUiSRSJUqRKMd1pkSqNKTLyQfAq1oCNTiEdJVASVvbaaLETeVly69q7mJudw3qYaCX4VoJOWyRakwhBP0nxrTDwKPI8EGetUVqFwjdliTUuJNPp4FjS606wYnqaLBuwMD8fytobgzEFAFpplFK0Wi0mJzokOqEoC4q8QCrF9Ipput0ec3PzFMaS50UY1FlfE2dg6MYhBLauJuhwJshxvHO1diaJA6FQKTEWQclLikGOUhJvHL4b7PEW+n2sM6ENkkD4NRopJDkFbpDHqpBqaDsZC/1UM0iEnlYnklYfay2+KPAE2ZCxlmpELAiWfDoeZ8gFKMfkLdYZ8qwi7D4mGEa3HhHatpUkYZtRQhSSjauy9QzJdoMGDZYFDaFu0GAZsbCwAICJ1luVdlGrEKFGBEKtoqXV0JKriq6Fcs9VNGophCB0lI6IUB5bazlCqIOIO0hSPcISE5KivzWBsFdR6iJKPXTL46N3souJYRYoXYhSI8ELgfGQRTsyh0DIYFOmNCjlUc4yl2cYCV0Joh0K0FgJJME1w8bobIEjcwYlJF0p8FpB5VO9GTgBRnhKHMpbsKG8dhm1xVoLdK8dtMML8+TekHtLSfiE8F81Fe5BuNCG7VBYxRcmEBul0O2UtN2mcIbclhhj6CSKNFHoJKHd65CmKQ7PQt7Hy+B0IUwVsQxXLDg4qBFCPUzyY0QDXP07LOWHBW4Eocy5H01GDde+qkhYaYiTJKGlNcJZrMqDWj/KgrSsCuBASytcuxUkEd5hixykItGtoOtVCh0jxloptFLYSjdOpWWP5cZxOBHcZoSWSC3RLU3STih9CcrjhMNiMS4MNoSK5yk9KtXoRGO8wRWB/CXtlPZEh9yWqFQjncFbjxNEV5LoeR5PSEiBlx7ro2REOLwMRxr+BJnI+jpUYzZbOkpTIL2kdCXGawpbMCgGGGvoyHbt31xVsBQ27CtYGnqkCt7v3vjad9uPXLsqcbRKpBwdEBhjYyIvdWTaM7TOrLYHw9mmKkJd9ZOgsY79xYf2GJZDH64/7GdNlLpBg+VGQ6gbNFhGWFNND0MrTVBK0mm36LbTQOLitL9WCUIqjLHMzw8oiiIUXlEprh0kBZuDINhqJammrVtMr5ii3Wlh8pwiG4CHpNWKZMhh8yJWiTO4MliaGe8oncMCIlp1OSEpXXT5LQ1YT2EdRF/qYCEXPHBV0iKJ0o1+UULLkz2ooLi/IUk1t08OSJKEtJXSarfw3jM7O0u/3691rkIIyqKkzAukEHRbs6RJwto95sg7ZrPnP79Hzm+P20g6H6K+VVvZ6KDRam2k012PxzM7t8BCf0BZlszP9+OAoiKxIGWBlBKtB8y0BkgpA8ExFiElrfY8OtHkec78/DzWOhbSLOhslaKVzqC1Is9yFhb6+MzT/WFC95etIYmO8oKht/gIoa49KqK8QxCKzdAKUcyyjITIYaq+JWPynRQoPSyekhcFkpCs6lAgQ2Tcx9+ds+AcpizwzgaP5qLEW8v0xARJkgZf8X6GcR5hDa4swDq08CRKIkVoY0cYOLjCYlc4socXmN0tUhnyxKCkxE56ZnvzFGXBzMb5ULrdWmzUCRcKpLTkiafshaIjZVlSFOGaZFOednuGwSBjw8a54EUdfaRdLFzknMNIh1E2uKnU5c6JCZLUDjAgKJULZdbjBRCE5EdrwuB3pjPPoJVjjCXLc5yzmMSTp9GXWkgEktKU5IM85DFUJHuDIPlPgfxDuJ61vIKhg4eQlaNLeEiEIiwK6aPGeUSDXmmtdaw8CaEiZkWoK4R+5bE2zIgEyYnF2lHCHAZVVd+rEh0bNGiwfGgIdYMGy4iyLIBQdrnVaqG1otdt0+u0UEqTtttIoWilfXSSUpQGgWBhQcZp2hTb8bXn8JIQAq0VaTul2+6w8+qVTEz0mJ+dYeO6QJ4nuh3arRbWWPL+AGsMRZaRWxO00dHT1+ARaYJ0CqcUuXPgomZTCHJj8Co4iDgk3ktQEt2SSOcpyoL5QUaZWO48ZI4NT+rH6JiMhzosSz2MtNUnQnCAiC/5GKl32lGmm5e8zOybM7/HXQg/rgettjy2Tx8SxoI5hluU7FjXr6sjdjGc6IfbQlATtEoPPa5FFfUMgJ6V7HnpzkzcOoUUkqSVIiJJN6ZcpKkVleaWuH0gSVN0koQCIzVBdpQmD9tMEpRUQQ+tArE2zpHlOYKgJU+8Q8jg8OCdw1Zlvp3H5DlWiuB4khcgBDtPT6PTFjPz85S33h7Lj5fRgpDgHpKooKXHx6TIMujvpxz90wrKR1cSjNCg6+VMnbxXyR/Gz99GcpmzXvRjM1Y+b3CHmKm1/9X6I5cmbm888jvcf214Uy87vNCbdAJf/UfQF0WQAlEdi0eIAkR/8WqudsIOA6EbJRN/aNH6nY4R8PE1qhkEUVdX9LGvqjrZ1FoT3T2Cq8eoh/foWbpKgw0IUZ2bpywDLbfWgHcMI9ICH31xwsyGHGr6GzRosCxoCHWDBsuIKuqjlCJNdKgMp8N0eahoFyvj6VAWu1pWxqp5Uim88otexptCVNFJJeuoXPiIkIyYKJJYdtvoUJhCqhgtlSJ6QYepe6V18KWNml7vRR0FrCq/VQTD1UlPEqnAa0HRtZRThmKFpZi0YQqeLWnAdwACXOJxyZZ9QLYey7WdCOkxO1nKXSzaQGoEykmcdIv35ce/GhqFDMl6qPwYXUNq9jZcSVSRzugMYWPCpfOhjuBQQjLSn4YXtHaS0EqSJgmJCu4tWkosofogLjpljAxUwOMnPDZ1uDUOt8rhV/qR8xiNtW4elZ+LW6K/2K3awnB/4//e8tKbP5olXDk2vVCb2aJd6XG7eOwah8wFqi8Ro6dQX4eQVgqhOFKVYinqxRbf+9UyfsQBp15OEIhyHGA554fXakR3LWt50WjUvEGDBsuFhlA3aLCM6HXbCAETExOsmJ4KVlypItVVVMqAg3YqEdM98rxkfmGBLAetJUk7QbWDpCO8gBe/yIWAtJXQmejQ0ikOQ2EyvLSknaD1nJjuMdmboCwKhAiV5oKONUYXnaHMLGmaMrlyBUqpWD47FEIpB4NQstkYSlNGrXVw1ZBS0Wp3UYlm5oF97jx8nnxFSfbAMoi4/xfDtTzrjpqjv3dO79YOe351NemtHYyz2GgHR52kxliUfdSlwloLErq9NhCkRNaa2o7N2BIlKhmOoHSegTEIFWwItQPpQEZXjKq6YNABi3pQ1/YpSElLhYh3J9Gs6HZpqwSDxCAwzsMgJzMG50u8LbHakR9T0D+mxO3ksfsu88DkvyHcakf/zIL8sZLW9zUTV6aojVVVx9HyOFBXevTEgk6BzNdL1SL1IG2h8s+O3txpGuRUIecwfJckmkSH0uU+jKqGCZuV7EhVriphoN8w6gYNlg8NoW7QYBnRbiWB0HY7rJieDFFp4VHRi7goiuBEoVOSVhrsyJJQ8EVpiU40Lgkax82/6wQq0bTaKVpqvLcYWwAOnSqUlHS6bXqTXfJMkWcZwerLYWI1xLIscaVFtxK6E13StEWRl+R5iSgNvj/AWBekCvFFXpSGvLBondDuBm2n3dsz8/gB+aryj9fIf8LwiWfugAFzBwxY8XPD7j9chbw1DGJcJEPjiYdDFXUF6yzGWbRStFopUgqKAsoy9CFbhKIfzrvowy2ihaBFa0fpPSaSaVXZMkbduB+RACipgh95jFBrAalS9FpttFCUCP5/9v7lR5IsS/PEfufce0VE1czcPSIyq6uqH9U9jwY5PQPMbAhwCMyCBAhywx3/Mv4JXJIrEgR35I7gAAQ4wGBI9jTZ7FdNVWZlRoS7mamKyH0cLs4VUfOscPPILqupHrZ8CUvzsIc+RERNv3vu98gm5NZYikfjrdIzjqWQ/8PC8r8sMP4NHOh/A2HvYP3PKlhFkyD/J0F+9Cocl4Vs52KD7ER6n4LLCxlSn0ZvmfSl1r3EJcbQteBOw625nCTG6CS7Vq9P7xrsz6fe4vr78G/56vfAgTfGQagPHHhDuOnISdGyeBRXU4h6MxkpkFtlLYtHgfWGuVY9D7oWdjnGF+9HBAku8aDLONhkIiKEGBnGYW+bq83fXNMw9Hpxoxb/2VIKIm60KqVQaiGX4qS7t63dJCXNk0tskyFssRN/7Yf2vxv47DgYVguU/tHPhXXRrR/XsG/Lh+DSnBTTTnJDl/GMw8CQvBkvBy8C2r6/EfTWp8nXJSMISYRxM8GFiMYtZaY/Nvr1ulWf43rnbUJet8l281SaISXW2rzqPYKGcpz7l/idc99aQ22bRvfdCPUdA/+JLjIx2wtxthQP1eDFULLJyDzJY+jeiphuRsUtTUSD7zoIUPCUkZvsgz3PWsRj+46UjwMH3hYHoT5w4A2hwd8E11L48dNHggpTDKTgk6JxHNEQuDzPfHqaWdbMOl+oZcXMlaRFjFzW33VV7RDBY8mGSJCIRvXauQqmAkGYThMP7945QbLGmrNnLU93NGvMV2XNCxqE63JlyQslN0r2SfQ8X7leZ3Lz+K4gQnK/IiF4JY312u23liH//w2awbpic8DWFdYV+jmu5tdKGka0G8SmwUe9IQZarZ0guV5+HM+M44C1xjIvlFyxVrFSfZJpkDGsNH776YlPIXA/jny4O/vkMk2kNNJaJa9Xv30NPYXEYwQx9pKTZVkoCNkUE2GIiTSMmCqXXNAx8xQLwnKc/p+AZ0cXKD2fGtx34KuYnUwDlOZGRO1RhbqV4oyDewaap5mkGEinySUbQyClW125iEs+psnLcNZVyJ0v79kyL9onzYycj12lAwfeEgehPnDgLdEn1C6rMKpCoCGmL2K0ZJddlD4F3jSS1gq1vsgf/gJeVhdvLiNvJez30A2OKvrZG2noEV0hBkLzVrgtfaPW5i1ztXoedttSLaQb3PqUemtl3GdvX6BU2y528/nnF9YH/O6gzATPDf6pAdp2m7+X59EnfF+6/y/9xu0fn4syXoZKNDXsSzvnvYVx/zBfkVhPBJEXGnmP8PMbihZo4nXYvaiRFCPTOPp5bBC0UHPxfPB+/pp5IcySM7VUUgiU5o819Bu6/Rw9jtsn1PQ0jq2Bs9VKpbd7qqJJoDcJhhAI2nitfMe1CvBTvsLbsb0d1Z+q6P4aPgv3+Klf/8m0j595w1/7HcXNt18c8v7lpsRtGi0vjKV7ZXgzTLbUD9nJtf9M3ZNltuO/v/b53HR420nSnlveNfvbY+iP56geP3Dg7XEQ6gMH3hTROV8nuM2MeW2sFFIxTCIalLU2JCgSA3GIDHVwUqMKofF6yIdLOtI0Ekwp0Mlwo/Qs2r/47Q8sc2a+XrlcZpd1wB6blaIyJG+nO5/uUFUul4Xr88wiyhADqwpmQnClANMYPNItBO5OJ1KKfH9+epGv/JfxzT+/5xf/+D1hVW//25oiu0EvxcQwJFcSdw79+IcX/vwf/cB6/9NZ1Hf/YuDb//uZ8OyEb6MGzaXKPWbNiUNQn8C21sjr6hKW7Yasx+qZs86NoEVxKUUQ4RS9sW4IgXNKXkATI6cYeXy38F/9o7/gN7+8/PSVoMq7YeC7ceQRoLoe/WldsVx8OVIbJkorlbKuu3EsakAUQi/oCAaW3ZwWDHYtbvXnWtZM7ed4xsnVkiu1+jFI6u2IivVGS0gNrJpPNwWC0otbujHVGtnAttxw8xKStrUPvsZUFxj+80j6L0Mn1Q3puxupE8Lz+cQwjizLwo8fP5Jz3heC/tRu1eub0ly1E8c9PrBPgG/Jcbc4uk4q13VlXrw98SURfZmWIepa5xB6e+V+3xvh3a4yv07zP6jM/8NMe//Tx0BFSSESor5g/kLj8zhJwxC7VcnHGAgxMk0j57szZsb12ljXz1eQW1bIthATPD/Qa9c9fs9lHfRrqRc/bZrtLenlwIEDb4aDUB848IYwif1znxibkfNMKyspNxo+ecqtgQra4/Na37ZvBhK2iKsv3IlASIk0nZACpa79TbTroq3xq1//lr/ge69CXhbPYK4NK5kQAvcPd0zTwDROvH/3nhAiH398RCsEEYbo0WmYUA0agoaIhECKkff3Z4Yh8qvzx54f/RMP0+Dbf/rAf+//8HdJj5Fcaif9xXOOW+PudObh7s5JUgM1+NP/5Df88CdPXyTU9/905O/9b75l/HWkWOvEC0pXn2xmShBS9AzfnAuX5ydfWOzky7flb3m+/jymEBlDZAiBb85nzilxPwz84nTHGAO/mE58O53407/ziV//weXLhFqED8PAL8bJq79LZa2VeV659vxxGxpIo+VC1sXJbxg66RRCdNIUAMt1J9SK0kycUNfGMq/M87JH4WHwPGfmtfUSGFcFDTHwcEqkEKgCJoaqIbXLDyqU0silsjZjbQb6klAXrNZ90v4lyCyM/+fI+X89QAXpOdJTipyGgRQj3/3iO969f+Djp0/8f//5zOVSCSkS04ABS/XKbEHQTh6jKqlLZO5OZ4Y47AmA2BYr19Mthoiq8vj8xA8/OtGMySMsN1JpuPRGNSIqxKG3ZVovwjGPItxaDbXvtlz+Jyvrf1C+TKhVSCkSU5fTiEdRlr4AUlEk+O5Rkd4cKXhFfUpMp4n7h3tareS8sK7LXz7G/f+D6h6/91n7Yi2+2I2+iAdfUG1JMl/bBTtw4MDvh4NQHzjwhthIhpnsxRBOdhtBX2wDvxipqfpE1AB6huzXSsxuNdW2Szqs3W5/Iz20hv5umUiXAKToleHO3f0xWZcPaN9ebs2Q5uRYukFKdUsJ8H9/kfgbaBHSHBjmgDahNiMUpS5OcAZNDNHzsqU0pBlh0Z+UCmzQ+uI2Tak4oZZeQkKFtvpz1uRZziEL+qxocbnKxsKsKt2lx9Zgp73KPQQl4XniU02cw8BUI3ck7ixyWgKhfvlEqQhJlEGVhKBmqBkBJ9tBhMBWF9+wUrFgWAl9MUZP54D2IhnkJntp0BrU1pswe3lKfz6lVJY1exNk8Am1YYzFtQqyPQaDKj6p3qbC20fdNLfN0Na6VEURbX8pneR3IYsfcykG5pNdHfxchKTEix/nePF/h4sQUiCkgAGhGNZ8Nr0t2jbzrQRBq6CpJ2X0Y9L6eRX170mAcFHSNdBMSDV6e6Tdctj3bGYVwqikIdCaUGuXYjSDpl2+1F8Ls7x6jb6UYOyTcPidUbrtX9/lGi9e+5sUa8uXDl1O5jsqfdKNv1ZNdL9Pg71RcbtPs7ZLf7a/US8lRwcOHPir4yDUBw68IUo3+qiKkyBrfTs+s7W+KV1qUAvSjCEqQQc3MrVKHCAGfW1AjYoQe0FLyZ4OYqXuk+gyz5Q1E1U5pUjspCoFJcXA3TRyfz77Y14WshnXyzOXyzOlVFIM3J9PzKWS50y1G9H3GmoYOkl7DU7eGynAOE5ICORcUPXt6fNpYppGxIxcFloptPq6QDoE4TQqpynSNGCq1GbMuVCqsayZnKsT0mY08QbCTZPaNvLZt8u1a4utGYKTjqiBpIFRfVp9Hka+vbvnFCMPIpysMVpDXyEkQYT7EPiQIsvFSPOM1ca9KkM/FiqKmHnF+LJSVcjL7O2UAj0EpBMkJ/0pJCdqa4brgtSGzSttzXSLGiBc2sqSe7pLjC7zicEXMr146JSixywOwhCNeS0stbE2Y8mFaymgStCAmlEx4pBgDIR4fTXhQwWCOqmV5hFvKShDCsQoYJVSFmiVcYi0NhLTQBxG37FZ8HSUnVBLz2X2xWLNhdo9Atb1Pi558Np4WkGDkgTe3z+AwDAOpCFSa+W6zJRaKaWy5oxaYIhnTtOJUgrz4hPyoO418IWMT61fO+/+3HtRTlS/j95AStt09Lon5KQQfGERA7En95S88vz06JnzMTA83NNqo5aMFYPe96OdbO+yq86RpUVfpBnUnCmrMQwDp2nq2up/Pd36gQMHvoyDUB848IbYXfTNJR+YUbrRr7V6y5zddJlm+5uomVGKQXAz2pfR9aRdR9tqpebS37Cty0wKeVkgBiSF21RZPX94iJExpT0bu9ZGXhbysvgUWZVhcLWtasFcoeIaXPF4r9ANc1/kVJ0EatfnpsG382MIPZ6vOulIEapRmH1B8BV9rqprwFPy7WxCpDZzI1+plK4d3bb/b5M+dQ3pFvVnfeKJIK2xFZNr30bfPpIGJ9Xj5PrpWhhqIWGv9tgoMAXhrMpohpZCqJUpJFL0hcB28EoplOJb/61ESvCz6zFqth/joEoYRkQD5Aq5+IS6VFrxiWtTlzSU2mir3+Y4JGIMlBSJQSmxUZtLQ6IqqhVQcq29cdHIrbGWCmrEWgkasK7fJ1nXOv/0lFPYjLPdlKp+1fp16HXpns1dgOY69RRd8jEkWjNiKfuE/EVWBa26HtsXRj3lZDN71kKtxSfUClhAg3KaRlSVYRpIQyKXQjVDSt414b7o8oQNMHRVGlv0XOhV421P53gNvuBVYghdt79pUlr/5LsJIoJG123HLvNREVqtLEv1xc40klKk5Mw1r1ir0BRPGZf+9+PzK7EFxVqg1krZZE0p+jE+KscPHPhrwUGoDxx4Qwx6e+PfPiQGTJ1EKYbQOI0DD3cnmhnXee6ZzxVFIPpk78voxGFdoMKUEkMIlHWllIVmjShgKqQYOE0jY0pEFVLwaWWMgSDs5B5rDClydz7RDHKDaoLJTFxWzCoh+DQs9gr10LeoX8ONWERO48A4nZiXlXlZ/Nhg1Jx3R6HS47RfudkYlNNp4O40UsUrslUaQ/Rt75IrMejeQNfsZqR7mbxgn/8f20JlS2CR1liXhbkZS4ysy0xoicnaZ1PRLz93SAiDCCdV7mMki7KK8LuBZZISMgydhPpOgGyyGvHzmJJrgsc0EkPgOq98erqQS/XdA4RqxtKManQpjBsum7mcozTXR/vjU2LzRUeuDdVG6Y8lmPnkvFQ3uzUvptlWSNux/RIMJ421VKS6Gc41vpCzYBZY1wUNkPPaZQy257G3LmPyBaoAnYjW1mVR/fGHQOiZzQLM85VlcX2SxzebF+RMYzc86ovH6I8/xsj5fN5TbLb73RZi9EegeEqOEFhjffXa9/OUSKlX64gbh1vxPYT9vOMLmpDCToo38+S2e6Lq0pyKYa1r2C2gYgQ1X1zG6Oe4Z50HgdYzr7W/zv2Y+XR9y6d+9YV24MCB3wsHoT5w4A1xF7uswLxZTsQIaUB1cIIkXvbw4d17fvGL76i18pvf/AVPT4/UKuTSiElJrwyRzIy6LCzPzwySeH93JsbI8+MTj/NMpUEAjcLdmPju3T2ncXS9bJ8Q+la/pzzQKtIa52nklE40pBNqCJ8+8fHyDFaJUYgp+BZ0DL5VrfqXYu9eInRicR4Hvnl44O7hgefnC8u8MAO0yjoXxAxp9etTb3za+u2HOx7axHWtzLlSm1cql76tnpdI0cayli7/MEq5EerPPgAxJ65bksV1zRRVHnOlhMjQGo/TSBsSUwjUEPbmwy9BEU4iPIiypMQ8TeRauZbqplR60oLA+XTi/v7eVQ3NDWMhKEMn0ff3dzzc33ledXLj3MfHZ/78N9+zrJm/GJ75IV1ZSuWH68xSKqs1ijmZKpvOvoCumVi8uAVNxGCglWxCMYjTCdKAIrRcXX7RKpa9dj6kHqe3Lxp/8iKllEJeQSqETuiyKXPNPcu8UutCLoXWMlCxJpRMJ4dlj27cNi2kmevsRQkhMqSB02niw7sHVIUffvieTx/bvjthNKYh8v7dA6rKXDK5S4qs+TEZx4lpmrzwpBk5127q8w+VLWFEOY8jQ4iUCVSfvnjuUwzcn06M58i8Lqw5UErFinlyCnQ9Or5bNA6YeMGLteZSla6bji8SWqystFpQU6JEUhDupsQ4juScWZbqCTfBr+mKULtHIkrrra3tFqt34MCBN8NBqA8ceEOkbkJqre0ToBgUDbKb/wSfKp2mkVoLQwqkXpbS2k1K8Rpaa7RSsODxbjEEou59d6517m/KKUaGGF160Seg0qd3m0HSzDxiLiTMBGme7pFico1mvUlG/Pe3ILPXx8m74ao/xjEm1hj36bZPIgvSIJjtWuHX4I1xvn1dmke9iRixGYjtUo3Wp6L788Re/Nth/ftbMJvL3ruRtCcwFIOytUh2bby9MHd98XHiEXzeWBg8gq8XqKiZZ5Z3/cw5Ru4HL/KozeVBIQSGwbfo300T785e0jIOA1EDlitP40hEeR4y19X1xlGVLPUzOcqWP+1E1XckatuMhz65llqpxp6lLuqlLhv5a/12pJsAf44C15p5qopsv2CbO49mbY95u11F247J7Vy9+E+2KBxjM8n6lHoYhi4FcqNtM38t0bX/MfoEWGt5sUvhzyAEZRgGAOqSncjX23T6pXnQ6717As4r1/12vfvrMtC0YtoIKtR+3W9wg29wOcmeOHN73ewf/W8Htmn9/fXoO0CKVfFyn30a7VXzQQXT2234JSevxl0eOHDg98dBqA8ceEPcn/yNubVAbe4oC1HRqLRWKTXjcQSVlr0N8TQkuD+zritCpYX2+pudQSuFssyoVq5BKUukLDNJGikqIU0ExLWzCtgWWec628vVdsJvnc6E4PpaVPZSmOk08XD/wJiza6LVM4Brqax2y5P+4kNtjbp6CYmY1ycL/vhr9uzk2iPkwl4c8zqjTjFwd5q4vzsxTi4lXkvlx6erT6RTICY39cmkpDj41Hmeqa3uRMPTUNq+RT4E9Xg2M/qQn1a8hn1Jkfl6QevAYo0sUFr9jBj9LmIIfLi/4xcfPnA6nXi4v6PUymVZWHrmssSI9EzlNLjZMKa05xdLT2uYppFTCJ5V3Ay1ykOK/NH79yyleu14NZKuPF5n+ry3a3dv1K818/sW10KPzag0lssFmnUNcYLohs+G0HCRgnVJScuZtt4i2n4K2+T1fBrQClGd4L1/uOcX37x3411ZqS1TaiUEzyn3+1NKbcyr68NVPf8chLKslLx2wutPzDBq88VEiMrpNFJbI+eyT/rBFwO5FG+BrB6r6BXfiZTcFLzMjzw+Pe2EdlNGbKR2TJHzNPCY4qvV3SrCoMoYFNNePa7KafDIwrUUlm5UTlGZUsAkYLj+PaZN4iOchkhKAbVEmUZaDXx4uOPDN+9fLLoEE4PqUqUkQhoCmHIePNVkSJFx9AXa+XxmmqZXX2cHDhz4/XAQ6gMH3hAPU590WaV1Qq3JM2dLyVzn0qPoPBMaYBoiKZy4BqHkmdJLRb78dm20kinrjFCYrZFDQKyS1Cdy53Fk6sUXO6Euhbyu3qa3ruRaiDExTXdegy2GdINUiAnRwDSdeHh48FbHbnASbjm3rxJq8yrrmjMtJzCcNCO04kbKkgsl505Whm7Ce33qHUPgfBq5XydMEiaBecnk4pPOdfVEC58SKjaoP991ocmmyPWJdMOJmYqQQvDj3gm1tEbrEoE1Rq6XK1oKiwo5Bko3mX7xccbI+/t7fvH+He9b45etUVvj+XJhXhY3osWEqJPJ2lrPCL9nnKa+ACsY5jsDm/63G9tCjJw+vKdUT+eYl+yLqOCF4AWfhLd+LjCfjJbmBTEpDRQzqMZ8vbKuK9M48v7D6BNT1Z1QWw+5aM13FFr2Zs0vP33fRThPI9og9QnpL7/7lr//9/42KsIPP/6Wp6dPlFrREPwYGJQmXRfuJtWgkTENiCrXXFg2fXO/c+vyEMwntdM0dLkV/bZvhLrkzDzP+8MOIRBDZEgjpRSWeeHTjx9JKXK+O/vuUn8tBhWGIXEaB4YhvrqLFEQYVZlUaeKyi6ACQ3Iz5GLkmhExhqBMQ7xt9ogn2YToC8xp6IZNS9g00Grgm4d7fvHtB0To0qPm0YetQKlewJR8UZxi7IU2PXUnBL59uOPh3cOhoD5w4A1xEOoDB94QoW+RW99e9yQDNyJ5UYQ7/lurHrHX3xA301zPnPh5d2YucdjiyRQv4HByqLuhTfoWO7IlL/QWOQtY1x0rXi5SbAEUkxUQ5nXtJRBd7ivqU+ftTbx+vSJ9q7Zu/fc84cPJ+GY6e1m3vEtSvnyjqHiUm6liEnpKxS05RUVosrXC+TEPGoihZ1Xv+uUXecz0ApFNzCJCFEX7ImXLs/CzKa9Q6e303FIn3MDYei54c02xWTf/+WMW86xnqRVKQcx/1qDLHPr1tFXFoxS8JMhq9d/HCF32EbZWyC9IKGpr5J4sUtutWKi21s/X53IL+z3Yl4iTz7vzyXOoW3Ud79aUKD23o5sG392PmAjzWrguGWGL+uulJF2iJOIeAFG/nnKtxJLJOVP7wuTlYkxEsGbUUnYtUQiBagbV9calVNZ12XXTmySktUrtjsIthad1XXWr7avnf9v72aRWm/nXmmunY29l9B0Z21NQZJdktW0Vg7WKmE/9rUs89LbJhHGL0pTgC8mhy1xuhLo/ntBzyb/iVThw4MDvh4NQHzjwhhh9HMy8NNY806xRlsYtlM3fBdf5yuMnf0ezTqhKyVBt32Z+Db4xXokSmEZvW0zq00kVlyuETkKw2iPBBJ1G3ypPI7F6q+DzWmitkMtKLj4x/PT4xLIsDOPI3cM9IcRe0RyozXh+XlnzyvN13Wu+f+JB+pb6MBLqwLoWHh+feHp65unpwuVyIYbYda+BYRgZ08CQxq9spysxDsQ4elCzRnL22Li8rFitBM9pY6mZslYwOI0j0ziSSyHnbbIuEIyIp3FspFpFUYFhUCJwGsa9ttpEnLyJYq+cqVoKj4+f+OH7rW7aSbatmVBqrxlf9wIOw6eIpRRq8ESKOHrpTWmVYr7oWtdMbZW1GtfSyK1xva7Imom1ctaARZcwPLcVmtFkWxRZNxTCdV5p7ckbAoOiMVIRLvOKqLCsZYtN3hdU+4m1/vkLCKr88rtv+ff+wR9Trgufvv+evCycU+CUAuAm1DovvPvwgb//7/67nO/u+PNf/4Y//bNfMa+Z2oSURmptLLnscY7TNKEqzMtCqYV5iKx5drlKdN3yy8eb88rT49M2nuV0d0fOhfXpmZwLn7LLPFptzPPsGd9mLMuCdJmHxIhgXC7PtLxyuV72iMyfvPT74ii0SvIDwmqN53WhlEKMkXd3J/cDRKBmQgyMg+8OlLJSykoTyJax7Mk6H+7PBBWmFJGSe3uk/02ZklBPA80a0zQx9Ws2puh54C8WiucoJH66ifTAgQP/ejgI9YEDb4io0vsaPP6rtkZp2SuUxbXJokIthWWZP2srqz1T9+dNjVwfK+IGxyEFhqCcUvDJXyt9ImrUuuUCK/Qs4dhZd10LuWZyqVznwnXOrOvKb37zW54vF969e0cYRoZBiDESEJo52ZqXzJrLq5M6jyILiCi1VpZlZVlW1nVlXTMyKENSpKc2xBg93/gVQu3T7OB5uhpAfMpntVGLT4M3nTTNzwOipJhAnNy22vaxq4jXeUfz6vPQJ9YKjOpmzxS3ybnfbtt02K8899YqyzIzz9dbHCBAqWgvkZFWO6HeKqqh5S7zGBIp+G6CFTfL1epRfrlWllx4WgulGbmCNNBmJH3Rzth6dN6Wj45025p4PvqyoD3rWEOgAWspHj9Y25Zm6NPrLW7tZ0BEOJ9PfPvNe5Y0sz49Qslukg39NdIn60OM/MEvfsH7Dx/IufLDDx8RUU7TSjVY1sySs+/gqBBT7LKjbfpfEGku75mmvZ1w+6i1UesCqsTTyfXStklF6r5rYt0T4P6FXiAj/TUdlNbY4xRLzq96BwTfeZCuzzdVCoLVSiuFFF37vHsGWkVQknpDp1XIfarfaNQmXswyTKQYXBdeq7dGuq+VqMKQAmbCNEROY9fk95+/KUqEFEDt9QKlAwcO/H44CPWBA2+IIL41Lub139a1nEF8mzrE2MstnGQCt6QDgWFIMHhyAS/I9u/CJQ+3LGhB9jpxwSjr1jjo5JNuWiul0AzWphQT5lJZihfKzGvmMi+ul25gnYBrSGhIXSLghPvpeeY6X5nnda+6/sIDRUMEDVyuC5frwvPlQqu9wroTtD0X92eM52vzx3qdnXA1g+u8dN2sEqNykl72UrdEik4nesKGdpYYcKlFEuVOAwEYQiBFn4aeB88Pn2LgbhzctIkx55mlrD3n+QsQaGI0rf353cQ8sh+ztv2oT7Bhi7MA033bX1VIEno++UBszc2Lo1GaIUvGFte33w19qm2Nu7x6QYsIGaHSI+jYMrpdJrPmsrdhbsUfSy5+bXIjp6L8rHQIwxs85+vCcr1yuVy5Xi5cLlculxnDuFxnLteZp+cLHz9+oiF8enzk+XJhyZlmRgiBEHqpTGAX5fg148sDX4B5IgncXjG6HXNxacV2/K35AmM75p5l7STc85xdo11q3uVDblLcmjV9AfjaZapIX9gIEtQj76IyRKW1nr7T5R2esW0onvYTY6Bkw6pndogmAkoQI4ae6tGJtwhoEDS4pMTGAcyYhtR13lvCyfZ7bmz1lKD1q+fxwIEDPx8HoT5w4A0RFUBQa9R19arxFJDoE9U4DK4V7v/dehpBzivjNPBwd8dwMoZxePV+Qi9LcSOdm+lSjEzjABg1L33a5vFyooElLzxfZp/6WaSgrLlwWT1399Nl4dOnJ5+CVsMkIWEgDRNxGLg8X7hcZ+brzG++/8jz5cKnp+srW99O5jUOIIEfP/7I89MzpTZKaV1WoTdi/XO0LkAuhefLQnjSfXqZS3VTogZPYuiSB9elqiecrM1THzBin94P5vKYkwgfUmIQZQqBU5/svbu/Y5oGnzRuGuay8DQ/87xcqO3LUz7DaKFSQvXJao+j02ioeaQcPWVEMNSCS2a7zpYq0AoiwQt5QsQMhjF1SYPSJNDMiB+fEJ4Zo9KApXjLXm6NtVaeSuXaY/EqfZHRjNoXBKW2Tj6dNApCKX5d+Kn0c+M6fe2LvVdss2bM88Knxyfmx2d++PiR6/Ozmx7fvQOMHz8+8sPHRwiJP/vzX/Pp6cqvfv0bvv/hR6/qDgMx+sIopp6KIopK6A/JpQ5B2Rsv3TzZk026uddfbxHwcpSac19s9gVE8p0R6fNgzMglc71cqD2BZC9YCeo7NV/ZRQkKUxROMZDUqCoEjPMQ0S3FI7ppubRGbZVAZEou38pXo61efqQKMSSiwNgbJWPPqBZ107OqMARlTH6bw+ANpJsxV0UYUuI8jZgZj4+fuDxfvqoDP3DgwM/HQagPHHhD3AxGHbbPRoHNpNff/Pft9Fs2sgYlhO12vozdXCibe192g9I2TtyzgjtZbWbk4qSq4Jm1pba9arpUb9Frrd00qD6SRERp5sRr+7lcPIrvtTfl3cRnkHNlWdce69v1y7tpcjP7vRIc0dGa9fsvLDmzrCu1Wi/KkL3xDrYJp1c0NzXP2MZ3EAT/AxjFI84mDQyqnGLkFJzwnIbENKSueXBTaW5ewHMrN/nSSaLX6+Fb86EXhJhPMF3b3JCGZzXvB31LsGiYtf6Ywz7FV/MkEusymdbMJ5sqNFPGXgk+xsAYXfu+mJF7dbZ01+xLWcSetSxC9yRSt2ZJbtfvy/zpV8+TeZ52zpmcy07Oc6msuQC2Xz85Fy7XGTQwz73oxYwYXSIVQuvGVnsxnb7taki/8K1/3mRUouqTX1UU3znyqXw3+fXb2XLcN0GEdePn9lrVboTcJtP7uX0F26lXMU+OCUJqTm43Mry1oTbpJS/YLetdcLPqy9viZTZ1L0Dq0iQ/FLJHBG4LAJXbZ2867bs0v/t36sCBA39lHIT6wIE3ROpNiSlFhuQyiYpQixM+ckXUaGvpGcad5Kg6eUgRkiHhy1vK0rflhzSQNKHqWcalGs+XBQGqBTRNgLJWgWo8XTM/PF4o1VgtUFCqwVqdpM65cl3yZybDCiC3NJA1F9ZSXTqgsm+z/zSMdS18erqQngPXZSXvZryeqRyD1zmrsNaMLc31sq/oU9dc+OHxQv5Yua4ry7r29IeEhERpnqts5tF17969o+TChQs1F0L2eDkV+GacuIuJuxD5g+nUC1gC5542EsbgUX4qXnoDrCOsRfh4b7s84ifPU1TS+4Hxu4mhk9sg4pISDW6inD1TOV8z+eLHPlNpNJqAtRmVQLBEkIQZlOryDBGPSjSDIJVTFIYQiTFRTThPI9PpjrVWfvXpke8vV+ZSWNer64O34pa+4DKhJ4H0JsEb3e4JI0Dz9I/e8vJFUm1mPF8Xvv/0TL4uLCbUkLiUxm8fLwDMVWhx5HGp/JN//i8JIbKWyporGiLn6czp7h59fubT84yVylqL15n3ch+XPfTiEhU0+mvIc6B958YbBBdqbVyWlTlnXySIa5aHGJmG0a+tdSHXAq3t0+3TOPJwd3Jy+jM9DtYqts6QK1MaSGlgTb4DseSCBaGpYhhanBQPKiQ1khpDEKboWernMTGOA1PX1Ef1CXhQMLHewLj9DfHjIa1LzlTQqJ1oGzmvCJBS4OH+zFeWRQcOHPg9cBDqAwfeEPEloR4SpTRq6TXkNCg+jsy1uMFJhWEIhOhayxADRC9AeQ0hBNKQSJJ8Aisua7gWn7wFjWiY6BzeEx/mzI9PV0ptrC1QTNzUF5yoLZ1QY65LVVWaiWupRalmTniqx4nVbs77IswNbk+XK/E5MK+ZXL1oIwZ/kw/RPwTItVJqZa351cKUtVQ+Pl9ZH33iveaVGCP3dwMpRGpZuM4zAPd37zidzqzLQlszGUN75FgU4Zth5MN04iEm/vh0drlH9A8wVgqVhkRFxwgqzNXJ4OlcvIDlC9CopIeB4ZuRMUWmwXPBz2lijImSM8uzk9v24zNzLyyprVKtue62uW44Rejl06xtpbaKSCD0KabSGIPPMc9xwCRwrsb5DHOpeBJfI5jwsV79OlTrsYPe/IhKz5luu156P737WNp2Qv3KKfIUkSXz49OFuhRyU6omrsX44XlGgLkJFkae18Kv/tWfUVvldLrjfL5jUGGYztw/vHONuPzg2v/sxSxhz1WONwlKz+oOMRI1cB4GUgg8Pz9zeX6mlML18sTz5UqIifF8R4qpE+qh51Qvrq82J9SmwmkceLi7RzC/jkrhq0S0VawskBvjNHA3DeTaQJS1NnKrLOYV82YKJiSFKC4bSyqM0cnx1K+dIQWPu9NNz90bLEuhtNplZIObX3vsn3Y5lXatdqm1E2plHI5ilwMH3hIHoT5w4A2h6luqoWcqG0Lo5Rom4kkeQjcrym4aSinstckEvpqm4L/rWldrrTf/td0EiVVM3cC35katvsXukg3Xzja0S1L61nm/XePz+2+bea3vr3vCRiKmSgj5i9vfBtRSmZeVtLrWV1S7FnbTTO979vvz+ZrhqzaPUQvZST7q8XWl+LR2zW6cBKFMpWd82358lJ6IIMoUI6eUmEIkqhAFgnS9tOB53ipYEAg+EQyipBB7G+OXH6moMEwD050nM6QUCeKLJg2eox1rQosyTAPrKdNqQ2N006YK2iUbIfnEvBl+v20zWTrpBieBfuC6fECEGCCZT3OnYaC0XhLTr8ctDaXhihPkd3YduoTItjzsbthzQv1lUmlmlObyjlarNywaNJNeqtMf5SYp0tCvQ2Hrd8ylsK5513FvsqbdetilGc38NdBEfRqtgoVAi55THkLgfDpRSmFeFuaw9Jzm2CPlvMXUugZLuGU6QyComxZ3icRL3csXoOo50GOKXmqDG5aDCsGEJko0aE1eyDxuzYwxBsbuo9jMh5gX07TW9mzp7TpTgi9g+25NTEpEqdwkZWbWtUU+nQ/xy7srBw4c+P1xEOoDB94QKTqhHofI6TRRa0ViJNbKWgrP85XSKilF0pCIIXB/PjNOA+M0cDqdKFMjxvhF05NPoJ0QaPMa8FZq19tu5MOn1rlULpfVTYdPF65zpjaommjSicNnRHkzfMn+hl1q3VMS4jBgopzu7gnDyGUyRD6xpVX8Li7zzG++/57hMXI+TYzj1Lfme4FFH7d5Okdyo+XgrXhfwpoLPz4+szxlhnFgGEaaGY+XC1Yby7Jwfb54skEcvHp8Xd0kmjPJrJPowHd3Z35x98CEcYeRaIxi3hoZlPGckCFQqMwUGjDGyBAT54dMfGVCncbEh7/1Db8If0AUnywK9DIXCC0wnBNWjTgm4piggVpAzLOQay90KbVRixPmIQyICOvqKRqtNbAClgFFWgAxogTGGFANfPNwhhgYnp75i8dPrMWzpolhJ9N7kkcIu9ADfBFR++RazTwlJHv1+pdgwLxkPj1foPRkDZzcF/MFVZVIC572Mp79+YYYaCLk2nh8eiYXP58Gt9KffgdeFOTmxCKGVCjLlSdr3maoSpiE82niu2/e+2tRXTKThoF37+5Jw8CaC/PirYxWq5NfVcZxcMnFkBhTxFojY25EtdfV/mOKfPvujvfrQAyRIG4uHIO/riJKEvG6dfGi+BQ8xUVVOJ9ODEnZynjAKLXw+OTJHHfnM6Ln3rY5kFS5Xi/8+OOPtNa4uz9xPp/6TllExJX5KtYX8SPTNPwsE/CBAwd+Hg5CfeDAGyL0RrUQfPIsIkTzaWBpt7ruGH3yGYKSUmQcEkPyiDYL8lXJh3bCqyZ7DXPrU1igv1G23QiYc+3TPq93bhim1gdWfe7Xb9O6kWszfbVe9Yx4sYsGSDH59D3E18IOKLVwnWfanJh61rH2mjzZXGH7dn3YP16DT6gzsgphGJwA1sqaMzUX1mVh6fnKJec9a7jV3igIrp0NgSklzkNisEasmWDWDWBtn/Tp4NM/qcXTOJIgQyQNsadLfOEcqTKeR84PZxS/XTAoxSflDX+uBq00WvaIvEhCLbieuvaq+mXFLIMIYfCs7mYGs9+m74H0c28uLRDMp6wijClxNmFe8x61GPQm2ZHNxboZRfev3qabbuaj53u/PqHGfBGw5ILsOej0R+kxj9an0WjYDXr9CHV5R+47D15AspkEtym1LyA9BrA1QQxaWWllRaxnklsjxcDD/R21NaZx9AzoLvNIw0CtnlXuC5PWWxw92tLXHJ4W0roBEL7OQ4Mq05A4DQm2/BBzOUezbWfGozRjDp/FX24T6hgnrDVKWfs13CjrigHD4Ck23pLqOx4GLPPSFwyRcRx8V2NbDHVTpnVPQIivJ5UcOHDg98NBqA8ceENI8LdP1ICCSUPVCMA4Rj7oPbU1Yoqk5BPhISpRPRGg1YqV+nq2M32y3LWR1pMHirlh0H+AnowAISZMAmmsDGMhV+OSC+uyEqLnUos6ARsGL80IMaK9DKXVShHxSXjt8olbvMLrj7M3tcUhElMiDQnfOq9udHtBqrcWv9f000Cf3Loe9HqdvaCkVNbLtZMoQ4Nv5edcuDxfvFY9Z1rxFsXT4DIPFcPMi1QI/liaQgkGoZLbitVCtsK1rTTgFAPDKRLH4Pm/X7oW1MtwUvKoNL8vo7YuQxEXzIrBcEqICVaNfPXHWq31chUv99h4mPb88ZQi4zTQolNUlUBDqKa3lBCq/7+tlLpSbUX6NVlptFbc/GjbogqcoN8kRGbbYo1bkszXTn2XMo3DiBWvYPfilMr1egWglLxLoDT0RdYm6LBKzmufQnsqh5NdIbmg3NMzYE+8UIE0DIQhMgwDglFLppZCKW50jdFLbEKMmFVqzYhVkgqmrkEOqr4wrQXMWzSpBTU4jQNjDFwmj33stt2//PSh18D3a9k8Nk8RAnQfg5/jag20xx2uK8VaX2z3ZY2GnmPf87bNKMDzPKMaGJoRY2DNhWJQzcuXDKWasGQ3QAd1CVBAbxKuAwcOvBkOQn3gwBsiJJd8SDAaBaN1050w6sj7dOfNd1Yx87SCcVRCBJWG5UyVivWc3J+ECEEgdU0mqoBgrWDV3zzF33sBIY2J0ISxwpRBcuHj8488Pl9JKfn0KrgJ73waEFGGXoEc47AT6ZILrTYn1cYLUv3lN+YQlGFMDNklLcM0YK1SS9esihNPBKoZ1upuivsStvg/ycKyOlFqtbJeZ1opnKaJ+7s7VNVruvOjt8rNC9IacZy4n0bGEIhitJpdIz34AqQGn943aaxWqKsnbyyWEYUxTYz3ieEuumTlC1ARxjF5jjWG4AR1LosvmrqeXBFSmDhPSs2VH+qPLOtMa0ZpzSUWL45V6OUffvh9hyKkSBi8mfO6Vmr13YrWDZ6lzuQ8U+uMaCUEI1uhNp8Ym0aQgMiW3OGmtlp84WPeBoMpP4tVu/EtMZ0m2tpYZm8lzGvmsU+cWz/XIQaGk5eXbCF91mCer5htEXF+nGNQZEj78QRfB4V+vM/TyDS6+VMxSsmUvFJWl0qkGLi/P7m8xQolO1Efgp+Lu/Md0zhSSma5XGitEgFbV4Iq704uo7jcGUF/++Vzj3kkI+zuTcONsAZca+E6X6lm1AASIg0nybIK4+DXjYoQYur6eUOSL3Byzjw/PaOqnGsjpcR1KZS66dTVPRKNvdE0RWUcAjHQd6kOxceBA2+Jg1AfOPCG8Gpq65PErkvt4lRVT//QXmO8G898OOfZwr25zr5ifNqaEXUbW3IzEm7mws24qPjWsqp/3gbLL7fypckuI5HewrZpVrdM3s3ct0lA/MN2wvDaY90fj27Tsy2W7Qbruc7GV27zRRBya43W5Ryttj5Jtf1+t9IZ6WbEfSDOzdzmhjvdxooeRSY+Ea40qm4zW1yaEoWQejrJa4xEtoa97bzIToJvD+A2KdSgvljBz0k11+va1pJON/L1c4ZZbyvfyksUq4Jo/4W2HawuY1Bv1IvRCbnW6tnam/MQ66qPbUpsu+QDe3G+flbS2ovn/OK8GUatvQbd2n4fu5yjf5iZy2B2qdF2fb+cq3pt/E01tMVJpj2jWfrj36+DPuHfM+D77ck25VY/TltkHmafXS8xbObh1w2ptyPQD6e9vOb6sWi+89Ca0ASkGdL8N7ddGtufnHp2ev+D0swXWwGXQIW27e7wIt++XwYvfud2HfXb/1nn8sCBAz8HB6E+cOANoQOAMJ4T93amlMrzZaGsGekTy5QipXg2NfQ38T69rGulWO1Nbj8NwZvQ7s4npECuPplMwZMBDCGOEyEONNwE1gye59y32QvDEHu2rnai2Ty5Iga013er+rZ/XleawTwvXBc3OD5erqylcL1eX5VoWK9wjsVva0sR8XSGtpexgFCrb3+X8vqE2jOnPX2hVW88FPPaaEIghtjTL7rG1ipRhNMwuDlQPG9YQiAPkZoCVaAExVTILZPXBYnKcHdimBISBR08lu39N+94eH/m/DDvMYk//eQNsR6X6Ayqn2+XgriBMkMzginBomvA80ouPj2dLy57ENSNpgi5rN0w6kZSNxIKaUpIaYRaqP2cijqZvr8fiaeBaR6ZMZ6Wld98emT+4SOlGbXSZSUuIXIO1vbFifE5Ebt95QtPHSOvmcvl0iUfviPRcOK6sdhNwnE+TS4N6oS11sbHj5+4rrOnkfSmw1YrtRREhBR6Sk4n0bFrpd893Dn5rAWsEcRYl6s/qlrYNhW2NJFqhlU/P3mZseJSD6Whym4UDFGZTiPn08Q0Pb+qn/fTvy2BerKNWSfR5kbc6Gkt8zpzLSshRsa7iSBuzCR0jX6/Llszr7I3KOYxk9XY2z6rQWkuz1lKZV491vEUU5d/SU9a2cj3MaM+cOAtcRDqAwfeENpfUcMYONlI6bFx1gpCYhi8WjhoI7Pl2W7TQaNVqFJcM/oFiAgpJqZxgtBos5PxENQ1yiIM00Qcxp1Q1wYhPlJbpbXK0Imzm7p8lBUEhujpILEXRJTq2+a1GUteu8GxcLlcvKVwWb4an9ZqoTZlJ2DSY/ta2wmaQE+ScH30a6Mzn7x7eoXghFTADZK4ScsPaa/wNpAQGMfoZR+5UNYVbZXaJp8EY9TearjUwlwWVANpuCPeDaQhMN4NxKA8vDtzdz9xOg/oKykf/Qh8ngjRowO9Dt237ltpTqgp1NLIxRdIuXj6RK2NoNGfF0D2TyFEUho8bjBEYoiYVnRVpFXEDKS6FCKNTCGRpoFnGqdlZa6Z8OOPVKvYvmvQGyX7JHw7hy8nmuan8CtP2+u750WQ6ia/fTHVz7f23ZIQg8uBhoEhJcZhoOTC0+MTrRbXF1f/fd+N8OckIe4thim6J+F0mni4vwer1Pm6Z0aXvPQdmeqFKP2qM1zGspky67rSJHsxzJYq0qfXQZVxGJimiWFIX20zfXHB7mbKfeIPaL9Ol5x5vl5dmjUlJ9DiRBp1Mi2CNz2KF/BUM890R/ZIwmq311ApjbVUEq6P31JzjJeE2g5P4oEDb4iDUB848IbYij5C82xpgBB6vqwYe8qu3Ug09DwFY69FfjVBAZwsWvX66uokufZiFESIPTd4M4KVZl0LXT/L3A2iDENiby/cH4s/vmbN2x6bdUmFk+AYIyZCivnVN2VRnyBGDT2ZoUfGqe7kd4vq0y7X8HrnV25009G05qTRzMlOGonhlmAh4GkqIowxcp5Onis9L0jz41QxilWkGXOBYE5kxvNEGCKn88R0HolDYDoNhKikIaI9ieVVPmJeulFzvpVrdClD3Wrbm2/9e+ayG/BKLjdJzWbSbJ6xvckapNdgW59aqlqXBNieTNHM+mdoAaoaQ1QezhMxJT4+P3N/Gplzpa3WY/l0l0DYrle6+U+lT2t/Tlb6y3PY6I8PeXFbnnQTo7d+jsNA6pGEvuMQiF1aIV0+E4KismVzR6JqT8TQ/ZraNDLbMbfW9mt+J7P9emdL1ugvya7C6dXdt1KUEBQJyloyOs+s6+vlQ9vku27a903Ggp/P2iUb1bqkJQQkxP2j4RNotcYQEhICUGnFF5wN2+UgooqEgEaPnGytISF0km3+NyHDtplipt30LD9TvnPgwIGfg4NQHzjwhhgmf0lp9MrfmAvpKRBcjeBxbFbBPDd6y5ltdBlEqVRen1C7JrR6RFhuXpdcMkupXEonb+OJgL8pX64La65crxfWdelkzref03Tiw4cHYkzeOrisu8nPcPlFyU7Ic8nkUgDh/u4OUSGfGyIf+VIOdQyB0zgxFte1tupNjENMIOYkKt2ixVSNGOLrZM3MTYYVqA1pRoqR795/4DRN3YjmFex3p4nTMDDGyIfziRQCy8dH5k7wFgwpHpd37ekK33z3wLfffcMwJt794p7T/UhMgemcXIOs/SO9Hm/YamV5vjI/PpFSYhgGn9zOK/O8eFpKcdPh86dnHn94wpqh5sF9pTjBrtVlQGaFGAP348SYnDjVnj8etuPSjCGoF9QoXnNvUBSqNIYUOb37BRVFFeZl4Xle+bPvn8h5xgRUo8s+WvWWSKTLG7r+OkVIrvl+FdtUlU0+0k20SF8YeFLJNI28e7jnNE2++ApKzi4Dycvii4otx3pIxNgn09GP/xgj05g83k6hbvGGvm1BadUTXqxbHsUzradpIoTgr4fRU0jczNmJfzfdOmGPGPDp+cLHx0d+fPzkCSVfQDVjbZWlVZIGUJdplNbIPZN+LoXSGqaBOE7EcSCeTsSUKNJ4ul4JIRDGgWEcYV3JPRavmFfTNxVkSOg0Mqhyt3se/P5abTAve8LHGH2hUvI9Ysd4+sCBt8RBqA8ceEOE2AsqTInRiUQIwtaOzIvp9EamP9tat9ZNcj9jQt38Z1urXlfdfEItords6m1CXQqlln1CvU15g8I4JFIaaLVuaoKdfGxkxvpWcmvNo/BiJETXu75Gfl2P7XrnrdVRZNvud+nDpgcWNTdmfXXyeXNcbUatIMI4DJymibwKcysI/txOk1d/n04TKQRsXlhDQFqjYuRWqRhNKiEAQZnuTgxjYjqPTKeRmJTp5GkLmy76KxLabqwr1LUQRPFA8tuEmtbVII2ul54xM1IcCVutNJ+fB2my7yb4Iag3I6s4e/WuHKVhxNYV3P3aC1EYTyOmrqG/P02AkMKFW9hexwsH3Uaq90n7y1ry19D10q3dtNjbN7ZpdwjKED2HPajLjawvkmKM1G7S9ThEJ+Eisu/8hOgm2q2I6GUW+/YQt2k/L55DjN142yUdnr/eumlStoPm2esx0lojL97Cuazr61InbJ9QB2xT0e87DtU89cQn2Lcps2jwXPVOvH1BInux0haz16w/vO13VdEYiH1CvUljaEYpRhWD1pMhYZdCHThw4O1wEOoDB94QIbhW2N/AC2bV0z1i6B9eWZ0z1K7vjDGiGog4iZBUSTH97Pt0YhKISTgFz8sT8UKMWj2ebyusSFGIIXIaTwxxIKbU9dReApJ6S14K0ZMF1sJaXaA5pNhNZUqKinbj4mtwwuRb99DfyHdTmu1E3ZqxLpm8VtavkBUBAkbE0BCICEOMThbM0zySegxgzYXZLrQcGYAUArXV3kpYyXlhzYXTKXF/f2YcE/fv7zk/nL0cYxqIQ/Aq5+hT3dZzlZsVvjSZhy63yR4V98KTiCCMaaTVxtpj7USVNA5YA+31IRqUcZr65NQlIKFPO51YVVon1GLiCRHdpEdPmylNdmLu0pFCXWdMAqMK371/YBoHfny6cl1WssHSpQhi3u7HCzIN/Kzqceh8zbbrQPeT52odl7bQjGtYeHx8JK8rQ0oMQ6LWiooyDpPvjOTStcHFNfE9kUMEalasboU1nvcdVJhibx4M2ifM3n5J9wfk7Leroj172ljX232t2Y9tjJ6h3sx3g0opLGv5CqH2IpgmXrW+Fdp41brLMC7XmdwqixkZIzZDxkSshWkaON0/oEEoZjzNMyVncpd7pGlkPE1+XFXJtZJz4br05sxeUiM4mRYMojc0Brx1s5Z2aKgPHHhDHIT6wIE3RExOHHLJXpphhRCEYfAK4DT41O2KUfLqyR/DwNDNhKKBkGr/76/f31YRrsEYNHbiKjRRcs6UWrt8pBK6hlY18AfffcPD/YOTuq7ZTSqU3p4WhhGNEdHMnBtIY8CNYNuWuehtSvglqCqxp4f4ZKzt2+4iviW9xaPN15llXlnmZd/i/8nbBKIYSUBigBgZUiRgSGuE/nWzRs0rl6VQYiSY1zsnhGHyifzT8sQyPxGmd9x9uOf+7sS7797z7psHYlLGsy9UYhRSVESMXCut+fl9lVQ1o6yFvKzUXFmXgqgyDiPDOJLXzDpnWm1oiIzTCau+CGjNFwunYcQTULxlEwRTL/FpLwl1BcyNmnHqunQxSiuug68+FW21UOcLTZRTFP7ouw88zyu//fjM83VhLpX1uvadhJe7Bzdde2sNKl8tH6KbGbdYv/1r/RpYrVDEJUA/xOC7CacTd+dznxZHpukEi2CX676oKOoL0c1GGYOQ1+A6505fhxQZw8l12lFJ1stgUkRjoJTK5XqllMo0TqTp1BculWVZyKXyfJkptRGiX7+Gy3iaGfOy7lP3n3zqQBX1DwS1XgHTszTXUnl6fmYthQVYgZQLNQXikEjTxN2HDwhwuT6TeyZ2aRXMuDt71roZ5LWw5MK6rlyuM7U1dNesG2rVj1WKDCTUhJo9Y/wrLoADBw78HjgI9YEDb4hbFrTspDH0CVmMYTc7bekB0g1L0rduNQRC2Ix5X8aeDWJ+b57Jq93gJ7uqZP9psz1ZIahHlU3D4IkStYJJf2z+oFRvRjC/B08ECC+//2Jq+eox2R4w3ZTY49K25IPtyVh7kcH9lWOcgk/Jt4xm3R6jecW3J0oopUsl6rYNvk8MvZlxc+BJ8CrmkIIvEvbnx56BfDtXtwXB1/mI3RQqPRf6heJnP4/SHzMKshFDDbd6aJdVu2GObr67qRL2gyxit8zpfq5pcjPD0mVFvbY6Ba/hHlJkSIHaTY37JsLL5yeff/wsxcDv/NDLm7MtnaK6Tl8QYiyu0+9fb9sOxi6Pukk6NpNv6xIngb1mvuotpeQlod+vO/mdx9Ez1XepU+tSqeqmQd12WLZr9ivXvS90u4RDte8atc8SP7Zjs8lASp8ym4i3f/bdnAY97s5/li4TeZmnvUVQtk029uJY78euP0frrZe0F9fPgQMH/so4CPWBA2+I2DO5YlRSDKgI797dcz672W4cRkSUaRxYJ58+xhh6akQgpkhN0qUjrxjeGpRuLNxis2IIDNMEIqyluAbTDLGCtEKUxpRc0/xwN/H+/R3rkhHrW+kdXgzedaet+qR9iyqLnqIRe0HNkMLrU662GQg7CwtKiIFpGF33GqKboxrIjTW8eoynIfHdh3ec1sj1+cp1ngmiqBXE1I1t44i1xlNZWdaCNMix11+3xtJ8ahcHZRjO3D1MnO4i0ykQEkDBzIuitYswQpfSmAYkJlKPbXsd3uMndHIlQs6lGw7rTVus248KaRjYsotDN2i2FzrilqtPkHMv8vBwjltxy6CEIJgEGslr2m2lNG+i3BJDkibOw4AC396fWZbM43XmsmawRnlB2Fsn0NvCD7Wv5jDf0lhuvHojmv599wCU0nh8uhKCkrNR+6U4X2c/VrWQ19YvpUJtBRFcdqS++Kg9QWVZMgrUIXE3eupLECWOI0L3BlRDTRhiImik1canx6eeiGMggdoK85LJuXIXEjG6vEKCE+JpUkQf+VL1eEwD54f33OURaW6cba2RrGDaGIaRcZygZJfalEy2zPzx0XddUiRM3lYagiAxUVdjzoXWKmMp1J7Gk2vuxynviw1VJYrv0litvvOhLkEKCDUbtR7z6QMH3hIHoT5w4A2hIp03ulFKRIhxAOsTZPGCiiFFxiFhOPl2o5kQQiSGHtn1yv00M2qfNm3+IlWPH/Oplrew1eLlIrRKECMFIcXAeRq4O08EFZZ59knfZjw0z8Pet+fbVpMeepOcE2kN23N85YG6YNY/pEsAgudoeylKn+ib7EbDLartS0gp8HB34nyXsLyyzg2lulnQGkECY4qYGc/4pFOlGzaBUguUFVW4P0WmITKdBtIYOhk1DK9+39IetE9+pZ9bCeFntOWJE2M823vbdajVIw93kuw/6nnI4lXT3lLphPp2KP18F12ppXi1dMan2l1PrKE3OQavn07Ny0NCFjT3UpHqDFc1MkbPQr6fJt6dV5oZKShZe+kJN0Pj5vITFWwbY7+KF2P4fjw8OGMzD/pt1tqY69qPpaLi+vfL5UrO+cV02qfGa/GcaCESo+uUrfk1X3JhseYSi1pdlhKVFBMikHOm9ml2DBFV41oWrlc3hIomEKWZsObq+vomhDC4FrsvJNOwvrqLpDEyTGfG00TLGSsFrY0QIFCJMTKkRENgyS7JaYVcC6YwnE+cni6klLi7mxhioklh7cbi0mqfRpunmDTPLt/2PFyuE7Am1B61YtWjL6s2WjVsK8k8cODAm+Ag1AcOvCF2yYds28zdjr/l3Yp/aTNKtU44rCdpyCZDeAVVG3/+7RP/1Z/8GqqxlkK1xjCOjKdPfUKdybVQcuH6PFNLYVlW5utMjJHlD37N+3cr67ry9N3FiUqu5OJv1Ll5UcS8ZB4vV0prtzQBUVJKiAof//aFGr+gdxaYf7ny2//oiXSJfQvcScnjad7lKc7xGpfnK8u68ukfXKjjlyPJnDO4cCPGwDSNpBg5nUaG5Hr0cRppzRiHxByDm856qgetdtGHMo6Ju/PAaRpJIfTFjKDq5jb3Tm7ajE1CwGefX8PWPNhMsF65vW3L7xKDzZQ4eHygvtBcyC69kdukutV+2Iw4Ji/1keBT+tCnqEHcqKjb47zld9w8oT05AyP1+LkxRsYQqcGn51Yb1omw9WvX4x6/rvnYSlcEJYbUddi2a6s9c/0mewG82CZvEXbtRWX4i9eV6E1+A7123TOpUwoMKZAGTw1JMZFSICV/qyulYK2hIXB3Gp102icuz9e+KFU0JGIsvjjtR2tdV79eVYiypZZ8+QC0LVs8F6wUWo/Iq1124QvtRDLpSSOK9Rr1TXKSs2vmS6mEGPxciSLqRslhSLTaPGtcBYJgwRcXQUAxEDdiGqDSs+TVd0dqKV+Vrhw4cODn4yDUBw68IbY3fp8uBlQN6/vlPn8DxBhioE4TtXqqhWtIQcaRr9SasMbK/+0f/iv+8d/9iz7QdYLijXl629reJAK1dZ1oj14TYRh+TQjRjXv1hZzgRbyZdc1mrVt4W58w0rXTAutdIZ++QH4FfvuPnnn+49UTKOj6a9lKM9if6UagzIx8rqzvy0/fJgA+cccC59PIaXTi9O7dO8Y0kIbEOEwudZhn2ur13a1PJ4M2orjZ7P27O37xzTtOU+Q8JYYUGKJn9nr8nHWDl2+d+4LIvPlvp6ZfvBi8OjNESm3UvB2nm5a5dFlOiJFhGMG6obU2N30OYb+WQo9T0wAlF0JRNPlCwQmyE9iQehyhNLQJoYBoQ8SV49pZm+ESkGCNU4q8O420Wnl/mogitOvC8zq7hjdGkODXwV41+BqjdqKYUiRJ4u58T0zJI+fmmdYaa+uZgdt6pXnKxnYNtp5Qsz1/gGYuY9h2CrYIx9N0IobAeUqcxsg0Dtzf3XOeRpdfJb/W87owt8J5GvjDP/xbTKcT+q/+G3744aNHFqZEGk6YCXf3hdQLXB4fnwlBOdsdwzj08/blZ19K5fm6EC+evW6l0AzWvohSDZzPZ0IpjOtKWP16V/E/FLU0LpeFmCoxuQHYavMUIAucpxP39/c+rV4XaIUmSmi+M6ONvmiEkBKSDCuZuq7k1liXhXlZjgH1gQNviINQHzjwhtga0bas29bEpQ52Myr6drt2nbRjK3mBr08+TeGHh5kfHua/wiO9/hV+92dCIL+v5PevTJv/teHT/Ngb7FKX0Him9i16bWvba8DaJ8OYIeqRcEMvFhkHPx9BBN08gHuz5Tal3pcV3Vz2tXPVNSJ9+ti2VUqfRLaN1OJ65BidDHk9fHvx6x79FmKgNTfIhX6t+JRXEaPH3PVFlXrld1dR4OoEv1/dtdEuwBYzonhkYgqBIQRyjARZb/KbZqBbPvNLy9vrT11V+o5GJKXkWec9ok5eOButLzg3M6CvW9r+PT/kL6f1t/9W2cy8XsCSUtozrGP0rwcNmPWFYD9O4+i55Sn2RB1jTzYJ++05yS+l0Ey77r19NeGkmZF7/Te1YrX28iY/lNIXHLGTaxWP1tuuKeuSFVGXxNTeCqri0Y1bFGXDjcJBgG5C3Y5l90D2a1qoVfx6Mfas6gMHDrwdDkJ94MCbYnPxO5PZa7w7kfItW88KTjERtO2TsRiTZz3H1hvlDvwUUozc39/xbhlY15WcMyHANEVO0wAGrSy0WklqnAY3Berk2d5iGdrKOCYeTiMPp4EhKaeoHo+nQsAICEmVtKWy9KSUTfoS9HUNtaigw0AYR9SM2LZmzLrXYbO69CGEsG/rRwuIWjdtSk9aa9SWMYM4BEJSMGOyqWvdq8fvqeeMqygyC80qUuHUJjQEaoNchNpgKTDnrjvHiMApJr65f2AaMtWUpTSKGUszCqAGuslUvqJ130i1UZmXmVwyJWdqzS5xqt4I6qTYj+VGZMH2Nk/khbzCGtY8OzpKcpmOqhta1RhS4ny6c42/eApG25omaQwx8nB3RwyBTx8/8vz8zOPjp57ZbuScQQLzvHC5PLMsed+tEXFp1q0c6cvPf82Fj0/PtMfVWytx8/BaKrUZc+1Rd7WS8+qEXYTQjZYpBMbkPgNpDVszIQinYfDUIBr5+kyr1Zs+aQQ1ZPTdA22dUBvuoTCjRiUMse9e3BYsBw4ceBschPrAgTfFpvXUW/qFAc0Q9Qg9FaXFuEdYaQhe2tG3yFsst9zeA38JKSXePdzxbh15enqkloWgcJrcwLXOC/NlphUn1Hej53OfhpGoSslXynphHCLvzxPvThMpwikZIcDQCXUEkihDJ3ibPCGI7NnErxNqJQwD4XS6iUPMaCV7HnTx/G+pFe3Nkx7lFwi1/37P+TYqpfrORxoSQcOuwwfXBrsmFv+eABFKXZEqnIN2XTnk7IT68XlhWWfP7jYjAacY+fbhgVyN2mBeM7lWPi0Zau3NlJvR8CuEGkCM1irX5cLWlMkmQeqTW1FFU9xjH7dJvWds+83YprQ2n/gSuu47RKLobn4c0sD93R1R1Rel5vffist1huQ15aVWPv7wA7lWPn58pOQuyciZZsI8X3l6emJZFmIvQBLxPPBWateWfxlLzvzw+Ej+lJi6Nr22xrwu1NZYa2Xpn9d1Ja8ZiQHtZt8hRqaU/O9Fa7R1RcfEebpjiL5DkZ+fndiXlWi1x2F63ntogjaX0bTS04AQssR9yt36YubAgQNvg4NQHzjwhtic/9tWdJPmk7IeM/Zymzqo0sTc5KS6y0WsGQ/LwB8/3/McM5+GhSX+2709G6pydxkZSuTDfGYKI8Mw7Nv6MYS+Xe5pHME1G8Tg076gNzlHVEViIAXtmcvWJR7SzVybxKPXwLe9ANynrs36lBa+piPeqqR7PQqbdlq67ERU/d8iu+nvpvW42Qm3L+85xnrTse9S9E0G0dsNVT1bW0SwJi8i1fyOPCnD9mPmJkIhBf/+kBLTMKClkEr1FAm5GRS/RsU2Wcb2b7Cebx6gGRZd0y09jnD7GU//sP257BIP6FNs3fXTNy0+Tp6r17qLNqq6FMafq0sdtB/nXUZivo+kqn33oBv2Wu3H60W293ZtbKfolefuC4KexPMT37P+GTPE9tPnzY4qbrAMPbe+d9SL+XW3LWqsWU+18eMSVXrrqZNprT5Rr6bYZlI0T5vRriv5Wub7gQMHfj4OQn3gwBsixoSTAm6GwdITPEQI4m/JbjTqb+zmEWW5ZOb5SrXC/+Bf/C1++cOJP7t75H//7/zX/JNvv/+bfWJ/w3j3dOI//S/+ff7en33Hd0/3/OH0Helbl0TE6NnaKkYpC6pwPg1YNQYzVg3QTYnUxhCM4TySYmAQ6xF6gTEMxOjT6VYLNCHPhmWfHLfuLE1joxrkobzalocqOk7E6eya2U1fHyKtZCiZ2Anclu5geFSdq5W7vnonytqNp87sGo1WPN6v1Eq11s2S0bOXh8jduzusNi7PM1yXHjHndrUg7HGAKQhTCgT1zOnSjO/e3RNSZM4Z/eFHHq8XmghVoXXT5r4G+AlsGuqtWEVEGIJPXgU3Vrbq5SnXeXXzbHMNuReXeLNhlwcjwDQO6JhQVU6jp7u4rLtSa+Pp6RNWFlIMLuWJgRSVYfA879qPl4gypJFhEHI1rmullMp1yczzwrqsvvjqC68h+m7BEIUxKumrkqxtqSKgAUkJrZXQGiaKloyUipiT6BQVjS7zCCnybhr55s53NtblQi2FoIKsC9KjEDVKz+MWtHsI7k8ehSnFY3qsNsrqJtfcIwdBSApWlt/nJXjgwIGv4CDUBw68ITapRghG61vXyM6ud9a0ZVQ7G/Hfaa1SSqbVyp98/54/+eEb/umHH/i//PG/5J/8jT2jfzMwLYl//1/8Lf7R//vvesvjeYRk5LxQy9oLVnpqhShDihANzQOpCSVnlnWm1eJRe8nj1AJALYj5hC8GBarLEhRq9pg9z/XuCBGCT2xfG/CJCBoTmsZedLhNqF2QqwgaM5tTtfWJaJ/PsuWt+OTSddvycnJtba8er82b8l5S3BCVFHxhkddMWf33tvS63XyJEbfJtMAAhAb3pwmJieu68ni9sOaFJpDxkpDXSm22abKoP+/QG0KHIXKeRo8ALK4lX5aVvK6s1V8jrT+NFOKLPHY/Du498Al1StHjELcYQjOWecbKyhAjiROWIjYkN6+K0PrkOcTINE49XSUzjgOihefr4qk7pfQkEc/0jt3w55/966+pJbbFkfmqws8dLuNRe9GEatuOit/P0DXkU4qch744X33SrK0ipXSaLrvxeRiUGJTTEHk4jwRVKBVKw2ojC9RSKUGIPaBFxLBaDsnHgQNviINQHzjwhvDKa/Y3O4/svW2tbhvAzRq1bakePT0Bc+kCWzW2clcG/oNf/xLJnoBQa/VM2a3S2O+036Z/HzwVQsTzZ73Hw3Nt17X0LWffZK6tsq7FjXExEtPnfxJUfPvZf9rTAnb9azM+fTPz2z96pqafMDgZvPuLkW/+m4lQPaVia8nb1BK5ZI9KMzeE1epa8mFIXevpROzbj3e0Pyt8+vSJlBJLXgBhWbzZ5JZPrDetrvU83qBIE0pPtfDmQ0P3EnLPdi6lICgSrMcd+hS1FifA1otcWrW9q+a1DXNDaOatk6LRzXY9xQNraDTCOCI1eHthN7qpiJfUaM+TFj/2Hv0sO1lrZp81KG5Sglq7NKXHIFpzGUSrDfO7pjVA3PjYDFS3bG66FGAj2jAE4TRE8mmkYqxU6mikkF/VPYRurKNsqRIFIfmOQlDGO4+6u1xmSsmEefUa8tIn1FtkYZ/OC/1c9v9Ow+Am3lopZfXXTwzE4LcfunFUEVrxqD3reo3WjHleEHXyHEPErEuFaKgaKQrWlLHrrmMIjMkJfdSvtQza/rlZo3b50D5u79fiJr3xBU3gNCTikJiiMvTdiTAO1OgLnjEIQRpDCIw9M30MQojClJQpuUnTF1h9GdgJu5pgWyZ1uL0WDxw48DY4CPWBA38NkE4ETbwy2baItHabKJZaX4hjPckhDQOxNWqDWo1fXu/4X/w//yH/Y/kT1rVwnRdPghhHYhp6LpbX5K25MC8rBqRxIqSB2oyluJbz46cnvv/xkdqMZk4pr/PCD58+UUrldH/H6f5uL8wQjCEETin5dA4livr28XWh1sI//o9/xX/+P/1nXNL6l4+BwR//vx74T/6Pf8jpmjjdnRnGcR/WN4OPnx758eNHci58enzkel04nU58+PDBo/CSJ5/EorRPM3+6/pmnoUwDqso0RMbN0KbBiU4zrG+nD6qEQVmtksVNbdGUSCUCwQpqrunNq9CqEpMSkwttc1loraAxen21KlIbFPPq91dG1AZUE0pTYhqIpxNi3sFYTdAQGXo+cssrJS+AoTYCXXPfZRWlmxiNrp/F+o5G+SxtwvoiqW1Z3X0KnFdvV6zV67VdVWEMY0RCI6wV7TnV1ALNiBKYYiBI4Nu7E1MUCo3FCvnU+HHIX77+RVyCcHeizIXLs8sW9DRwGpVxGPjDP/glH96/58cfPmJl4enpmeu8cr16Isdm69VeBiQq+9dCDNzdnTmfJnJemK8+xR1jYAjKEANTGvbGzLK61CEk17SXUrk+f6K25nKJcSD0lBeV6ikrg49zz6eBu/OJoOqSjBAYe7vplw8AWyQK1ao3IJrRhF2I7RGOjRRgSoFpjHy4PzEOAw9j4oyn/Uzv7khRaTXT8oxROYXA1Cvmx9EXEOcp8uGUCKosNbPM/rcmKSBCESWJj/9jGggx8uqK6MCBA78XDkJ94MAb4iW9+qy45Hf+1zbD20tC3aeTptq3743UlD+Yz3xTRpY1c7kMXg89TcTBCbWEACL+/WXphPpEHEZKNebcKNVIHwW+r15zbAFDGedA/cGTHM4PZ84P97teFYwxRu6HwXWeEkiitFpZnhO1FO4/fUTbF96UDcbnwPs/G7m7DJzvT4zTxGYDNIPwQ6V+P7OuSvkxItfC+Rx59zSSUmIa/AMzai1cWyZGb3PUoERVxuTSmY2o07xhTw0EdZOWiE87X5jwusfPSaQ5IWtCL+Lpk/jmGmdEb7sM+33J5yf8Jw+BNyUiimr0r3SjIiauBuoTcmk+wd54mnSDmpNso0r9ndtmN7G+5HbNmtPOZtC6qXIzoPUP62dhy6XW3fi3ixX8fsUIAikqY4sEeo53cgnEaxpqVS+aMd3iI9t+7J0IOlFdl4VxTKxL9OrwLbddnPSL+I7LVkiD3b7m2dy9CRP6VHozLPqitrXqE3m2PHg/bqUUSq2k4Jpote13pJsOPTFj6O2LqkoMXfLxM0yZ+3H87DKx/bV1O8ZCDJuBVn0CLq7lTyJMMTAOkVqMtbkGPqrr3t1E2uMeY9d6q1JFyLjcbJvKm/jjBrq86ZhQHzjwljgI9YEDb4itKnl703fy0jDziLQtKq1Wo5aN6Pju7yZboGs9a637FngpPs2OKe4DybJVB/f0hVKr03WDZV1Zep34p0sml8bzvLJW//E1F0o1qgl3D++9ICJFTIRqYM0rmlMIxBS99EM8k9lqQCrUUkgpwSuTulIK1+sFnp20x8uV6XTi229/QYyJp8vF5QB9cu/oAhNRr+3GCyku15mcM+Mw0IAYIkP0Eg+scX26Yq0yBGUKPk0XTahGrBaPW2ueijDEQEqBaUycptH1q0O8ESrfjcesZ4CIV1JrCGhISEiIRti0sD8B1cA43XEqDwxpQJJPnoczxHGk1cLadd06BGLwP8cqN0NfiE7q8roQ1gWsISVDz7LeIitKqbvxNW352PUWURc0MAxDz3auSG3MVljXhVq95GYcE2glloaVRs6ZZb3SgCkqYzpRqCwWWafKODzzmi1xK8MR/PaDAtaoZaUWodWV1jIpKr/87hvuTyd+89vvWZarT457Mk5KyvnkOdrrurAsC60Ja17QBT+nKSDmZDSpkqLHz4kKUSMSu9QK+kL2VpyzZVsLjfNpQPCc6il5PGGKgSHGvuiqPr0Pnv7xJfjCrSI42R2niLVGWSut3qQ0UZUQB06WSCkySCW2TEIYRBkkcD8I51P0DYfkGvBxDIxjIARlOic/RtPE+4eTL46WhXblVu3ePI+7rjOIcJ4GztMxoT5w4C1xEOoDB94QthHqPgNEZDeP1VrJZXVNa+3FFcaeExtCQOKwF0h42YQT6loaJkJMXk6S++R0Nz6JULc4Low1r+RqzGvh+49XllwpTcjm+tHrWlhzJQ0j5/sHNERyK+RWPDqs1D7Z82i6IUaGEDqh9krrWryR8LWdbyfUM3bJXJcVDYEPCKfTifP5jt98/4O/0ffnAvTR5Fbv58re0ozLvDDPV3KtSAik2BiHgZQrtaxcPv5AWWfuxoH35xNJA2k8kZJgpUKrSKsEMYakDENgGhKnaUC3DF/ZCNeW1LKR+4BqJISIakI0IRpeXUyoBobpzNTeuakwRgQjxojIibyuFIMmBQ0VtdR1wnSjmu4LlrBcCTF5gct8oZWVprcmwVoaJRdfEET/XatuSgPXHgcN1NJwmb1fl+u60BqoDoxDwhBS8Pzndp2Zn5/REDi9uydNI9UqC4Vlqowpfi07Dtkb/nwqLVRqXfH1zUptmZiE7779QHmo5Lzw/fe/cULaL4EhBe7OEzFGHq2wLI3aCmteQIwYhDGGnlbiU97Yc7rpU/IYPFJnrWWve98m9PQFr+BZ5kNSpmHgw8MDMUTEKphr0JfrlZILKdir171nlrsmP0UvHWqldr9rIwWjRl+sjSFi6tnQSRpqK9GEgciown1SHqaImVBr37kalJSUEJW7u4E0Rk7jyLv7CUWoT8/k4IktvktiZCotO6FO4YHzlA46feDAG+Ig1AcOvCE+bx+zF+Ssb/G+NJD17fqNvLW2/bzQXnxvg/TEAL+ZTYogzsD87vonud3miw/fbFYM6/XVXtksGnrqgNzuUxRVv8FaG0WaF5r09rlam+t66+tta6KCRpc4uEGy7VXKtS8+pD8G8Ali60kPzYzciXbJhVwbpXnhiE+OhVIbuRRa9sfS6i1veMv13prttiOp6jF78cUU85YRviklXp4XP3ai/XFq8CxlCbxqTRPxWuku8ZBNEO3fBI1oSATrwlrbvulmstZtk4KABDREXzCp/1tK7dIU9usHgyq937pfO140KPvd7ia/LotwGYTs19gmAfFc6q3ZU3tudz9OPVniq4SsT4FD6DknPWLE8Ki/nFcvN1LPlx4G3zHw3ZYuU+iT7da8kjyo7ubE7THLlrohXQZDw2STW1jfOdqMm7Y/Bs9uUaB13XcENu1+2J+jmGC1Qg0EacSor557FbqMwx+/iiHBd0aagErb02NQxcRTPlLyKMjTNHA+DZ5WEt2gCaDR7zMFIcbtQ0m9URPz46bdcKpi+0Jbe4U9ffdDe8b3gQMH3gYHoT5w4A2x5QLvb9rWm9q6rndP+WiNmmsnfPSf28pCIK+FnPONCHfSqT2NIM8rz5cZDYFhOhGCdm12T/swpZrRCJgmCOr5w80FoNM5MXUpAxvZrUbOTjyG5LppRHi+zMyi3I0jNgo1F56fn1mXlcs8v5rFHIeR87v3DASulyvLsrLkwvNlpuGPcTydXNrxdGFtRmzGUptPXa8LNWdaayzLQimVkMB0oEnkOhfWZYVasCVDNcJJmYbJp+mlMq+ZVjNYQxWGIXF/f+emx3Hw9BGRXjDi8YW51E7o3SAaLKDxREgDGk9oHNEwvir5EFHCMBHruZdpbFp5T1UhRtJJiT31A5z4r8uVXDJqQus6YpXodeOhoSZQM60KjZlmbjTMqxPOupauyw0MwWU8m37azFseVSENiWEYKNXIVahdix1DwBCmMZHriAblPA2M04BEJUzKOlXuT69lo3epBw0JME0jZgPjqEj0QqPn6xPygxFD5DScSUn58P4e+zt/RCmFy/XKsnqsYF6efVIvwsPdCRElDdFruKMSBz++rXqdd5PARCKI0lojt/667KJxs4aRMSv7Y40h8s37d9zdnRGMQOtT70gK6hF/V6HmzF+8Wwjhy2Q0BeHhpDyclfMAU2hoFIbpjIqw5pVlnvtr1UtgYgrcnUdiDHzz7o5ffNP9DC2DrWiEmLyUJQ5unA1BOZ8DaYiINT9OZqhW7u4GNxAvZfdN5Oo7HuMpkMaXC7wDBw78VXEQ6gMH3hCtbcYxNwTtRHo3hd2MZNvX2z689sg7YNdPO6HWPctWQ9hJ85oLwSCaZ/36zby0lXk1COJNaSbihAJPnQgh0QxKzzBuffKs2psce8zbuhYUIYXIEI1SG8uaWZaFnD9PmfgM4mkMaZpIi3KdVy9EqY21FDRn10LHSEg+bW8GtRmlj9fnNbNc5y5DKT0hBUwCJoGcF3LNLuUozTN+UVKIRFWfXJeM9ZQFgBiVYRickMXwWYNlP3M9CcWoFapBs67HDv7hko/4quTDJ6cRjcOmCu/XiBsRESFEOpl2Ql1rxdZMtT5Rbz1GTwNBA2hDanJBUYjQzZ2teUsgbIZDn0ybxm7C69cY9PQZj7ULwUtrSjftCV27bU7WXIsc+qQ0EMfAeErkU2NIsR+zL2ioZTM++i4FIoSwrUGMNWcu1wvTMHIaJlQD0zTy4f0DOef98ZTqhSRmRkwjKQ17io4q+3RbBFr1VA1t27K2YVZ9QQVIDF2bv1X1+PfdvGqczyPv3925tCbPYI0xeS60tUaSRC0wDa/Xzqt6AcyUlCFC1EYMgfOYiBrIWRiC/w3ItVHNSCny7m4ipciHd2e+eXeP0Jivj+R1JagwxEgIQkjihDoqKQlD8mjAkrNnVtMYUqCqdNlP9Ul26uchKn75Hoz6wIG3wkGoDxx4Q9jLlAZuW+ee9GC0Xvsb1Ggh7FIQN5RtJFYQaTsxLtVzbJEGpfWJpJNvl1/4v5v0VjqRnVarKCFGkjRqNlqpnegFYkqUUmnVG/9UlXEceyKDmw6tGbTq09V2K65ZltUniHndp+4/BdVASomYdNd5rznz46dPjPPM5XJ1E6TddNOGkEujWSGXSu7Guk0/UJpxnWcv+cCr21WFISWCBcY0MKaBqMq6rJTmZDao9gKXSAz+EdRbBbFuKDVQlCEml92IIq2hITrZN9yoliZiHNxE+kVIl3no/t/bMTHrhsvOdoXmEhJtDFNFQuzpI7UbWz1qsWs+gOAfGhE1NBRC9J/1mmpoJuRS/DpprbNqAdP9jIUYAGMtjZeyJDEj0DPIBUpeaVYZLZFG7ckh3bn5U89cpGufR6S6iMWAGCEl+vVUKNkoArUshD7RHqKiRKYhYjViBE52W0SouvSlWQOrXpAjzW9TDZPm19A6Qw096cSv4XEMDGOiVSHqiVqrk/IAQ/SPMQlCQIcJwRiip3zQGiUZrSTO56eewPLTiEGYpshpipxOkXFMpBA5TwMpBEpW1kForXFdVpacSQmiGlEbSWGIvgwr6jKeGALjoD3dxOUfIWylOX45hOaL5hacYKu4eVL0xWfflCJEeV2ydODAgd8LB6E+cOANseluNx2qR1UF54IKTdqulxTRrnv12uigkRh8S1ZW10JWa6zZSWUznyR6CUpxUtF8Ui3V0BjcuIYg2joRDAyDIs1Y60KpK6JwjoFhmrBloc4ztVZijEzT6LF412fWvKJmhNZcO302okZWW3m+PPPx40cul8urko8QIuN0Is2KBM/9vcwzf/6rX7l+W1zK4oQ6ICHRUOa1oNpYlsKyll2KEFRYS+XT4xNRlYdpYBg9jeEUA0mF+9OJ+9OZIAKXmVqdUKsmVIwhDozDSEqBpIEoSm2Fkj0pI6RIGgcncLVQWiPEgWq+qBjDyHC6J41nn1J/CbLprn+nLKfHsTVrSO2a9k7qMEPTQKuFWgt5WTzOLy/kukIT1Pz3TRIaBsyUmHrVtBlWa9fYN0ped0Lu3LcX4PTdi2FIFG1ozj0SwrxUxjwubwzBGwgvF4pVaj0xngI28GqzjYhwdx757sMZKr5wMyMEIwSf0Nd19d2PmiljRC2jopymSK1KqwNRvegn9ql0aUZpLqOa5yulFIJA7CVAaMPU853nObMae/RfCMq7OPHubgQGmg2YedvmmmdShPMo3J2EqIFpOHn+em9KBIMygjW+eX/prZo/jZQC7x4GPtSB82liOk2kELmbTqQQfeeqTNTa+PHTJ54u1aMEYyMojNE4j92vsBitNIYYOJ0iMQakZ1xrcNNjDL2u3gQzpZbmay4MCQ21hoZGiA3U5SIpvbYYPHDgwO+Lg1AfOPCGuDUiyq6EuBkQeUFAuoNq/8UX37LbJ7NbI17tZMK65nJPEdlvacsBu926b+ErYY/x8xveJQ59y94zgkOfQNvtcfemvSYvnoe1/njqXpf9RchN6tAVL9TWWHNGSiWmgbRLJ26Si11Tvt+69Cd0MxrWLZZtN9BJzwkOPXdauiHPtl9lq2wWBNmMev1OWvXnFvoxM1w7baI+VXYBgxNl2arAv3JBfH6WP/sv6Rr2LW3Cz4e54bAfjxoqjQri9y/bY+grNCfsL7Kt20aKZZetbEbYHXYrNleRXu8t+wW3nYX9WFm/Blpzg2ettCqf3+ZPPOcYlHGIWPH7c0INIfgVm2uhNCe89JKT7RxtiR0tecNkGpLLPGpDq2epF71lK4d+Ke9pIs2QFzsbIm493K4Rf5KxP9+CbZF7sec6d232nvMc+pEPAq31RJgvn/yg0vOrI8PgE+4Uwm50tCZebV+r505vk+bt+XQpC7aZB2/SlhDUd6v61zcz7RaOQ+ubPb/7vS98HDhw4G1wEOoDB94Qy3UBtjd3Jx3LslByb5XrHGQjyK01ljlTSkWkoOKNbmtpNOvV1bW57KP1dj5ANXrSgCph8NbATWfdACmdbLJN15Shv6F7SUmhlJla3ZhlNEQ8H7eZkxkJAWuFlitG5fL0TDBY1wUxGGNyMvzKtvG6rjw+fiI9KWteaZ2w5er3l8bIeDojuYD+SNkKWbRrd1WJw9AnrwWsubZ3iCTdcqQTgwrnpIwqRIF8nalmlGWl5dKTDZx8t6WyPq9YClhWWhBKLazztZeiKCmNiArDmEiqSEroMCAhYqI9peRmIv1JbCuiF6Ru//J2KfTCmAY+YkT27GzRiEjwTPIQKRq8aXMRjEJIxnT2whtQb1/EiOJLmLIuLPOlxzQWT6nAF2i9MM8LU8xQ9mI/tBnaQHo8jJgwxJEoBg0+/fiJdWlcL/MXl1IqwrvTwB9+uKPlxnWeKbUwjonTyePaWi20Wnthiscv5nVlXTxf/d3DRIz3/dj5QiLnzFo8I/1u8FZI6ecWgTCdCHr22Ml5odVK6pXhQZX7KTBqRdUTMkQUzieMgZQiv/z2HR/e31Fr6ebQxnh35nw+++90SdXd3ckTM76A6TTwy1+84xfjxDCMDCm5LCkoQbrEqQVqhTVHIO3RjarKdAqMk+/cpBypFkljICRB4+aFoCfU9CXni10xgqKDR6/Hqv5as0Cq3jgZQk8aOXDgwJvhINQHDrwh1uVWwS3iGsn5emVd1j2uTUTdcNinfuuSybkCGTN/k24SMIJv+TbPrN4+uxY1kDqRjuOwT1TdW2Y7xfX3Vo8Yi9GncD49r5S6dkJdgYaKl56oipNIVYqI67VbY75coFZqKV7rHRMxhC9PuQxyzjw/P5Ge1SPS6CbM2uPKNDCMJ0xyJ6p9qhoUjZEgt7a7db5Qc0OCkmJkiMo4RqZxI9SBQYUgUJYFmssKrNROMnwyWddGvmYsV0iKRaWUzDIvmDXSMGJdLz4MI5oiFiItJtCAdR13fZHa8sUDsDPnbUdh/85uHEX6TkQ/YyEEl4BYIwSvJs+iCEqrpZe4uIZ2OCnWKqU2n94KjDESVFjmQDXXyFvu8WmbMRY3qXqboeulnUz34WfrpNu9k6SYQJW1LDx+emReCsu8fNGQKgL3p8Qv35+oS+VRCznD3d3Iu3dnXwD2SMnaKuuSfZGyrqzLMzFG7r95x8O79z2T3SVP66qsqx+w1lz/XWshlxUwTqeRaZpotTAnoeTMmCKncSCIMqbAIM3lFUMiBM92T2MgxsgvPtzx8HDmer2wXBdKyaiMnE6pRwcmoiqn87SntvwUpjHx3XcP/HI87eZPMZBtMdPPtZcsRbCN6Lp0ZRwDaeyEeg2U5oZQ7bF62x6D3GpNbxtU2mMKzf87dp18NCXVbkpUXLd/aKgPHHgzHIT6wIE3xE1P3GUTzfZ8ZAxM3ZxovZilNds//BecorWeQtD679auofZh5+dvgtZaL/br06lti75WDO3b6EBzU2KJxtOHTHnnprV5XmjNS1LG1HWl80zNmZoL+TpjrTEOmTEtrl+9Xqml8PQHKy38NKkygfld5vs/uRCflOfr7DFoSH9cQnt4prxL5Jx5GheuPxbqkOF+JoTscXPqC5O8LE6eYsNGIwalnRvzlEkqPHcN9QCMKtCM9flKnheXEPQWxB/fCz9846QjJSUEoZbCsnqayPmhcn7ISAyEaUBiwDRgnVSm8Y44nvmn06941PmL18JFZ/7r9C8ZLX2WIrKdK7p8ZsOmenF9vV9D5pmKFBaKrlitFL3QSoFWoRaaVa7hmet46YTaJS95nZnPzz7hzplaCi8eQI9RFFoxnu8X5mumlMbcY9bWWt2sKOLpGJ1Qz3lhSYXnb8otOvt3XwdqfPyw8N/8nUdarjxfXe98OlWe7lrPv/YlRa3eytha43KZebosBC3Ub594vOsxkLVhzcglk3PepUcAtRZKT/GYpsY4FFqrLP0aTTEyDQUVr+ZOPcd6GDyHPEYlpkCIgR8+wPk8s5xnPqaP1FL4zXv48L66GTUEgij/8vyRVetPP3leyE/U/RKxR+xp25RLLiNqrTKkwBr99aB7JnrPpMf6derSl+068iXz55n3Amz/Z7sN1NAgBALaWs8Dv2WuHzhw4O1wEOoDB94QtW+rb5pTa0ZeVo+9CqFPXI2yZpY105qRS+sFKbJPD2trFPOEj3XNrLnuGl4RL2Cha4ldxyx7rJ6Z3/46Lx7bNkTXAJfMcrnw/LDyj/+jX/Pn/+En12fX1o1x6uZD6Ma2jZj3tr0ep+ckyL9//ZDJ5y9sHQv86r//xPN3K1KE2o/J/k0gxh+I8U9pZszzzJozqldCeHrxpu86762eXGVLn+j61q5ljuIaVM9owH+n+sJCuuRC8Pr2YYifaUzNbuUfIURCjxeTfj+2CVQFP6YaeA4L/3T89RevhX8ef8X/6v3/lnftzMvp9AbbJ9efHzMnXP6cd01+a3tSR2tbmoftP1O7fAJupTatud55J5/bbX225nNiW3JzzXrznRDslmnebxTwCvhmlSaNT3+r0MJPP/c8NP7L//hX/It/8LEvKvu56/rk7Zxuj8cLjfz1U2rtKSE/ErbK7/449gjKF6YD40auPUpP99eGmfXr9haNqAAbed2ugR6duBHX1hqlrLTmcXYppZumXOD7dOX74frFc+8mWq8oH4fewgk+pUYYhoFxOvXrM9PaersUxKfHucx+HMZIGu8Rhc3f2tfNf4kUb6/PjFGqJ7ykITHY5gtwmp1i8Of/xWdw4MCB3xcHoT5w4A2xEcaNiN6MXN55Z62n49Ze723mZrgXk+09V7hxm063Tri3TOkXRjOr3WCGT8Ct2W4eE4RN5exT8cwqM7/55Q/8y3/w27/eHV+By3eZy3f5lR/6KVJSgOWv6UH9t4dHvfBfjP/kb/ph/I2gBeO3v7zy219+mXR+HX+V3/2bhbBNqG03Qm4hdSJCGiKn00itlWHwjO+Xr2nPsC++yE2hyzzai8nzy5eu/95tIcZuXBY8b1xFPK0n+ArIjaiH4OPAgbfEQagPHHhDlL6tvk92zbOgU/Tc4xQiqkrR8mJi9eKNzd8VEXOCrCIMMbAlS7cu+YjqH54C4lM7MUG3aWSttJK93KMULBo//vET/59/+BueHmYef/nffcJ64MC/qRDpFenaJ8HdoFx78oioEpa5/1sYp9FlTV3O0uNpoFeIx+QFPI3ertoKtbV9Um0vUlm2jY9WvU69Se3xH7ZLPrRLig4cOPB2OAj1gQNviHV1omrtNjXaKqBD8NIRFSFr7u2Gm5DD9rGWAGpOliOBKUEKvhWf+7Z+UtcEm3lzYcNQE9S8cMNKpq4LGhotDBiBP//3fuS/+E//JdfTSp6+rP88cODAXw2iQoyBGD21Q0Q8z7tkj5vs4gtB0Kic787kkmnm3opNhgSQUmScBv+eecZ4LoaVtuVq+q2JQp+Et3YrfMJuiR4p+Vu+R/IdhPrAgbfEQagPHHhD7Fu2vxOXpj3KbDMdvsz8/XzrdXubvU2vVdQb4GjehIZPr2VPbTDPH+4thvtt9rxh6VrbMlau7zPzVP5bORYHDvzbBG3CuURSU+5zImxlM0j/c2D7R3shyRARjy9sur1wu51wm1KzZ6crruffc8N58TfnJkv3r/cv7X9zuElC+J2vHzhw4K+Og1AfOPCG2Gw+bvjZps24SaoUrjnvcXJbRXQQn2gZ0tM+DKtuCAQlhQiixNrI3UQm1ijr0lsTPSEhjSNDiAgwBGWKEQnBc289hI9jm/fAgb8efDeP/M/+xd/j3/34jr//+I5v2pkYIs3cWLwZLwXtxUChmyUVi33K3A2/3pQZQIySMzl04h29Y1y5GYdl61ZSkLjptCEGL67xjPPmpuUXhPq1Yp4DBw78/jgI9YEDb4h94oQQtql0vSVyrOu6J0qIbYUMrmnczIjbxNnaVrYyoBqp0tha72rzuvLaGmV1Qh1DQPt8O6kwRi9xUcElIRwmpAMH/rrwfh34z/70j/gf/dkfEVSJmiDAsq6UUl5MifXFh3jlPFBK7tnczRNaWkWqUWumFp9iR+nReYB1PfZWVioGbTcbyp5WsqedmH02oT4I9YEDb4uDUB848IaIm4seUDadot0kILZNnm0n0daTPazHlm0yju2tz1r1CLNOss365z0+rRPt2jxr2IBWEWvd4Fjx7vBXmtEavPs48vDDiKI9GUB7fJhLRFTD/ia9rJnaW+60P+famhskub1Zh+BmTIDSk0esGaV43N8tV9fzhGtrqOiuO73FneELFBFij8sTEYYQSKG3DebcFyGb6Yp9IH85VX79yyvz9NPH4O458Ae/mRhzf+4h7KU5IQToBrNt+x0RLrryz4a/4GO4/PRtlpE/mX/JfZ326Lft2GxmtBBjj23zieXuMsPNpq0U18mX7Ofhd6LvNrPqVtUOL6LlrPUovU1a1CMHwy0yTbtMoG2V9s2opfTa980HIPvxaP1nmhrff7vw44fVL/bfQWjCHzzf8d31xFYlzvbca9tlT7tKYZMvNI/rc29A7ZGNW+SgEGMk9mjInFdqbb2c5nad7B99l0hVCdHr1bfXVrNGyaVXs98etwYnuvBSHnGTVKgo0nPRay09ls9bGP/O0x33l4jlShXD3AdIKYW6lQv1OMRaKnnNu2FRxXenNCihZ37v8pAeOwhGyQWRbjjsj672eE4A7UZFxJM8kNv1sF0b2/N6rTr9wIEDvz8OQn3gwBviNCSgk+Oe39wpkOdFN28dDD371oBWqhuLaqPm2km2oijWpR2Gk57SC2J28mqG1IqY0fJKvvQs63UltNJJdJeftPJFxUdowr/z//iW//j/+kcMNXF3d0caBpZ55enxmdYap/Md03RmWVd+/Re/5XK9EIeR8XQCEa55Yc7rC6Mk3J3ueLh/D8Dz0zPLPLOumU+fniml7OS1tcbj5YllXb2IY5y80CJ6pFgQ5Zwigyp3Q+SbaWCIge/u7/jm7kRbM9cff6QsM0mVMYQeFegE7Z/9yRP/u//5v+JP//b/j71/6bFky/L8sN/aDzM7x90j7s2bmVVZVaougiAlka2mmiAJSAJEQQI0ECAJEDTSJ9Dn0RfQUANBgEYSwKEADgSQgh7NAQn1i/2oysrHjQh3P8fM9t5rabC22fG4ecMjq9tbzWbZSnh6XA/343bM7MT57//+P34c/P7JX5z4n/9Hv+APfnPidHfmdHdHHgfe//xnnB7uiHkgnU6EGJHoUpq/O/yS/93P/q/8J+e/96OP+d+Yf8r/9h//T/m3nv8YbUbtwKbUStVGHgbu3t0TUyaNI2mc3EPWr2spC9fnR1otPH78yOOnjz3fnF2fD96It5ZGKW1PimitUdaF9fqMmRJRoihjSry/Gxl6CU7uwK2ujVYay7Ly+PGJWiu1Z0KHEJjOfj/UqlxLYUmN//h/+Ev+7//9X9HC795UY038h//wb/A/+od/g4QvfEKAuhbKvDjAU9lLZuj+ulqVtbgx79PTlXle2eIiJQQe7h94eLin1sr3v/kN18uFcUjcnQZCFHISYuJW4x2FaRy5uzv7wq156UtZCx8/fvJUDfX0HBFhnCZSHhDxQhZfsCiKeuLOmIkxsq4LT5cnVJVpnJjGkbFG/vBxZF6Wvo7u7aXaaGbupYjRAXlZWOd1bzIM0dtAc87E3myopphCqQURoxavZnfTYSPgRsfWAbv2e35bkOZx6PGcfpJ90dT6c/MF0jHHHPN2cwDqY455w0kxdt2iA58damyM88ZUd6OiJ2R15npjnntjgydd9XKVjUXsTOJW8nFjs52p1s4miylhszaZdp3ll7d4xYR3H0b++B+8Y2oDDw/vmcaRy3Xm44dEa8r9/TvOdw9c55nwT1cenwLDNDHd3YEIT+vMddN194ztd/fv+eb9TwD49DFxvQzM8wK/bZRSiSkSU6K1RntckUUZcubuNPZUlMyQEykEHobMEAPvx4Gf301MKfKH37zj5+/uacvC06+Veh0YQuCUHFz4OYMWlWn5MoA4XxJ/9o/v+NM/P3P37h337x4YThPfhT/ivr0nDiNDu3emNmUkJs468q6dv/iY923kv/38R/x7H/91bwOsvvW+1EJplWEaeS/fksaBrCcyZxBBzdnIdb7y/PQ9pax8//2v+fDb3/QtfOv3zc3wNi+VdW201liWxQH1cmV+HjBtJGlElGlI/OzdHdOQXBbUoxfXuVDXxnxd+PAbYV39GEuthBi5e3jHOE6spfK8FC5D5T/773x4UaP9+UQTfvF0x7/9q5+S8crvIEJZVpbL1RGsP00H1X2zZS3KsjZKbXz/IXO5LjigdgD4zTff8M0331DWlV/9svD0KJymzMP9RIqBYRBScjA8jJEYA6fTxLt3986w14LWyrIs/OY3sCzrvjskcls4hCC9mRAH1OZM+HQaSSkyzzMfHwPalPP5xPl07rF4jaoVM+kFPC632nYkQPp16ykfm7/B/N4MMSAmvrtgbX/9t54pb41tT4Jt52v/e3HmnAChny/rC4VbM6chYnse9THHHPN2cwDqY455w0l9v1nN2LI0Gi7TEFNv8hNn0FIMqEGyiDT1nfPU8XZISMy9EfGWOQtgJr3RsLOUfY83xkhOCcOzq2trNDXWpoASeEXyAQwpcj9lpprI0pBWyCinHNEYyFEIKCkI9+ezM1wv2tfGYSCNXl1e1b+WYqa20rF839KOkZRST/wy1nV1+UcQcs7knBnGgRQjaU9H8Ua5poImQWxAnMMnYJj0cx8gBXpjom/7q3j98mu9cF777PKVGCMhpZ1N9LN7+7CtMj5X7BUZTVPlcrny+PjEvCxcLleX0JgznqfzmTwNjNYgRsIw+u/rhylBRGFVfQABAABJREFUkBgIGhnGkel8R2uV5bpQS+U6Lzw+Xii18unxytPTldaUZXVAPURhzB7O2JZndJ15uJt4d8rkFDzrvIPJ2ipNG0YjpkC2uGchh+iV2ylGmkGsSgz2qmTAcInPvK5YSL1+O74oxGY/r2pGLQ1ryrJWlrlSmy8ug4jHRa4OrJ/TMyFEai3My9rv8dSrvMNeJR6jx9bF6OB1XRZEoHVAvZbizy0IrXmJkohRVmesJfjxirDH1Tmj622KpVSsg+BWjXUpnY3WXdK0rm2XWlhvZow59lZGj4Z2DXXs+dCG9S53l3lol5fsG037a1275EvV9gWW/3kzPjoAb5u8xh/dddkIodemH7KPY455uzkA9THHvOEMfRu19sZE7cxzM9c0JzE04GUNvR0NQINQw6bzhJAGYsy0zkrXavRU2Z112j5S8rKYGKMnggCluWGxlMrj8wXMGcrXUj6mnPjmPDKUhGnDaiMDd0PyEIHoOddDFN4/3HE+TVxL4XGeMYPT3Zk0TR0wOY+2LCvLvO715s5IR3LOmLlha1kWDC/AGYaBcRg4Tc5Q01wiI2a04mU4mgOiSuhGq42Jz47vO6B27a8F17LHeAOqPzaeoOBsecyJlNOub/ZvcJAexKjaaK1Sc3nRcPm702rj6emZDx8+8vj4yG+//94ZxAgE4f7dA9P9iWYKKZPGExIDMYYOuvyaminDNHHXpQpraWipPF4u/KM//3Ou15m//NUHfv3bTztDra3x3bfv+eM//BkhwPOH33J9/MB337zjD37ynmkaPWqxlw/VWns9uJKyIBI74IMQE0PODDmjCDEqLit/RTJgxloq12XBopKHSOhLOkV42fZXmzIvK602lnllvqxdq+0Lx6aFZZ79tWD47oc2rvOVUgrjmF2DHrd7y6Uew+CA2kyZ54szyLU4qG4bW+uAe0/XWVZqaf115fXzTRtN264hzznRVF2yQqBWw7T0p+3HuCwrz09XVJ2ZluARenFIHfj7PRliIOWBlLebUzZPsgNqFVo1Yl8kbnp1be5tsA1Eq6Gi/WcMTDBzzbj2HTFT6/KPA0gfc8y/iDkA9THHvOG8rB5/aUTczInbe2LYs2Vd+oEIMbhL38zBigMWJcaAmTPBLgfYphvGNvarf/jurtNZTejJH687+gUHozEKsfouvJong6TokBURhM1QKbuhSgCTG8sLvpu/mc60670lCHEzPHamenueZobEfh5i7Oat7Wn2cxekM9IbuHVWccvbDtKZQOnnAcE2PCyfP+SPnoOua78tVrZff7t+rv3dTKSvL1CaKtd54fl65fk6c12ciQ/JAXOpzbXmTTvo2cup/X/dxObsaySERIjqhs0Q+4f/uZmx1krrMo1Nt0t0IOdSlf4Ru+nTtnPLzn7KZmaLft1CB4K3dcXm+Hv9XG7nranRxBd3TTt72pGhm3C139e2Gx6bqrOtFnapk+pN2lBq7Vpyh+Vq/jObbIKwmTz92PefN+33ov+uDdJ/1jC4GRdxQAvi5lDzHPhafVlrnU2+LQtkNxBu7HJrfoxi3nyqJrAlc2zReT/0LfuJc4Cs3IzLChY6UObF13ajK91cqv1+uWVeb8/StnsZPvu7Y4455m3mANTHHPOGc/n08fYfHYi1Ujx9A8+cRoLLGWLsoo1Kaw6oU9jAq0feWRCYRpqOrKVwmec9CktrlwrkQELIAkPsgEwaQkNpBCpixdM+vjTizO6UhNygmNJMSSEShgwirA1Kq6BdftHUme8gPdXEtdtqPdHDjFILtTl7N+SBlDIxrpRSKbnujDUipCETUsS07ecsmBJMiSEwDpkpRk7TwDRExhxIKLSCaCVHiDkwxMSUnV12eYWRhvgqKydBSNkrnv2zJ0MYjdYK0gK1ri43aA4Utac8fPFeuM78F//wH1P/wdwBZUOCME0Dw5CIpTGvjTg0JhNCSsQQb+BVIiFmDHFT5FAxCeSp0CTyjsAfx4F5WXguxm8eLwTNfr3MuP/2He+/+4YhRd69G7H6He/OJ7756U+4O09QVijrLXUmgMUe4dh8IRekOEBzh+eu89evADIzWKtyXQoteNV2ToUcE+PpDGbMl4VSV6oaRZXalKUpS3UgWmqlNf96Nb+fdF1Y2nYfO+JctfE4X8k1kqYHzsPgspUpkZJQ15Wmbpa1LQJjkwQJvivQzZ0SIiIBrco8rztA3eJQ1jKDQEyRYcie/JISMWVaa8zXC6UUamm+udIlNUZFRChtkzYlTAaXj1do1WUcpXpSTVPfMQgi5Njcoiwg0ZdcrTq4f5nu0pp/TUR85yRvF4Pdv7ElfhwM9THHvP0cgPqYY95wlqunSIQQiJ2t1VqxbhoK0YFd7BpqM7AQwJRIwGLqTFJPALHAMCR/Y8YIq28Jo17+EDDEMlGMKJC65lfFlc0BRbrc5GssdZReaR5Bi+t8U4gMQwf3S3WGTntObnNxZ9yY4c0kZQ42a48W23SbKUXGcQBgHEdvgOzUsQRhOJ1IObEsM0/LQmuVRDdhBcgpMuXMOCRyjuQkBDHQipgSAw6kUmDsgFrMmdoYbyzrj41LG1x7G5NvyXs+sJvDVOue56tdc6utvWr0nNfCP/3Vb5B/Ukk5M0wDMQY0BDQIY1XWpuTmSSQhJiSEG91IJIToOxYxEVImIsRhIBmcYyaOJ5Zl5R/9xa8JQ0ZUiXi5z+nuzPnhnjEnEiORyt3kySLTkNHVl1ymDZqz3ATZddVmLi1gZ+s7y8tLhvfLU5uyFMVCJS5CbZEwJdJ59Oc4FxpQDaraiw+lNWMthdqlS9qNubVWtDg4zUMkBqGaMa8rVSPVDMmJkIJLd1JAtcLCC8+B7/xsN4Rf+20hGhECTZSydlAbEyEmDGPVQjNlGAZiyv0xEiFkVIVaG8vii82upqGZ7rKLoNp18oHQNVxNd2UTZd3i+Jqz90FoxdDgx9v6LldrustWtuugareIS4l9cfZyp+cWoeexf3IA62OOecM5APUxx7zhbG9PLkvw/wquReia2Fuhw00esuk5+/cSdr3oyweOMTKNI6qNpYNXZxF3uyI3CUI3lIknjwzBWd6vvX26r09IOSHBSGkgDwMQuK7N49T2vGln1C7XBQWGnhHdVLmuxVnZzRTVzWW1NWptPVe59Ozp1rOvg2urtTGOI9oiYwwMsWdPdwlMwBcOKbjhTtWZ7BgDQiTFgEQ/B1YbtZdkvMaobnKV2OUY0t2jL7Xq23Txx27G/NIYRm1GaUoYxAFxjoznM3d3U4/mG8lDRmL0+0C2/HE/BgdyQkyZmCpIYDqdiSlTm5KGRh4rf/iLP2QubZcaCfCTbx/47ic/IadAtIVghSknhnEkp0htFYtdStTlEa67vUkDtq+11hz46U1m9DUwFmIkpowYlNJotZFTdhkEsstW1ArPlyvrUmhV98Xjnr1uYOL3bgwOFH2UZkBrSDGyKWttlL4IqGqImkstQsTBdMX85eiPj/cubbnbm+imVqX0ezWaEMzlQ0ropmNY1kaMRkyZbP1xLPTFcEA3+CsR6XXirUuGpBmhKmrCslaCFJo21nVbgN4iN0trSNmytv31rq2bEV+YPE1BushauzFS2GRM/ZqE2L9bDtnHMce88RyA+phj3nC2t/oksjPUkhIqQgjRwZOItxx2yUDtWssYvWZcJEDdSi1g016PY+Z8HjEzHj89chEH7V5GAaCY9mwRa0AjBjhPA4nEkNOrQuItRCCGQBpGRCIxDaTxjBl8vC5cl7lv0Tuz+Hy98pe//p5mynldme7vqK3xPHsCQ84DwzAhCGutVDWWeeFyvVDWsoOWlDI5J+7uToxDJEfBtPEwjTxMI7RKffyIrjNJBk5DYkyRQKWuK0lgGrxJLnY9umd4ryzrwlrmVxM5JAhpiKQhEXNAonSWuqd+dBC3gZcGX8lMccA218ZzaaS7SL47M44j3/78Z3z37TtOpxMP37xnnEZSzp3xdwmC67kTaTgRTTFxx6WaMZzv9q3+2vzz++9+xr/1N/9W13v7kaVgjKHvTNQL1hYSxkQjYBQU6uo7JF3H3cyTSzyGzYt5mhrLWqhtoUlEQu6Rcq9T/ikPjKc7dC08Pn2ilRWRxMN9L+mJmTRCfZr55a9/w9PjE6fxzHm6c2a3y0DMdRkQhGGcGKYJVfV7qK7QlOvaiFG4mxfu10Y2IxQhW9cdp9GLjiyA9SxqE18ctlu+u5mCeWzg87VQa3PdemxICKRxJMRIacbyvLi8ImTSILQmNIsoiWZK6Rrv2M2STRvLunpqiTWKFkJotCbMQ0WtUatLcFIKpBhchkNlLY0cI6bZWflq1J4vLZt+BUGIYFDXRl3bLi/xFBE3/ZrhC6T2igTsmGOO+SvPAaiPOeYNZ2OLt/YzcDnEFpu1NQBu27VqthusQrDdpHhrM8NlFEAM0t8QjdyTPYK8aIfz37b/3PZYMQRiN5u9zinenGkxRCR40kVMLjkB10a3brCyrpV2kKCkdSWWgdIr1mtTRCLD4G/7bdu2b1tpSHVDXm9/3AonTCM5J9DANA6cThNWVuaLUMVZ9xiEFKTnazfoC5a9fl16JXOXbBi3+LAvPXO/Pi8Y6f7Zr9l2MQTbwpe/QvebbeZOIARizqQhM54mpvPZgXSXDoTOFFtnl63/Ljdsyi47EPqiTZyFzOq/I09n3r3367+bJdsKdQZtWBGsRoI1Yl0J2mi9MVHN79Xtd27MpW0KCeiNmQ2i7Az+1xhq6TGEJq3HyJWe0GG+gyAusVDzVIzrdSaGzDQ6CN4snx0TszU2pux65Y0p9tdRQ3GNclGFJpRmSDDEtlSLgCJs4qfWr03bXocvpC6t2W6kVBECbiyMhj+ONUpVRNg19c16uo1sUZLd4CjBGfL+umlbBrcYMXg+uYhg1rou+pbEYYDULQrPI/T8etgtYcZvmP7vgF+Tpl7yE6KQYm9thN0I6Ykur9+/xxxzzF9tDkB9zDFvOGPOt/8w7RFYbZd3SHX9p25oxYx1LaylkjOEMBEjGB6r11S9AbF5q2DOGQFy1xE7i9hrumPwFAcR8jgQQmBZCuunJ1o3Cb4KKkMkxgGrgQ+PF9ZaGU933L/LmAhPS+HTvNAMCtHBgUTG+/vOugnl+eqgWX2bviksawXETWa19fILZx4lRlLPD57nC+B53aLNcUItsEYiyvv7M/E88M1p5DwmhhhIrZGaZ2QPY2SIcdefSoDTw4l0N3H3YL2B7kuzxSYo4QVoD1sudAh4dlkkh5EcEuP50167/mOTh8y3333Hz3/xHd/99Cf84hc/ZxxHfvazb/nm/T3DMHB3f0fOiZwG10/Ltk9A/7PnEzsQirved0+lcOUPtetwt/vO5S4BKt7OmQxq8Er64q2ZusysIru21llL18m32tBGT5vY5Ef9eGSLy9uO9cfvKtOAaqQU4/Hpynx5ZhpOPL9bSCkhar0YxhcMMWZqVZ6eLj2pIpGGsbcnuq44Dm3XnEtMxGw0rWhVDOFpLvz6wxNDjqx1ZBiityN25rcsK63UrvXfpC0O7BF/3WEQhoHxPpDVmOeFy7wiQWghk8zlWls05mUppItHP1Z3LAIBMV/ASk5IipgJq8JajaCNoEYMgZAHYo6eGV/cnzCXisxd3pRC32maGPPopkmLqMZ9sY1542Ia/N8HXRe0VcQiMnjr6q6FN4gSbwvDY4455k3mANTHHPOGM/Xq8brFe5m9YGFtZz03WtnMnJ2bZ8YRUj4RFVJOpJyhNdoyU0phmiaG3uI2DJk8OJjbWO/QEzNiiEynE+M48vR84ePzhVbtK4yUa1pDGtFF+f7xmU9PT9w/NGy4R0Lk07zy4bq49lQSRqBKYLx/h6ry6XLh+elCCIGUR0IIVDV0ragal8uFZZ4J0rezuxkxBtetztcLy3whx8gpJ1IQrAasCDEGfnJ/xylH7nLgbowkgVB7zXIMDqhTpDVvahSE03DmPg08vK+eK/za2JaS3MH0y2sVAvTK8TSdSeOJafzoxrQvzDAMfPfzn/GL9Rf87Gc/5U/++BeMY+abd3fcnUdySpxOY9d+94/PIulcMwue+CE9AcQLS0L/+85INje37S16BrSIrTiDXwVpCVpFg2ItUFLaNcMboK7VGyxbbb6+2JMq/Hi2Y9rPy2un04TWAmuBx09Xnp4emcYzT+9nz7WOkdylCDFmYhooVbnOz8QYebh/zzScaLayXhZaU/LoZUWGa9JTCFj12m7D+HRZKTwy5MhSK8OQaGVhXa6YNspSqKWQgvsRYoh70ZCAR+512c1pPGMmLO17Lh+fXZcdClkFxVNbECHOBcLSoyQDEgOIEcSbEiUniBFVWJpxLYqIEcR1/8MEg0WqNubiOwGtrdS2IBg5usG5PcD7h/fEGPsi3XPsrUfxxRBJcSIEcUNlMSQZYoFAfHlbESQQ5WhLPOaYt5wDUB9zzBvOD7fBd2LvhyYu6WBJtANrd+4vSyFGQwlkiX3rtuftdtCzNbRtmc8vjXOev7v9rluu8Vf1CfSt7s3Ipb49XXrpBiGwFtdAq5mnQ2C7tpfgzOVtsbDpjT9nMa3/nciWr9xZYLZKdcO6iSqIgCqtFoxIkIEUxfW3OHgMwcs/YgwvIvgM9STs/Wsxhd/jHOyXas/Zvh3ri/MrWw50ePUhY4o8PNzz/ttveHj3wOl8YsyJYRzIObs8ZcsbtxdNjvI5A/3yGPql2k2s29dCeHGebZO8BCwGD7QIAbph7iZnuR3+xtZuOdCtuZbEdDMp4lpku33v12I+tuY+VdslOaZQSkUQcvD0mBBi16onzBrSticddslNCNElFHTJxPb4XVbT+zI9WWQtmBlrVSS41njphk3tJsWG0Ez2SDlPnPb/WQecIfpiSWLy3Yn++13G49IRzNNM1p48EsJNqrG1G2pTN2bWRrUuATKjiaEItXm6SevHtpsMrcvF+jJpMxqW2Pbzaqq+m6DagbbrxLc87FsGd2fiuV22I+HjmGPedg5Afcwxbzhb6tnG+rl8NtxSIzoIdk1sBxRdHzsvKx8+/hID7h7ecXf/gAHVPC1gLZVPT09el2zGOJ162YUz4RICaRgI4lrRUnuFM3ydUTSXZjw+L4QZVCIxT1zXxuOf/5JmxoenC2tVmhpzcXNiHEbylEDcsDX1HG1VQ+l68OiseR7GHq/n+ucgN92ymXlecKtICozZ2UsrK9d5hSEj58wwJqI1rFYswDAGznkipdhZX2fvqnoTo8SMSCIPuYPOL88GWmOIvSlxMyT2uvQ8EFImpMG39cPrJs/7+3v+5t/8m/ztP/tvkXNkHBIhCFOODNnTFsJ+WTb218+X9OIVN8kZISZST1cpdUXXRkqJIQ97RGOKXQKgPc4vRYTs2dFWMAuoii+FOiD2Yh7Z2zhLacyz54SLumwBhGZhbzjU0qhJu4zpC3KPfj89XRbaqpxOD6Q0ICHx4cMncsrkn37H3WliGNd+rwfWpSCx+HPKGUmJhHB68IIWQuS6VpStLl0d4IaMYTzNlXZZvD0xDZw0sC6V62UFM8ZhYBhOmAhr10UnCwwWPls4DWkgn84EiUxrZVpK134nWgg9M9pXF4/Xledl9QWmevpNzgPTeELEzbhrz22/rpWq7FnyITRSXrrURDETkASR3R8Ro79eGsKn5wtpXrwhVF1ONl99B+t8mjDz3ZzlurAuBU3KmrzR0xedt8X1q02XxxxzzF95DkB9zDFvPE4Ob7Qefav+JvPYgLW337G33ZVa+Pjpk2fMEpCQPPEheetbbco8zy6piIGUsr8xqzqz1019m0ygqXpMF7/H9jy9AnotpBIwIhIzZS18//REbY25KlXdhDUXB+s5RGIHZjEmcgh+/KXsEpfQ2x9jSmSc54uytR12QK1Kxbohy/z5xYgtV8p8JVtDtJHEA8nQhgEpjoxTJqfI0D+rRaKGfvoj4Oz1Vxm5bSchyM4cv2Sm47YIipGteOc1inoaR/7oj3/Bv1b+NbQValmAXpEu4EUbdT9P20H4zoWz36J+dba2ROuV1K05y0vy+2wzvLIFqalCr+PGBA3RWzhFbvTnCzC8hYO0Zl66s1aESOhbLNqPR3cwqK/WrmO2ZzJLM/IwkWJEVLlcZoZU0QYhZlIaGMaJsTYM191D6AtOL7wZJKKddV67H2ArDzIRLEYUYykr87JQm3H/0JCoLKtyWRpgxBwZ0thNiV10bt10SJf5IFiIxMElIWmcSOPk7H0/VyouDlIztNTdJ1FbwUyZJkXiiIhwmReuq0uldiNkM2pphGDMayXF0iMuN0lN/7cB9zNK8N2e67z64okeUdkal+tCWVcAN7rGSFm9XAbDk0r6Sn+TDe1i6mOOOebN5gDUxxzzlrPJMGIiDrYnPWw75BtrHfuWtgHTdCLEjITEtZenSAyUVglExsHziwX2OuMUHeCJKBpdL+xxX7WDVAfWZhBDIiVvdXsNUq6l8PR8Ia8JDa5rlaDQt9O1SwHUPM824nXYm3K3NmWt5ZYQ8WL2nOfY84SxF+sLR9cpJYLgMV8heNb0OJKDcBoS05DJMfayl7rXoo9D9jzuKO6Z68e3pSqYfnU9sR0l4AuRUounO7SGtIb0hQtdEsPvkeHr13vLwFa2mvZd/rLJXLbz1bc2xOx2nfrPhBA83o5u5NuOod9PFowXDw2dfd2+Zpt70V2yPa/6JnPgxYdtWcovTHs93tjvg16X/urzFyHFxDiMEJQgDW0RLSt1aR6fuBau88JaKxJ9B6OpUGu/XzYzX1Wquna6qudMq3m+t6o6uG1+Dxb13ZVqwvO19HIVJaQRBKoFrqX1c1cxjGkcCLmfCe1CpdZYaiUGKKp7TGLrr2dECHkgmLEWv2dMIpJ6yXfM1H5uK6Ez/Ebt6SXeYeqpHUuphLCSY/DXQOyAWrq5tBVqa4hBFs9et74I99dAQqPrS9ZlpQZBa+2L7ZuB1HCW318LBocp8Zhj3nQOQH3MMW85PfUhhuBtdGospVBr9SSMVlEzouGFETHy7ptvSTnz6dMzjciyFKoql3Uh58w53zOdJkopzPOMAOMwkNPYNZOgodFUuTzPiEDOYy9JEXIemVIkp+GLyNLMeH6+8Je/+i2TDjx88xPG00isBjL3vGxYi2cixzgScyCk5DFhCutSuCyzs9Up7bpe6VvXbqaTDhhvWl+HQoF8GhEbOeXoko8QeD/d8y4GphT55u7E3Zj2UowgxjQm7u8nB+bREPGq6NilJ3XtLL3Y6xLqTfctXq9+WWaiKlIKkgekVpfWiHgCSdfjvl6/7frvVmYE1377Qdwqo7c2Pe2PJ6JeQf7ZcQkxRYJ4RbUg0MD6YorgBjevOPwBTtrBNB3hmzc+lgJNEROcn41AAkuYRo917Hp5EXWeP0rPvq7U+DIn/cdOpzAOI/fne6QptWZUK5enJ5brjFrj8XKBEGi1kYYJCRkJi0tpzE2HEr34Za6LR+813QH12qvJt7bFTqaDjMwNfv3hQgjC3fnE+/fvCUGYy8LTpWDqmc+Y8u5BiNOJIOLXuDWKBWReibFxrZUi3j5au247psQwjAhCeRZng4OQhuzMeggs5ou6xQILzrBX24C5g2wx49N14TovnE8j5/M3pJxJOTAkQbXx/PiRdZ5pKZIkosETZGLKBI3kse27PI+PT4CRguxRmfuuB/Sa8ttO0DHHHPN2cwDqY455y+mAdTeLiSF1k1xsebeGmjqwfPHmPIyFPAy+JbwWtBa006ub/GDPrjYBQjfQRQibFKCb8eIG+JytDWb7m+qXpjVlLYWo8Rbr11GmZ+r2N2QxJG5v0rIDr9bcIOVMtINkn26I6lph2aQMuynOHIRL8Li6GN0UJkKK0Y18qRsPpbPQsmVs+/f4YTrjKIIbM+mff18m7oUZUNWQFzXNZi9Y6d2Q95XH7c60zUC4nwP7kW/bHrtf4x8/PHnhO7zFvu0GwR/9sR85Vrs9n9vXbkz1xk5rv94eyXhTiezm0a88/z3D2zY5SkTClnd9M/PZZlqMsevHHYgSbibA1mPqPMv8lhFdO3tcu3E39MIZM1iryzzGyXYTabN1Z7ZrdaPi2pSqRsBNuaZK6I9t4n4Fz3/ZcsXNJSLBJSkmblAUBEJEertl66e+Gnt2+/5YtpkToTQ3+A69xEZC1+2niLRt18SIHcyH7ZLimhDfvUg0c502pl69HsPnl367R+S2M3KA6mOOebs5APUxx7zhxHFw/WhTWq0OaKOzrdSK1IrapnsueDJBITbf6n14d89UKvrxkcu8oK1RS2FdUy99AJBelOG6yUAkhkCxSllKl3lkgmhnGv1nvjYpZ6bTiVwS13lmKZW5OPPtKSRejYw4Q0qIVFWW2voWfKG0SkrJY8hiZ2lbz95+CUybZwHHIM5aS2AYMkPOjEEYk8fiaSs8lxlNER0D5EBOkWk8kaIwnUbSkFFrLKvXmOfsz8VlBwFRI4aEvHIOUkrc3T1wv3xDGjJxHAgpeeGJejSZtub/XStIocX6KkO9g365FcT4mAuWpetTMM+W7pLsZoqV0hcZHVCV1avaa6UW/yxADZuUpt0Qby/K2XK1Pdu7G2V3pGxobbR1pZXWa6sjWKA1qLUvkJoiopj57sLOa/aK8y+NmbHMM4+fPmFVWdYrTStixni6Q8Qjsp/nxX9A/WfmUnm+zl0b7ZF6a6lc1tVzss2BalNjbUZpRuvyDzNIeTPebYtOWBssDYIa17VxXQqqjVa8FVIfLyzVI+zGnMkpoGLkpiSERY1i/ntqX9DWWinzDAiXtXCt2nXK7j+otTIvK9oa87qyltVviOhG1l1yYxClg2xfCXbte/LdH787utQkgOT+uhOua3XddZ4YB6jV9dVm6nKp4AbF2hRZV1KO5BT3hflrzaHHHHPMX30OQH3MMW84sedQt2WlFQcJEiNJhA3XOqbs+sieVhC1EmLg/uGe1pTLvHQwqpRSibHs8g5wcLssnoYwDgMxREwX1sWBakqts9T4G/cuN/jxEXEN8zSdCLiRaq0Xmom/kZvHj5VSnK0ODniuy8Lj84Vm6gbK6G2Op9Npf7Iba26dGTW9mRb9DT7s2drnaSILDEGIGO0yc7k8wZBp704IAzlF7s4DOQWm00QekrfVzY21rISezCES3JOoRuws9hevW8yc7x54KO+RFJHk2/Yi4aZVbrU/94qJg9pXjXnQ06X5PPaus8BOWvfPL1osVZVmred0+9dLWVmXmVYbZV1pte2AOoaAbdqRbTvf3Li5gWq5cZpI11FrbdSleIW1AkTMgse4Ve2Z1N3Qhsc17rKKLa/uC2NmzIsDaq2N5/mZ2ir3d3d88+7B0y+WlXlZfSeiZyLPpfA0z34OemRfacpcSo+PjL0wyFjVKGo3phthkEjuBj7r53pVYW0uL7qUymX211LrrYTXcuXj80yKgW/fv+PufMLEGeOKsKqydiBdOktMbdAbDOe1slRvJYxdQnMtjY9Pl94kulBKQUIkT5Oz6GYE9aOMuEnV+n3gLLebgsXAJPQ4vQAhISE5M98qKQamuzPTMFBWl4OpNlKA2DfGPGqzIWFglIwE2YumjjnmmLebA1Afc8wbzrbFarueYdc1dAlCIMSt5ti/rtqoteASDo/YizEyDG4k9O/ZYso6AOvb8hvZqT8wi7n8okfmhbAnanzt2LdtfLvtD/eD34pOuhazy1ZsN9J9nmvsz9deLB5uj+0P9+Kk9E8peuV4sr7Rbx6r5/Xn8dZaKC+sfYKXcei2Vd7NmP0bNp3zV/yDhCCklEl56AuD6I/bt/X9nHewqvqCoX2Fod4+Pjvvt2PZAN9+0kT236HqWnDr95D1DHLVxsuR26P2x77JUmSXp2wfm2DbXvwe6xFwDp5rrWhvIrQXC7FN580O8jcJz5dnkwK5btcXFGrG0jObS/Pdj4D02JMunQiRbTFm/byIhK51cBkIbGbfzhh3CUo06/Km7ez4fbqWAuIZ2KW12+tp07KLn5a1KkNVRBrzWohRWfafcc1705dyGyjNTZZBvFDIpLJWN0+25jGTTV3+tUmmXi6ybj4CcRlLa8Qq1FidldeeDKJdHmKNgBF60HVtvqjw09xTQoLf0yL2ueTp9XX1Mccc888xB6A+5pg3nFId8ChGSHHXm6oqdBZWNe2tdKAs84V1mQlpII8nRAJ39ycI36FqlLWxLIvrikPqrGkAFdSgqG//L9eV62XtIHdBFWLKnKYzKQdSzl+UPRiGWvPYLw1EAaIDJzNHG2mIjNNAa0pdPTZPxOPhzNy0ZXhjm+zgzgGFADF5xbiHL7/IYUaJAe7OJ7559w4rK+3yhGllGkfuTgNTioynkZQTEo2Ka9BN+oIhJcZpIuVECNFruE2daV2VWl+XZ8SUubt7zzv9trOEXWoRep52CI5ozOUeIgGp5VXZwzY7GO/bBWa9FGf/y9s1MVxOUGshhoCQCThDXdalP4bu+d0Onjz9o2ntwNm1waFHDXoeXoFasFqw1rDa0NJoa6WshU8fLjw9LSyzs8alOEMeY0bktqCLKTGkRApfWaB17Xmt1bOeh4FIZmmNpw/fd4l0XzwSSJIICFUi+XxH7Ckg2jz6LgZndetWh04vRQFWVa5l9aceAtZ11CkJQQLXdaV8+B4z47pcWZZlO9n7sYIRgxLSStVIjIXHy+KLgNZoWvuiYithapS17guGpgbSuHYPQamVee1MeOv3kAHNwfCYPNc8CmQxsq8euS4rTRvLGrnOCdPGdakUDeiqVL0QJJCDkEMgxYaE4EkpKBHfJXJTY+xLlOrPL/ZW0iBo8H87jjnmmLebA1Afc8wbTtONjaW301mvRfbxohDrRjVPe6ilYHikcBo8u3YYEsjZGbVycdnEBqI2A1RvemudeXRJhj9mKhUJkVG8nERSIoZXZA+dcWvWCNblntFj96rSK8IDKcWdydbOkKXoWs9miqIOtBxFOgvaGerYTZTOeoZb2kfnHIecmcaRarqbN1NOTENyAJKSR+OJYagXjXQDYhCPHNsYdF/IbDGDm2b9y9ctSOzG0BN74gcgVJezIM5Kg0spmoNV+Qqglu2B+knegPS+GyCfL3FMoWmjNX9sje7AVG20WvdzFcItPWXj6/fkhi7zMDNkY9Rfaqp7/J/1HY1WlWVeuFyurGul1p440mMOgV3/HlT7pkB4VZO+XwPzsxhjxATmufJ0vaJmDMNAjJEoEUUIztsS8oDoJono5kZzxnpLhzHpcXnwQkNtRFWi+oIj4r+ztspaHfwuy0KppV+buB2o/2yAeW2E2AgCi+jvGFpNnSGvxSVXW4sp4GbL2vpr43ZM1pl26+w5/WdijMTgEZIBZ9VLv8baDb7WC2TUpOdce/ziECOaIq3rzs3MFzkJX2TF3hpKQPoizPPUX9w3v1+W5DHHHPN7zgGojznmDae0CtzYNzFxiQebmasbCzsQxHoKRdco1LIiwRvtQpd+OAh3MOelL4ZoQcOWJewPXkrtucvm0XvNt5qHqRDEt4W/pFDYSmGGYSB1Ha0nXbBLBLxFMGDRTXx7AoO5yWlLSECMlCJ5yHsOM4jLOVICcyCHecFLEsjZS2pKKZR1ZV5mrFZmS0yWEE3YXZdjBDDRrpPtqSfg2b1BnEGvrcuIvYDka/6rdV35za+/5y8/RFLO5MEXCcUKzZQ0ZIbz2VstzWPmrL3OekOXu3Qmnb4Q2oU0PwA0Aq5Bz6PXqYuQgucODynBMN4kJ7guPIXQWxXtJkP5TAukXbNe0XWlrcX11h1Ub/Xga3ETXS0u//B0j/A7t0vojYwW7dXmSaNrwUv1vPKU9wpx6WxzM3rVvEcqmgRal51Y10dvFeFlO1YEiZ4AE1smSSB28K9dLjGvi8fIkYgxkHPiNN354lWVpRQc5G8pNZ4YgglrNULZtOcFwUgpkXPqAhKfDciraU8t8b+VzVhoRtzq0HsmtODJJkGNGkKXkTiTLiF2rbQnlmwvbFUozQttzNwYi+GRnGZkjeTku2JV/H53eVfusXmQQuj/HkXUuhQL+Z3775hjjvnnmwNQH3PMG87ckzeGnBnyuDNsFtTrsiudnRaXP+BOf2ewlHm5AkLKIymPbOxeStbb1XzruWjpGcIbTBPmudCa49/lMtPUOJ0qeTwRLbPW+pmO+YeTh8z57uzVxWuh1uY67M56BxFyL5MZByEmjxYrPeXDM3obIpk8ZKZppLW6p3xM09iBsyeXmBpDjM4+x9hrlK+sl2eenp6wWkhrIo0Jm0b02ztC2prenKD3kozOZMZECEatK+tasGZYBZq8MO39+Dw/X/kHf/+fIH/5xN3DHfcPd4BR2krTyunuzPvvjDRkUjOSCZbLjbX+kdkkL6bNkc0epRheqtP9HhDZcBgxBNAJTBGtgBKHgUmCg+PqUogQw4uYOPNsaWG34zmYbp6rvK7Uy4yVFS0Vq4r2j1qU63Xl8WlGm1GKL1KQSEiy38OuAhKXEiTz4/zik8cryucCEdLp5PnaqRKi16FXA63GkGCMGWJiLVee58X123jUXlVj7iA/pEwcMsHMjYyqrAZcZgyYy4qtMyEGig6kGPnm9J73P/kJ4AbCx6fr3lQqIaBFaVbRJlzWRrGCaqGuV8yUu7szDzGx1bQDFDPW3o4oWzIHt3hLQYjJL2jr2d8YaDeTbjtAKQSGNEBKmAhFHai32CP6FK5VWfpCY51nVI27aeR8GsnRaxRLMyKNRHW5FkoUJaVAPg2k5FIQpf97swH/Y4455s3mANTHHPOGswEle5nq0N9Bt/82uvZX5DNgtRmdNkGAdBJp397f2NidOb6BaemGpk3T6ex0o3attrXwVWe/9CzgEOWWebwdsb18Ks6eB4IbwIL0XOltO/lW3W3mbPvnTYlGE8HECNHzdmM3X24Skc8+a//zfgCwn5z9CF/++WaI27YGviYXba0xX2cuzwNhqz0XqG2lWSWmtGdsW74xv1995L7lv0tD+jHv98b24zuDvf2/3XTXqsjOKiuinl8u2g1nYpv6h4143HTb24eps5u2M/bb33Vjn3q2s+rNkLjJFHZZityO7tb6+MpT79F81qUVvdy7my83sY+zzq0fr7dtOviM0aU8t9xmX9QRPApRQi+meXEvbNIjtC8y+gneK7df5GBbl+MYnhEtuOFQmpfW+HG4B8CZ3a2a3F/f+67T/oT7IkroBl55cZ/eouoE32mqLvTvOyw9c7tH/Ym5ZF/VF6q1p5lsGdpFPTtbxFn3qi63MnMpTFMvNArG9o/IzWD61VfDMccc888yB6A+5pg3nOnkGtwUIyH5y6upoTTPse3by4JrrP29rjNlCqn1BAHE2xWbEUIgDwnMTYxuilKsmStPg7OUa3MNaFPrb/iJpQkfn2ekrlzn9VWJgoRIiJkQBLXijHj1hARPDenPpT+G9MSHYEAwxjiSLDFNE6fTxDRNrKvH/4kIOWfGcWRdV9o802olThN393fEEMjR3/TzkLm7v4NWOefIOXvrpIjri0M0YkqkKEj0rfIbnHKQpA3P4K7+4RFpX37utTQeP135/vvA09PMr/MHx0LRJSzvvymMw4lpmghkxjgStuaOL40Z2ipaVyQlZy/9RPM7YvYNm7dGfX6iLTNaVsrlGa3V86LX1ZnN7Jnl/h/+WXpNdwiBccz+96peTtMaVqvXUZdKXfxzWRulqGdOa5fuiGC9EKQaUL3KPgfPxDbraTJ1S+/40lM31nnh8vjMOCjjwwOSA5h0ZYrs8o+mxvefnjE1nh6fefz0SJDAw8M7pilRiagklzjFREiDL7JKdTBpLoNScSNwlERMgfE8kVKkYXz49BHfcWieW67Gsq495QSs+b3TbOneB+0svbPGxdynOvRIxmC6m0Gtr2C2NBFTI+fMNE5sCxD6eSurZ2CvMbIsKylGIhGRTArQskt93F/gKR9Pc2GZPYe7FDe0ZgtMwZtPrw2qNQKNZI0oMDbjZA6gtUfxmUeL+MKlll1Lfswxx7zNHID6mGPecMbTCWDPEDYzzy1ujpk2QB1DIPZSjpS8rthNdA6o19IoezFMIEnA5dleBqNqtOopG0G8tKQozMUZrJASEiKlwdNlRotwXdZXjXkigRBzL2QRB1mtUYsnelS9pRzcfqZrWunAP7jUY5pGxnHAzHXRW851ztnj35ob72IKnO/OBBFCr/ROOZHuTogq5yRM0WUGdECdN1Y7+mLCQQJ9a2CLJOya26pY3TKHv/zca208Pc18+iioOpCRAMPoRSHWhG/ffwMNpmEinJTQ9FVTom2AuhVnVuMmnt9o9u0b2WhSrCj18Zn69EiZr1w/fEBLYV1m1nkmxMjp4Y48DFgQWgdJ6TQRx5GUIkN0/T6qXi+u6gbE2mi1UddKW6vXslfzhZLRTZ6CRWeUmxlWe9pHjg6o8fQObV8pBjGjLoX56YJMglVnk13a3XdmQiKkzLoUPj4+Ukrl6fGJTx8f3TswnkmT0BBU3LpHyISUsda6jtl3L7Sz9LGbV1OKDNNIzgnVxqenR9dQt0bMCSuNZZ170k5nzhHWWvt9DZL8dVzMAXXCz43EiLTmi5ktjFu2eL6VWisITON020QxMFWWdaVWNz16VKOXFOVRScGzz2N0iZJ2c+rzXJnn2v9b/bEJ1JCwIFybsqrH6CVrxAD3TSn9mVmXpGzJNYbvRpRSv3z9jjnmmL/yHID6mGPecDZ81eBFdbXdmN0OtHcN54stYQl40oGZs5+ueOymRKElN6KZCatWlnVFQiSZm5pqbd0o5cchu9xgk0B87ehvZRjbMfqHmyvFth3sbrbEt5atOmsWgstFQow3vXAM5Jx3mchG6W5pA1sEmcRADA6GtIBWl4bshSgCRk/rwNMKQgjd/GY7C9gx9S6Naa3SSuvlFq+dAHnxOfRs4O7r69r1+boAwum0sC4rdS1fKXa5SS526QVd/iHdDFeqb+svK3VZ0FKYf/tbytMjbVlYHz+hpVDWhXVZCDHsJkkLgnXn2TkG4jDsV3G79q7hdrmH7guZW2HQshaWdWVZi+vO/SYEEYJ1eUgQVL09cH/M30dHA/0+6QkxIZKCG1PVDGL0EpPQ+m5NcPZeXP7QtsIWu+VRN3UWWLV1qYQv5IYh01pnj8MtzWK7D/c88v44m5m1aetgmt0w2r/FTYWbtOPFPWXBNltfP+Z+vui56V3udNNTv/CKbqKe0OVVIWIiVO0G1nX110o/dJd8uNQD6BXnvgCqW863NYJpB9SVGGCpytrMPQXb7oPSdfrWi2IOU+Ixx7zlHID6mGPecNb+xrfHZZnRSnOm1CCkjJj5Vm+MbAUZJq4XHfMmE1lYe0tdSpOnS4SVVoV1LXz68MRvP3wkhEgeJkJILKWytB5VVp3JigY5GgR/E34NA22JHYIQciYD1YSwVII0ghg9bITUo85qKdSyAkZOA2NnBUU80m4cR07T2H+DAxhQUgxgbkS8Xq8MOfHw/j13pxNlvjC3BatG8OQvZ6dbo1bDhomUMyk5k1pKcRNYdyq2HjnWauN6nVmvC9fr5XdKUV6Oc5SJIF757LBFabpSWuP5ceaXf/4rhnGgVU9LeeKR+jWWzxpoxTS6OVFsV0rXZeXxw0fWZeXjr3/F97/8JXVZuXz/W9bnZ6Q1QlkQ1V477gkwWy06MSA5EXPmj/7sT5nu715AQm6AvXpyyrKstKWwXH0x8Onxwq9/84HrvPLb7z/y24/PhJiIw4iESMRI5kZEN7pFYhAvG/kaQ423RCYRcohMaeCcB5oZqxnVlBYjrbcADmOBUEjLSsgZEC7LQjOPl8vZG/7mZaFeL9wCCIVhHPh2HPrOjtd8xxiRnnmuzXeGNk29a5X9vlnXFZG4a7s3IB4IPf5R9p0lk57iYz0VJN4KkyQIpgGxEU2NcRgY+vMQCbtOOkgkRsjDwDCOxBhQSczVFz3rMmPaOE0T5/MJVeW5NK8ZD0IMkSDC2g2UmNHWGa3VJR9a3DiaM8M4sjZhOhtErzhPwZF9NcHkePs/5pi3nOMVdcwxbzit01nOTOtNc6obMxu6fjruLYjQFQtyi/IKPUFBRLq8IZGTF2vE5lu287oQJHqdQ/DcW9dr4y4uUUzFs29Ndu3zl2a3Q27a6JQIvTjCTWCbdepFW16lM5bsDY/xBUMdY+jAwiilUFuBzjyHIJ720KqDthgZxxFphRICGjpT3BUSar1KvbOSIW4tkp7jq7wslLkVi5RSXD7zNYpeelFKN1B69XtBm7GWxvPzlVIq14cry3VmXdbXjZ4/ZKdtC/pzBllbY5lnluvM44cP/OaXv6QsC8/ff896uRBNGbQRzJl2bcWPccguO0gRGTxRZV0XdiPr7Up6yodqb9Fse6FQq411LVznhUsvc1nWlRCVHBIh3hZfhnSGl25a1M8Mf188nfTqdRGSdIa6g+NgxtoBawjN2Vq1Xrnt+ecbG53M9lKiql7lDRC6ZjyGyJBzP7N+P/3QqLjlmm+Sm828uPsZtp0XcSDtrwO6cdgBuPTdpo2plxdmP4/pU1KKqG67SmF7kBtDvf2O4PGMIYTOUBu1Ni7XhdYqhMgwTbfYvKYkQv89gWZQekzlulZaWXeGOgW4lsZSlBCVor6+toD/u9CNoLbFyhxzzDFvMgegPuaYN5y+EUyzjcUzr3JuW0uefxfQt4Rv/71tdwseqZey07Pas6vdpNhQU0KMDMPkjGXObu5qK5dlcfAeXDeZNBPHAa+xfn2Lt5TK83Umr7GnO/Q4sBj9WbUeLYLcUiWCa6gxzx1eS0FR4hJQTQSZiJ2hvs4XlnkGM6bJIwVzT/0IQjdyOaBec0bFSGLEYMTgpsacQzflOWBJOTH2jOBNllJScWmMKilGWoykTV7zpREHfkEENS/IUbM9y1tK4/m6sJTK3dMzp/PE8/nietkvPaRfPeTFx3aXeDKHfyYYKUem80jOQuYd7W4kmpFVO5CraKt+vvv1DjmRppE0ZN69f890PnmKSl+oqDa0VVottFKoqzPV12WlLCvPs39cl5W1V1fLC423bE+iF4VsdewbEH1tgdYDNYgi0BrX54vvgEQYUtzPRMEYUmQYMxICp/PEUs5gRgyJIIEYAmqty316/vULWYTLinwRV1uhWWKLOtnLc4I3c8aQdinG3d09Q+7GxNafy8ZQx3ADxV277/IO617Q4JIVjJwSOcUObot7A0LwhBNjB9/Sj0e7lntZV0LwFJOkSquVtflr/DIvnvyhymVePTavuVQjiGGsXreuyjovtFpIAmOEjLA0mCtQ4HluGJUUjCH2Bdee9PLll8QxxxzzV5sDUB9zzBuOdj1mU9cwmnoTneuM6eJmQIRoneVlYy5vMVsxxV5Tbqyr5+KupVJbpakScmI6nzEJhJBBAvWy8HS5UJt6BbMI0+nEeHcmSnhVM2l4hvaHxyfGmhmniZwSFqMzgSIgm2TC68g3xi3GuIOEti6kFhCUUiJDTl6SokZdV56fHhmHkffv35FzxmpBayEITOPA3d2ZaI06jbRVGEXJogwxME4DY/bymZi8CW6YRk7j4Drx5kCh5kKKEdTBjqVM6jnCXxqRHtMWhbIqy7KiGM20535XrqVvp48DMQY+jJ9eN3aJIaIEaYg0RLRfe1+UIIoFhWjkU+Lu3RlrI+lhIqg3VuaOuV0z3BwcZgefaRgYTidiTnzz859y93DvV1KrA+pW0bLeNNjzzDKvPF6uLMvKx+crH56urqMuSuvCFyEiEm+ANATP+E6+0+Ca3vY6Oy8Qu+SD1nj6+JHr9cLw7p7TT965XKU1pMfInXWkDOoNiMFuZTxdt1z1tsMQo4Ncl2dAToFxcp2+MrrG2dy30MxTOEJykD0OAzkl6jgiEqmlsi4ry7zsrLvBvqCVEDw+sct1IHtbZ/C6dMF6os2INmW+XLuJ1xtQm/m/AUGE1uUjDTerlsWB9tCaxzK2xlKq71yUxuPT1Zn66prxGAK1ucRkXhsxLB6ht660Whlz5H4ayBZ4LsJTEV+wXApLNYYonLMDckGRA0wfc8ybzgGojznmDcd6jmzHArtBcFMbWN+Nt90UtBn1XoBUNg02O8OlPbXiZZ0zu2FPoJeFtF5P7OkiwUGudYnBqwfuP1tqJVQhtrZrP+kV6qL9d23H1I8hxNANd3iBBXbL2N0rvz+Xwexs8A8TL/aRm9lLbvnWL02c2/MPMTqg3sxyL7735c9+fbZs5Q6stmvVL5yXw4ib+Za1m+O+ku1tWwa1ucNRBEx9ux06E+pM+zAOoI2kkWiNoJDUGUXP4m7+XPLgOxPDwHCeiD09xa+D+s7I1pCoG1Pd5R7N02NKaZTWenrL1jQZ9vPr56vfZy+uz8awbobAr5xOX16aOSgUSK2y1YeLQDAHiCEEIkZMLglRlDUWanDg/jL2cLePbjFwQyCcKxKEMlbq4rsLrbPuWza7iBCGBinQqqLZi390AZ0duPc7CIuGDOq/IwLRsBhYT5Uw9OuqXtKSpkac/DhLVkrRbqh0Jn/NjTL567LOvT48AMHbKMlCjP7aqWvrrY2wB3A/KSz0bGpDBSK9KbRnzvdAF5q5l6AqlOYV7GtVYvDlUgnBGxRlD/045phj3mgOQH3MMW841XrkWM/HNZNb8ga2s2zBgufPbhECZiQMqc7YzUvhep1RhVo9AW3ttdCleunEWhsE31YXCVQT1mYUVW9MpKEh8jSvpABLb1n8sTGMZS18erqQ1kS+zrtOOQ4DKSWqFMeFTSmtUlojxMT57s7f958fuVyvxCi0VkkpME4T7+ala6A9CcSAZS3OtENnAQPXZeHx6ZHl8sx1ntFamMZEyhmPVe6ZyS3dkkyi11o7k1n7F7skRfyxU4zEvdjix8eVDa4Tj9HjzNzbKUjXiG/a4afnZ1QLvz1fWMsrWb5mPRC7QvMsYLRh0bqkAR4e7tHzifvTSHn/4NnR64K0Cq2hpe5V42A7kA4xIf3aSAwM04gvYBplWdyIeLmwPj/TSuFyufB8uXK9LHz/8ZHrdeHT04V59UjElDKnOLi2NyXfkWAT/tITMbw4BC2s0dNCXpPgRowkCq1QLooGQaIRJ8/MthR9QYExJCFYBJlIOXE9Lfyjf/s3/PKPf9tjEHWH7/tV7H+IMRJTQgQvMmrVifq+yHspu4g9XUftlrCiXVfOyyVCXyhu2uptYTbkROr501tkYoqx3y+ug9a+oG1dd157sopuf2++Q7Gl14ReDW5mn6fRGIQPwt1/NDD8fxLNoBX/92HImSEkv8cjIA2LkSaJYoGnpZI+XRizS1FOQ+Q0ROopEYNwGiJDHo6cj2OOecM5APUxx7zhqHVDlUWatg6ovXjCs5Gd0UwWaF0e0psuXPTRNZrLWpl7BbOqR+XV6m/8tbesldab4lJvSjRujWrm292UynUtpOSM1Wus4loqT9eFtBSk7wefzmfenyY3KDZFgmLKznSOKTGeTpgZj8+PzIsDcVUlxsD9vLCunkNtym7ELLWipuQYybGD7LLyPF8py8yyLlir2ODSjihg1oFJB1eGQPACHVPXIps2jzrrxOq2KNhMnl+e7dzbng+sZluXTt9lcOPZ9bqwLDOfvp2/kvLRWekNVGvFXmjZgwh355Mf6N0J2jtvYJyvWPFt/DrPvd6664VDII+e+sKm432BikyVWlZaWSnLwjov1LIyXxfmeeFynXl8uvB8mXm+ziy1ogohjYzBpSSb2bMj2W7K21o6G1aba8y/YvIM+CKxmVKXhWpGHCLD1e8nO42IJE8DiSDmbP0wDOi38P2/+8Tf/1t/+ZXr9l+N2fj8r86PfZN8+e/TPw3k/3wg/2fRmfrmyR4hZrIkfz1HAwIWAkqkmXBdG4GFMQdSgLUmSktIoOe4py5ZOeaYY95qDkB9zDFvOKXLjG/Zr0ZVoTXxprRSPJfaxCPqBG9dw0hhC1TzhsKt5GVLWDACIQoJI8ZMTBXEHf/0dA+JkQAMnfXNw4DEhDmN9eqx+y6zvEgqcbNUaUZEX+Te2s5YbnnGmyxlR36d0VMzSi8HAelZ1duHmzCbGUGNUj0X2VRJefDn0sHdVkYhaGf42KUfL1nFzSQZo4Ns62kaX5NmeDyha75DMGK0/dibKk0rlNYlBNULUr6WbW04AG3Vwa9WpxO3pkQJWOtM5UuD2KZZRgiT9dY8/5HwQkP90njnEo+G1uILkT3Ro1JL65nTfn6vy8p1Kay1dd0+nb2VXZe8HZN1dnYznQa9LcleA5A3U6JrnQeJBIwohpbVcyZaRJL7CIJ4Ff3jw8z372ce31+53q8/VJz8V3b+RcmRbYL1X6ukvx3gA4T/EuTqRsZNGrLdOmauEvF8eF9YhwBrVUJQctJ+zfHkD/t6ffwxxxzz+88BqI855g3nUhy4tQZNvRCjFKirs86Pn56otTFOA6dp9Kro5LXbKQqn7AUR87WwzBV2rXVAxHW2qjCehbFFWjOuq1K1Uk2IeUSyMZ3vydPUWcyEJiAmXkMnilB7LkWtrr21pZGulZiMtSpFXVKy1sZaGs0W+lNmLc0zfSV0U1ukVOX5+dolF4FhPBFjZBgHQgi0VllroVnl8XKl1MaUIu8e3pGDMFAxqutTW6Fp5XQa9+gxeqyZCVj0UpI4ZIbTRAiBK88sy8K6vh5xF2Pg/jzx8HD2x7OAmrIsHrm3lpXL1RnCy7JwWa5cl9VBzRfGrFHLTFkvhF4JvefReV87Kt7Ut8l+BENCRoZECJDD3X7JpAu69yuozfVAprT1Sl0XrylfvNa9zAvXy0JZVx6frnz8dOHx6cKvPjzy/Dx7ggkOomOK5BT3CLitYc+kx8OZ1437XfL7AcgUYEwGFhjSgIpQg1EuT5AiQ4SYfPGVQoIE//Rf/xX/6b//D7ieCp++ufwev+W/3tPeK4//y5nLf7gw/j8y9//7E+kfuzlxXmunxruMDJe5VIOlelxiaYGcKqUbNBE8fjOPhOFf6lM75pj/2s0BqI855g2n9Pgtb0d0hro0qM1Yi3JdPBfZAym8ZpjR0zxMxbNmhZ2h9ukMZfRiB8+rTsSUXSdtbnTSTVMM5HFkOp29lMIElY27+vLYFuzWzU+tueGpNt/2b+rmJzdA9ebHplDKzqQjoQNq1yyrQqkNDdbZ314Z3mUYrTfeoeqAnEIOgZQzOUZvjKzV2fP+y81eMOEbQ93ZabRXoW/stnkhzNcZatkZajd4ht0EGoIDyrVnU28V1pv588sn1CUS2goSe7ELILR+Layfdx/piRRb+57EgAy9ie+FnpmdGdf992hnp7W6AdF6K2Lt8oy1VNaNpV4K81puptjOQvfwjF0vrP2e2ID8Sxvi79OytzPUPbXGgld1r60ADdPmxr7Qq+uB53dX/uJPvmeZjlpsAAaof9aogHwI2ERf8PmOzebd9axr20ItaQrVQMTz6UMLlKaUXvhU1BsUjznmmLebA1Afc8wbzl/86rcdo7jRCIOyeP31vBSer4VSKqXB2iCl/n2jA9DBtlKJiARnlINkRCKlKE/Pn6hqPF4K12tx4KtbsYqnRbh0utIuFwfYw9RrngOv4SDdtombUHtJTGnKUipRjdIqVR2chhDJSaiqzPPKVgE9jidir4KOMRBTZquDsQ7Umhrz4tv5pq2XZcDSUzPElCnAEAPNVjDP2L1LmSFkhmHote09H7mbEuUlwMCBXEqJcRjdgPWKKTHGyOk0cb6bKB18CkaKXk5iFpnqQGyRua6kuhKTvRqVYGa0ulLL4oENbIU5Roh9UbDVQL4Aty96p7F1M9Z5asf+PDfDY3GJTFtX6rrSSmV5vlBL4fnTIx8/fGJdV54eL1wuM8tavK4+5V2yI9a14+KtiCl6TOKWLAOQQ5d+aHthkvzyBBHOp4mffPuOJIl4PiEp8XG+wvMTKkLGiOpyJ0Vcw/5Km+Vf9/Gc94oW662J0u9xL6PxplPXfYTgOd0RQSWiElgVnpdCaoFxqqSh/Z7pN8ccc8zvMwegPuaYN5z/8s9/BcCQB8ZhdLNgVawZy7Ly6VKopRDXRl4qOUdyHrySXDxVYqt5lpARCaSevnCZn/jNb79nLZW5Cmt1tqp1fi+EQB4yzYylrJR5Jg0Tp+GEbCa2L4zhrHOpilSXfDRVQqnMayEE1ww3rRhCDJkYhXq9cr1cMeD+4YHT6UwIQh4SMQRSDDfmmwDiRTXLunhBTZAuB3GQvYrQSiC2Qo5CE0VCY0yRb073nMeBcZw6w+0JHyF73Jy1sie9bTrgnAem6cQwjL5w+cLEFLm7n3i4nnl6emZdrwDkKL1iOmE6klvjWldSWYm5x5596ZyqUstCWa8EbV4OEiJ5AEkby+7a9k0i46S7N+xZU1S7Pr0XfsBLQK1IZ6vrvFAXB9WXpyfKvPDx+4/85te/ZV1XPn584vHpylobIXiW91oKtTYMJYiRAqQojEMkSEBbB9wipOA7Clr9/t1SR740EoR392f+4KffMqSB0/t3xCHzF7/5nqUsFHNGOmhzP4H2ZZe2GxN/zGejZiylUNfqZtvttROHfb+jqe6692DQEDQELCTWVillJcXAMBXicCxejjnmLecA1Mcc84azrFuMWiRG34Bt1fWnpapLKHq+rKhvxTrL3LOme7zXS0ix5Te31ii19ISFwCbh2FgmCQ5kRF+Y+DqjLKq/R/U2n8korMf9bXIJta1Nz3/PJu/wbOWtDa7Xkvevb49jSs9Els6M9qISYpdUdAGDGdZr0k3pJR1+cCG42TCEiOysbj9HX3xK2/9enyBeUJNSl6QEuZ0v87WILw7slm392RH87nxmFmye8CFBibGg0otmZAPWnu5iAoLHLe4/17OkrYPnl4DamjPGdV2ppVB6G+K6FpcWdWnK1my4yWXkM2lOf/6d9UwdrFUTtHUZSP87wq1R8rWRfr1yiuSUGIdMGjJjTuSU+m7C7TFSECzQC4S+8NgGeYnkJX3xgr+U4Gx/vmW305/768e9v/76/73E9/Li56WrybXr3/ta7rPv/dL4IqnvLG0Sm2zUu4Z94V3ZX0cuuxLZjMovVpBINyZuxuGtcr3LRPoxN6N//PCIjznmmH+eOQD1Mce84Xx4XECEu1PaJcvz88q6FGotLIs6cAYsuD7hulZCLJhFxhS6Xri3xVlz9tXg+fLM8/MzpTbicCLlyVF09OQIW5VVtzfURm0rWkAvT1Aj8zp/kf0TIMZEHkaosNZKM8+aXtZCCL1pURxIp17hPOaB83TGzEix/3NiDiQVB6XbIqG1SoxuRFzKgpkyjQNBRgJbyQuYCSlmUgxEaURppJiZxhN35xPjkLvkQ7Da0GUFa2itHYTqZx9WzVsUX5kYA6fzyPnu1KveK1qVshSa19MhYyJrIF82PvD1x/Rc4pWyLjSbaQpBAue7wjiuLgvqRtEQEkgCtnZGo7VKXRcH5VuEnRlWG6aeWVxXl8msy8K6LpS18OnDR5ZlYb4slK7F37Tv7ktzAJd7jnUMwt00cB4zOSamMRMkeA76WhGEIWVSTmg0iiRs9Pzl12bIgdMUmXLi4TyQhpHrw5mfXd9RWmNFqAikiIwTdRDuh/GLEC804U/+85/yN/7Ozwkt7FdgA5r0haf2xUNrnjO91sKyeBNiyslbE7EdMG99pZ4zPewJMbXqi8WsL6Smwc8RXZmDwbL6uYcd1xLEpTPSF5v+GrsZPp8vFx4/PWJmDOOJlAee/nThn/5PPjL/4Y9nm5vh2d/Vf4mIl0EFCcSYwXwXSdw4QAsOoqsazUCI3tEUA00iq4UDTh9zzBvOAaiPOeYN5zK7mSqExjABZlzmynxZUG0u/zAggqh/rFVJtRGDULsGcot8MzVqqWhTlmVhWWdPCckDOfaYs+xSimKBsHZzmzkDrK1QlyumkdLNg1+a0M2A1uUI2t/Aa22EYEhwHXYUl5fEEMkpM+QBMyO+AFjao/DM9MZwa70le6wzakoMwpizV6UbPaNZdvNixDXMMSaGPDIMIzm/qBFXxUphazLU3hBonZF/+fEa/g1d9z1NA7UM1DrSSsVKxTAk4CU32o2kvw8S2UBxXanVzYAhRFKIRLzkhuiyHpOIBf/n2KumlVYK6zy7drpzjKbmrYFqe2Ojqu5JJuu68umj66a3xj7Vl9FqwqbcDsFb+lIQppyYOnt8yr5YqoswmzdmxijkHFCJoImWXMf7JRJWBFISxiEw5shpyOQxcz+NvDufKK1xKY2lKSEm8jiigzClL1fEiwrf/ZN3/Bv/yR+TSsAFMP210hcdtdbdhLqWQtPGPM88XZ4xM/I4koa8X58eRknsjPo0nhjygDZjXR2Q1+qv2xACD6eJMeceM+hg/nJ55nq9+DXqgDpFZ+ZFpFd82y6dERE+fP+BX/3KIzRPd/cM05nf/jvP/Oo/ePoioGaLplT6aws2udCtGKYA7iXQ5pr4pj1Ob9tNCi4Tq/Y6W3/MMcf81eYA1Mcc84ajXRPROvDZUxRi7MqI3jaH6x2DSv+WF1vNHfFIEJcNmGcvhxg4n0+0psTRNczeZOiMrUnfzlUljiN3tbFW43GuLLWgrxq+POViGjNWjbIOCNpb3LoIxNqtQ11dzoIprtjocoGeLR12j13oEglIKRFjQDUQgidTRBFarVgH8ylGUgh7sAWAyQYe+ha+OvMs9G1zVYzNtHcz721ZFNLzlV8HwbanaXhfioAFUg6gkdZTFdS0F6x8/TElCDlnxnEEXJcOsK5Lr8IOxK6TD8E14Rj78/Aq6pcMtS+yWnEWvtTKMnt03waoa617M99WUX+ra+eFYxOiBGKXegw5uyzjBRDcpC+eTW37OQqxtwh+tbvaXNJCo9YVgi8WrHk5DNoQX7VhtaJBer37l1c+GzNPsz1pxrX6vaSkP56IMKSImT/HFL0dsXa5kfSvhSCe943LXwICXZ7U6lYk5Cy1QG9W9HtgC1mJIfo1NvP70IycEkPOXR7DTSLUn9qQM9M4Ymq+OE5pN4O+Nj/8261dsVbxXRrXd7CVFKkZVT0FKMXt9RmoTZnXV1o+jznmmL/yHID6mGPecKrvrVJKZV58W1+CV0Nraw6StdHMs439JShenRwDFkCFXnscoRrNGqUV8hj52c+/A2CtXs4QU+J0fybmzLkq972sI04nJA/89sMn/s5//vdYLldqLS+Czz4fEZjGgW/f30M2hgTLkqm1sS4Oxk379noH7xYT0hqpg+cxRYYhs8kWwIgxePydBE6nkWHIXQs+uzlxXpivF2KInIeB0zgwJI/+E9s39XcwuUXEtaJYE2oK1OToxmrxBUtz6Qfm53ur6X4N/VoH0xaMkAPDlNAqBBuoKXjc3NUZTxHIOZNTfRUAxRi5u7vjnb7jcrnsOvjHTx9Z+r0RJf1Az+wa5tilAtZNehvzrmqU1eUoaynM89IB9cq6lQZV7ZF/0nOlw0333Rc3AuQUOQ0DKQYe7s7cnwaiuO5ZgHXNXOf4QnfsRSFhSLRBPtuR+PF7ygiimFaW6zPrOrNcLug8Y00RNS/5M0OvV7QKVtZXH7O2xlJWwiKeZNOUu/OZd/f3xBC4YMx19Yr2Mbv2O0ZizjRt/MVf/iW/+fA9KSWmU9/t6Bw1CKKertJKZb7O1OaLYpHgOw614ntQtwXGOCTu7idMjbWsqDaGnDmNg4P9FEkxYk0p6+pFQ3dnL/0xI+aJEDPP0+p+gtfOKbe7eJOjrOtCq6WTz12Lj2FihNpYSyHEwDQOjCkjQbiulWs5APUxx7zlHID6mGPecAxnoYwue+hbvaELLkMTlABtM+npjaEONzZx+xkN0hlaJcZESqP/nrXR1kaM/Q07JSQYkjxHebi7I00n5p4IYPZ67Tg4K5tTRDKex6yux6yrgwdlA7XOTNMbHgOAyM52+ja8nwM3uwViN6gNKdGCIJJRDdQOMAI33WkMm6r1B7ZD60azTRKD3Bj//vklOw3+ALfz+pWL1+nDjYEmBkL0OmwJm7nNr9eNof7yg3qkmV+buLPzSm2VZVm6pjZ1/W4H1EDuLD1YX1TgIKxtgLrQqkeorasz1OvqgLpLrf2JG66x7yfipZHSjYb+3FI3Y/q5l/1378+xn3+zjfH3HYavRa7drp+nlTjr7osdU3U/pkk3V2q/rb6mS++vGZXP2ipTjA6cu2nSNeKBGCN5yIzTRFMlp7jft1tEoBAIEt3QZ5t3wWjaOpvdTaovNNqdDvdrFwIp5b6T1GiN/by6MdOlNBp6PjiQc2QcBvcXxNjP6Rah+Pp89rrox4Rt16t/WV42mvbdFczvBxGqVj/nX/1txxxzzO87B6A+5pg3nHcPdwhwdz7z8PAABvPlSplXRCvanMEKKEMODDkQ+rZ4jJHpNDHEAFqgVWINaB1IEVLMbhpE4LJ2ba9gWmkVYs7kacJEWNvK/LSibeWn371nehj5zbtCkF9/8dhFK6FdkQqpLaiuYBWL6qAel0G4VMHZR41G7vnWgYbVpYMZZzVjNFLozKY0gjSMimgFbeQgnKeBGCJD10wnEYYYSEFIZkRTIrg5szZIgpg3SlprtFIcrGnxKDkxxnFAo9JSoQbbwfIXn7uAZPH2uGooSrPG2mPilrJ63FttIMYwJHKOX2UUvSw9ENLAeHdPqopJYpzOPUp6Y92N1uUOa6nMHXRqZ6g3Pb1tgLpH2tVejNPwUhgEYq8l1wZaNomR7SByHDKmnqyBqptjN+CuytqZU3/OKyA0EaI2UoxuCk3yagwjOEM/DJlosQNzQVTRsqJqhJDIWxpMB+vx94B4W/qMV8L7eQriEYd3p5Ex9udjLnGacuTuNNBM+e79PdYWB8FD7iZBF32o+nNel7JXzhvbuXfFdrPmhUwhkIehGwOV6+wxi4IRYqC2xuPlmYAwjUOXf0BMvgBu6pId7QUr/riv53uHIOQcibkvDvvCUdvmPfDjAnHgT0OqMK8LiiExME6K7/+EVzPUjznmmL/6HID6mGPecL55dwcID/f3fPP+G0yV39ZCvV5BK9ZWtFVSjuQcyFmQoBiNGIXzeWLMCa0LVldaDaAjObnGeBqnnf32N3wH1NUa05h969ng+vETj08X1ISf//Qn/CQY/+ibT50F+zEttSFaCOVKqBDbldQKwYwQ1TXdW6W42+P8cYJgwbf+q3nphEQ3K7oGF0JQQjCiNEKvEmcD1BHSBqhTIImXiAwxkkMgq5JMiC5Mx6rHz4WcvL27NVqxzk675CNJZJoGN3Lm2Wu+w1cAdYCYIQ4Cq6HSaFTW5mB6LivzurgEQGAYI8PwZQNdP6MdUAtxGJmSmzfzdKIVN88ty+p66LVQlkKtlfl6ZZkXVGs3kmpnJB14ltVNqj5eHqRiu2Y9Ri+9qdao1lsiu9ZdQiAOvYJ+i+JTOsvv0Yi1VlQb87qyrCsGRFNCjUzjyDRNhOiP9cXzKXjz5DAQTMCk4z+ldUCdciSkcIt0M5eAvLb22VI9UGeQnaFWYvAFwniaCCeXVy3zBa2Vcw48nL1nu3xzT4peWrTW1otrAhBpNEpZeb5eu26643J0lzs1bbQOqIdpIITAcr2yXK+eejONpBgp68L1csHMuCvTDqof7s4MKWMYtblkpa2FVipq7dVdpA1QpyHc2j97/N0tzs+vSbMetQhc5oWqSkiRU1MSQkhdH//lU33MMcf8FecA1Mcc84YTdmObEKO3A6YYyLGzYDnRopCSkPK2Hdy33FP0qLjomk7DjVYxRUy1Sw88NeBmFPPtXTpT1mr1SD7bKrNdimHh69nBMXgiQ6jAOFCDF254+QeIRKRvje/eMUfMDnR6yoaYl9Nshqwgtuccp272i8G3+yWlLvcIveBl8wba7eNFcodribe/v32fC2pebIXLJhqxW/7ya+znJrX5QXLFyxi27ftiELIEUv6K5rVnAG+8owTX4cYelScheKSdtF2qISLkLgXQ5sz/Z9nK6ikxLWy14x1qi7gMg1s9vTaQ0BCVHfgH2RZG4vGK3ahqXZu+Vav78fRzx60o3bZz+3rp5uendpNSmIPmsDPp0uMY3cRLj757dTbZSX+epC7P2ZI+uh5CZMsNDz1+0X98yInTMOxSkdrLuv3cyu3eY/+yA/wdsL541v3+2yrZdza7L3Zb/x2lVWL1n3dAHvvuUugtlXz2+145k7ucxSUo8uIwPj93DrDDTe7Uf3572ey68GOOOebN5gDUxxzzltNWB11WyMGZ3fu7kSSbztczm32TXkkp8t2377i7O3F3Gjnfja5j1ojoQKuViFLy0jW2oec6G4giBGL0Ld9lufJ4vfrvHyfeP9xTauPpuqJW+XFm2kcQ3t2N/PHP3jGUuKPAslYu8+x145KQkKit8fQ8U2ql58mhZny6rGhZSJIYJbsWtyd1xQD3Y+J8PlFLIYsnKEzDyDROANTVdcLBGlYLKoKqy1bUlLLMFFGiZSyDxdDBu29zu0ku7MYy1yt7Gc4GoL74/MUXLjFFb2GMArWb4FZnkWOKBHNZTphGnr5N5Jy/+JgKFG2srbkxMLrZL4dIBrQpKQ8OXJunSpgZD+s3tN6MWNb1Bur7x7osvshRQ1tzbfkWDcimoTaPajRDSiXO0tc+Hg8YJFLLSpGGIJRSuJi+AGtQtbHWHgOZXR4Rui6ZrzDUfhxd39t6uZEZYnDKA6aQ80jMI7U2LvMCpfnHayytQWyQJHC6fyCkwJCcEda6koOQg4P1+9NACiPDkBiDA+dv7yfupsiyFj58enIjpwXMIkUgJyHFLczGz8Omb4/B4wMlOGtd6uoLE1O/XxAvXmrVy3WK37etrVyuwpgHEGMaRpe4RDeLhqpeRx/CqzseLqHyRan25sot5UNV6Y6NnmCSEcmkFBjHiZxdx++7W3h0Y8oHQ33MMW84B6A+5pi3HGvd/K9E8a3YaYhExq5hBTCqFkorpBQdTJ8nztPg2twYPMaLRCuBtma8Pc/T6qQDJnos2caqzkvh6TKDBN4PA9M0IGshzAtivfDhCyMCpyHxzcOJqWZySAQJLMvK01Ny5jkkRBKlVoIq15VucoqoKleBoJVgQsLIm8dKIAVjypHTkKgBtCZaaNydJu7v7jEznh8vrLp6jra6eWtL7FABLZWWAi0K1tKuI5V+/LLxqIIzllsiSP94lfvsQDK8iIpD8J9vDbWe2yye2DLc33E+eVHNl++FmyEMuSVtxM4QWzJCjN1IiZstzTip7kBp7YC6tbZ/LMtCLaWD8HLL2O4sd2tdf92M5bpiveJ9M1t6fGEEGq05S9paZdXW2yL9bUHVvCikxznKzo56Go1soctfOLPW0dsWdafdiDiEhAUYUibGhKghTcGqb328dpnMM5gTgdM4ksYBsdZ3ZqxH+gkxJ6Y8Mg7Jn3OXxJzHxGlMXFNkvl5Bm8tyuiwlBV/8oc7me433Fmso/R5wNtoNi37NpIPbnfmuhdpcOlO7Nrq1ymlxU3EIkRSzp3JEIbTwVcZY6Ls+vRwmhB7v12q/+P3el61VtJtis5fyhBj3XYYtqvGYY455uzkA9THHvOHk5G92KUIQz3EeB28W3JIxAHIYOEkm58j9eXLt9BDJvfraNcY987izgmb+Jto66GitdUDtn61nJEvo4DBsddIQ7esepHFIvDuPTCVtWJ2goENAmxebhBApEfRuZMoBNShqNBUexozo5IkF2rDViDmSkhsMpxQ5j5lVoGVP+5iyN+m1psxinizSTXIO16zLFDbEqch2HlU8BcNuqRVbI2MpzXXKtbclfkVO4DikV0Crem139ZbAjc3L40SIkfxwR74785v39ipDvf22m1rE7w3fnXdo4+ku0dncLWWkM78BSDn77kCMxA2UitBSotVKWWVPpXBArUhx/W9MgZgDSiQNkTykDgh1P4ZNYmObNKaxy1vUICV/fluRTI0OXluVvXDm1TEB83IexM/lkLJLkQgEFZJFTmkgELyF8IuPZWip1OtCUEWHAQuhv6Zc2x5CIg+bjMplV7GDZBHX9xNdLvXubmTMAbVIs0gpjct16rGOyvO1eFZ88HvYwXOjNQMiIVgHuKE3XW6RhMKyBsxcQpNz8o+YmE5ncnLJj8uBNmmGf7yWGhNiYBgHj3TsRlbdC23KzlibKsQNoAutKSKNmLTnn28/+3UD6DHHHPP7zwGojznmDeducuZ0GoQhNX8zT4lIoqlv4ZsZ03nidJ5IKXJ/f2acBlIQhuzRaa20zmy6LERs6JrJlwUhK4jLHiQ4SxyCILFH1cVACoEhOAP3WsGfiPBwGvjj7+4Z1shynR2wCQwWMPWs7BQzTRPvp0CtyrxWnuaF2pRJzrwfB0qtPF4vlNYYZeR8OjFk4d0p883dyJoDWV2GcT6N3J8Gam1cPxlzqz3Bo7Oh0ojizH5AEWt4WHePLlPPM5YQSCH3hr/Gcl0pa2Vdym4AfE3ysbF6QYTWGvPlSi1ePDMOA/cP7/jZH/wBeRhJ9yfS+cTlvRv0XptdsyrSNejsZTTO9roMpMkmot5JfSREr8neteKdua7VQf9mfNNN97xJQuiRcpG8JCQK090I3JoWa6sYuuvqPTFDMfPkCbpOfhxOboCtbthLRJZpRVNf0H3xiXftsXX9tQjBXPaSxsHLU5rrvCORcbinROUuj7xmlavXheW3H0EHxpAIakiwLpkQUho97zwFxjExpoCI+W5REMbJY/RKTUwRz7K2SNXoCS4Y05B4viys5QO6VnJKjGPshtCZ1radCb/fTuczp9PJkz/GTIyR6/WCrw2Mb7/9Ce/fvYPeempNKaWyrsUXLzF6U2OKrz73nBIPD/dM74eu0dadJV/X/nOqnvhhvmNjJr64bEoIiTr5RamtEWr9/YXwxxxzzFfnANTHHPOGk3rLiTPUbshLwRna0AxtntSQU2AaMyklhiEx5ESPPga83GW3D23b7B1Qb9LV3WhnW/VyZ6e3Ag/Yt/mjfd2USAKbwHqLYZVKE4/zMjVCUjT5nyVCaALJ2+Fo2g2UQl07oJNCzREdFB0VG/2ziqLF0GroqLRBaaFRc6PmigRhjUISoYiyiiIJltyISSAJKRZSjBAiFjwvuiZfSFxD5VkKVQrXULimyhrb5t/70XG/mbBFuG1FKpsRLEVPuBjGiTRNpNPENI6vSj5UjCVUrmGlBmgbg64NFe1GTTcQNgyNejNWOh26LwLEevW4GRqdXSwYpXajZs8Z19ZYrNFCY61KGZUalFqMaq7VLstNEmKh3z9dJuKA3e+lGqFlQdVYq4O3lCtLqrQENbwuz9jPK7IDRTckbrIJRZrt59i6LOaL4+5FKM2zrGvFSvN7MDhod52xLybjtlMjt8KTvc3TjHFIXs1tkaou9ZmGxDhk1lJ9d2d7/UTBFGp/XW52QH99+Q5SjG4yjilSayJlf3sdx5HT6dRTORYaFWm3XYKv2GVv51Jkz52XdjMVhj3Dmt9dNBq95OfGZu/s9s2heMwxx7zBHID6mGPecL59fw/A6TRymrxK2FNfvUyCIYA5E526wciTPfobf09PaLDLFF4axcz8e4Zh4Hw+d8mFf3/qcXUSIkGglULAeHd3osnIeRq/uKPcRPl/fvdPkX9TiE2oq7cCalNq9SzkEKLLE7o22DW2ytKZtlqV2lxbel0XWlPykBjGTEyRu/tfM00TrSnr4oatnAdyHlBVnp8uLMvqmcI9IWTAyOL5yechkzugGHLa9cApec7xFhdX1sI6++9frjNlKfzFN1d+87B88bptqRamRhAv6hALNFuw0qjXhafffiIPC/cSGKYT8SuKh78YPvF//IP/hP/4m/+vM7O9rXEr4kD6Ikc+l22wp0m8BDzbn2+Lp9Yqtay95GaTaXRzo3YWdHGt9bpHsxlab2DOteZ0OdKLvGtc8rEpZba855wT5+kTmoW/+298Qr8URyhd4hJCTyz059lU0Vpd333xzOdN+12DMj9fX5XmTBJ5HzJJI+G6UpsiOSCTEFNE3sGQB4YUGAaPYgwooUtC0EpdGohwGhKMmdqE0oRcAqchMeeInQZ+8v4da2nElEl5AIz7uxFMyTm7OTWE/bVg5rnYNH/NeuW8X7NlXbEtN9uMtRSeLxe/R4vnXj8/X/znvzBqRqmlJ4b00iFc8+67U2GXPW2fDaMWj+NLOVOr661bi7R2aKiPOeYt5wDUxxzzhvPN+zsQGFJiHJITja11oObAEMR11Ule6DxlZ6i3Lf8tCLd3NrgetUerDWPmfD5Tm1LnFZo3KY7TyfWYCK246fH+fEaycJrGL6YINDH+X9/9OX/nJ7/0L3yGaV7+x+3nP4tz++wP9oOfkF3KsCP6zsy9PJ4fk2TID//cNaovvyi/8912w2QbAyhGja/TcRugFgnkPCBaWHWGqpQOqNOQmc5n4jcQ1AtmvjS/HD7xf/r5f+rf88Pj/med/sS+/EzsBzj8xfd/8Zr+8Pq9Ptsla9HQ13x0206JONNrZjTDNdhFmZ8vzJcFa0orSonKcrl+UZojAqME3oVMIHC9rtR5gTEilrDsEYxDzg6oc2RI4oC6n4CmnvWdUuZ0viOmRK2wVs+xPg2Raw6IDLT3kdqsM+oOUDePwzCO3N3fISJ8/PTIx0+PrvFuFXC99QaoDVjWhW2VYuZ69OfL1XPHl4W1//drMhpVpdZCKZDzsJtHU4qoJlLy1BnpsiXfZfHfparkXDqghpR092Icc8wxbzMHoD7mmDccl3x4vFXs4beqLovYDIaC7NvSYd+WDt14t5nnbqBiA6L7FnE3Nm5gJaUI4lvcWx5t7Ixt6mz11kT3xREH1e2VaL1/9vlXYF9ZPBNbUu414RGLiihYVVQaNaygxnqdWZ+vlGHpDXo/PibGKv8izue/CrNp4GVPCQGvUN+q07U1l3CoV6xvH69NDoFTzIQoaFCCuGZYTQgG1lzW4smJgmqP7ED3xcUmh9q2fHaDJv66ySnSDGLwdBdP0Qm76dDMj70WlyeZmUt/uim02U1aAXRDsXXAbT1O8Jb5vZXxxK/G5ombU2PaGej9I9wSWKTLlsxeFr5w6KWPOeZf8ByA+phj3nCm0SnmnCJj9jfSRa2zYolpnIgxkoeRYRgJMZBTdlBsCq3+jrbRy1wE1UZpvXZaGyZKSIG74Q4kstbKvC4ECdydz9zf37s8oLgB0NmzY35sQkoM9/eM8p5TqbR5ZWHhUj+gl5VCxaR4fFqF+jTzmz/4nvW/Of/LPvT/yk4IgZgSgV4OZMqyzHz68IFWFVaDZj1m0YMivRb7x5GfILzLI398d09IgU8UFpQ1wsUADdjSuD7PtBTIZDSHXnlfnTVO/noLImj1SMbWQKthzZjGyLuHE2leuSwrqo2cM3mYMFPm65V1Laxh5nJ57rrmxHkcaa3xdHn2hJgedShBuL9/IMXk0ptloVVvyKw9d3yaJmJKrHeBGH77xfOZUuJ8vuN0P+3rbqMRUyRZ64v0Dq5DIERnqmsLHp34AoBvC/ljjjnm7eYA1Mcc84aTs++B5ySkFDBVlh75JgI5J1LyXNiYYjc0BYK4UUp7osNuRmOzQLlO1ss9OruFg+08DoSQ0Kuh7YqJt8NN40irtes322d5xfuD/3WezxYtgTiMpDqSh5GcByw1z/wurS9mGkECc84IwnV8pJX6JUXMX895cS72SDnZysU9oWSZZ1ppJI1EC4iFXv7dGe0vPLQAY4y8yyNBBUMcSAajoKgJ1pS6VsQCpWw7P+q19wFIYWeC/TXhyirtGeA5ulm4tNZj8ZQUhWGItOZRga26Z6CZs8Z3d/c97cXQ2liXxVNYeqFPm2p/TXutey2VWmtnqCHlxDCMDMPskZFfev7BpUjDMPSED3VWP9xA8udMtZ/zEATtueo3VvvVhL5jjjnmn2EOQH3MMW84KbnRZ3P9a08J2NIHhmEgZS+0SMlNdL4V3HrFtoPpIMFZLVVqK2hzg+D+JpwS0+RxeSmPSIjUpgzD2Ld8oZSC9WKOFCJ/+vEb/gd//2/wcbry9777nl/dP/+1BoAnzfytpz/mT5dv+e9e/4R3ZejRdD0xA5fohBTd9dlL/HStlMvC+Fvjb/2db5l+K/zyp1f+7p8+sg5/jXWpBj/7zcCf/eMT311HfvGXk5sug0EHezknTucJq+aAWoPLNBZF0VclHy6Dtv468R0btUYTo0bdI+KWtQCRZsmlILjoQ8wjLIdhRFVZlsXTbBqU5otZf42Za7FT6l0pRisOolMKMA6A9FQRYRgGYgg0CV0O4ovdGHyhbE0py/oiOcYNxGNvCB26HtpNta8Aan4kK71LT1ptxBD7vzs3s6GqEmPoCS3RC4G0uQn6YKiPOeZN5wDUxxzzhjMOXoQRYyTHiKqneJTgWufTeWIYBkSiv9n2N/Gq1QtLuhExSGTIo5eULIszW9XzZM2MYRzJo7cUhjQi4jrqtuusjev16pFvIuSQ+Hf+4hf82S8f+NX9M/+Hf/f/7YD6r/F8U0/8b/7y3+N/8eu/yYmBb+UEvYyjmWJihJzI44CtipbqWcLXgpULD0/G/+z7P+J/PP4h/7d//5f8xc/+Luuw/st+Wv9S51//hyf+1/+XP+TnTxP/5k/ukXfeKhSigAnjaeSbb99hDXJzhrrMhUt9plnb4+i+OP6CwRrUUinaKMEoUdEoXOcFLommifv70ddA3ZAoFkh54Hy+Y1kWnp6eWZaFplCba6lrtwQHgWnIxBApzfOnAcacOY2+gI0x9ajFgEj0rPPmxsEYIjm7tKTVyvVy2SPsoO9Uxey/K2cvDOqGwldH/PhqrVyvV7Qpy7LSaiOlTM55T765RTr6vwfzcuX5+alrqxWk8dd6RX3MMW88B6A+5pg3nI0diiHu2bA/1C2GnsLhb55bjnSXZHSTm/QWvb1RbS/vsB6dJxCSt6zFiMiNndJuavQmRcFiRAzOJTOsd2DG++vIef1hy59taW77cX/+15///Tbb932WzvDim/YUuNvD/PjYi3QQ+8JbfT+A3/m7bSHx8ne+OILtb17+6vs18wfXe/50/ta32jOA9lQQ/5AQerseewwZqlhtRA385MOABuG770funxJLbp+lW8hmNNtP6hee+8tj+91Ijv//zpaMspn2eHHY1iP6fufw/GvvnzM/+37gZ08Dp3OAd3bL/5ZeC54iiL9GogY0bpF2n5txf/TQcLOfGD1PWVGMJoqKtwKW1kitx9nZS9kUbGbJLW/85WvKPHZmO9Tba1Wb+xvY2ke91dABq7eF6ovdpe0pbJKX3QC5Pbz1Y4ihH88P7pGvXJsNILvxUT/LmN5+x032wc5E17q++BX9Ccu/AobhY475V2QOQH3MMW84D/fv/A/bG54q4zB6hm9M0HN4e+2Kx1othVrdNFjXwl5XnBLaWo/AcmNXWQsGjFMmZwfUFp2dTp1NbZ21WkslSmCMiYD0uLJC0MB/77/4G/yN3/ykS0g6WG8VVZeIjEPyfGwJ5L4wKMtCWZYeH5Y6sPDkAYC1uvnRtZ4ZiaGbo+KLzDtxRr54I1+Qvi1uRllWN3KpIV3vHfEPT9twWUyMXuMsInuAQ6uN69PVkxfklspAjEgINFOWVlBTNAga4dtwzx+eEvNwJQ6RPA59AQIaBc2B+HBiMKE8L5SloShRvIHSEELzuL1/8+/e8b/6P/8J15OS706k08RwPvPNH/0hw/kMOcKYb5mIHchY17laB2S3zDvbFwn0xIhNLrAvXOQGDjfDGWyPfyuo2b+3/6y1vgsSPGXmxgobrVU3zjVlnmeuV8+F7ncrWgttnjFtPZWjA8nqn//0z0fec0cek8fFldWfanAm1yKoKARzkCuCBUVpNBr6g8jFH07BeMaf01OrPLfKVZUnbWgTyhwZo7G2gfN9xkQZknAaAyqBeW18ep5dw0wiRJAIsRdS0oyqRgj4vRmUFCNmXk4TtqQPbayLomZc54VrNxmupfTkncRpHIkhkjprbD3lY8tsL6U5kFcvT9LWXl1PeA51Y60VutSk1kpZi5+bWnh+fiLGyN3dmRSn/lqMnjqU7hin5ClA+SWDfcwxx7zFHID6mGPecO7vvNjFJRpeeT3kjLVGTsmBU6tsrYdbhXQtlVIK89VzeE/TCKNrPVtVDwBpSqkVMxgnYcgJJKAhYHRA3TJSG0/PV54vV6IEahqIEtDa0FoJJfC3//4f8R/84+Rv5lp2s1VdF2IMPNxNjEMih8AUM2LG5fGR6/MzUYTTOPZt5UgaMoZxWWbmdSWmxHg+ecJDisScN9oMRGi1MV9XtClBIrHXps9PV+qyOqAurqcdgGziUpilYrUxpIFpnNxwVoEG67Ly4S8/sFxnJEQkJDdo5YykxKqVpzJTtdKSUDOM54mf/tuJ5U8Wcsgk8UWARqFFsBSIdyOZiJrQPl4coMqWRsHWh8Kf/cMTP/sHv8BiYPruW8ZvHrj/ybf8yd/6m9x99y2cRribfHUQbAfVKg4hrTWs1T2reFuQbSUu2lovBbmBbGfPNxayG1sFtipN7XXi9N0OwU11WlzWkmJ0HT8ADTFlXVeenh6ptfLx4yc+fviIqRIxT+uYryyfPmKtErQR+s5KWwpWlWBGwoiD+weWUggi5L4rQ3AAjXlLo/XPyhY397oGvQBX/Jw8aXNAjfIsFQ1QZmENSrXG83XynYcpM44JJTCXhrH4IkACIeY9Fs/MaKvrssO2O6E9Oz7tK6H93K6l0VT59PjIx8f/H3v/9iPZtqX3Yb8xL2utiMisqn05t251kzRJWaYtQBJgGJYNGJKfJMMG7BdDf5be/GBAD4JfBPjBfrBgQIBpU6AtyZAJWqbQLTeb7GafPqfPvlRVZkasteZl+GHMuSKyzq7a+zSTbJpcYyN2ZuUlYl0zvvmNb3zf47aNIpasOQ5j00qPDMNgi+K2kJxJ5FSb5roF6ZTyyeVErUrKmZC7/3TYQH7/m3M+P+G9Zxg8HAY79tHCkMYxIHcHQKlqIH6vvfZ6udoB9V57vWB9GEphrVcDns5MbDeQhBqgLqVQSr6yiWwWuZs8wj7aG7pIZ88MSFuMcI+g7nZa9rE0VqvQQ2JMy1BXJZfcmFEDXZoVMmbZu1aqFtSBxIooSAaXzDXAB3Nl8Agu27ZF9SARwROKDYMF5wjSEwKbN28RRgLqOkPtqVRqc3yQWpEqSIWIMOAsi72l+sXiCKkNmyVjR2Wp+AQhG2u+ua+pgVVRJahDNBCdR6NnDCMesxZzxVFbfLqAseoRhmkiUMxVYi7UNeOXSl1uTg7gVRiq7WdYFXcp6FNi/faJoIH4WhnjhARn4MxL921pHx0Vb8x1Z60BpKICRQteTRqxKUI2hppmOtcY6hYkUzGXCpTGrDqUSvUZrYp3jiBdklCgySYGl3AucxwK9dgY1LRCLThXUAlUmm90bcx5EbTKFXI2llxc57abV41oCynCzicV8cIwDWgRwvBpHbG5a9h1lEpmyYnkWkcBobROTi7mypJyIRe/pT7mUnFNMlG3BFCzmNMmI+mn1Rx4rg477Y6G9jq3HQC7F2muIrK59mhVSi4kEtqY6arWCSgl2/aWQqlq3af6iaFMVbPjax2ufpy9t7RE38JsvLeB5h4WhdamWBHEd0mLSVf22muvl6sdUO+11wtWSi3IQ3tkuGMYYktIBBprqLUFUJTKOs/myKFc28q0QJibN3jTXRujGEJkiBO5Vs7nhTUXcrcAU6EUyBW0VOY8Q1WGYWAcLEL5cp7JKSENyplmuyJUnIPylIlOmEJApwknMC8LS0p474g5YBl0DSQ7Y8yGcaCiJLWFgheLCQc4Xy4s64p3gcNhwolvwApqLpTgIBvgV6qBBXFETNKCF8Dj1KFLpSis55V1Xi1OO1WcirlG1IICa0lkAbzDTcHSJF8dOXx2TxwCwQeWeTEpx8WZvheYphFGIRwiXj0sFf2tTF0LX//RL/j2T35lHsq1uUc4z6E5P9TzypoK+bywrBl/mPjyL/0Ov+X/OmEaGlNtGgORYlIK53GuyTya3EP0RvZRqy006Lpsc5QoXQZCVwtcoZ96u2oQWyB456E2bX1VxCTATXbQFlcx4g6CL4XXp1e8+YmQc+Lhm6+Yz2fECWW9UJNDV1DsOFcxltn1RoQD8YIEb3C6FooquIqLtuDRbN2XMHq+/PHnFAevXp0/CqgVyKrM1eLV384X3l1mdIzU0wF1wlrU4tYFHs+zHQ0Hh+NIwaRGsxpDW5JZ1w3DsKUarqmQi1JVGOJECJCaPAMAZ04cuS7kPJNyQcQzjBMgBB9MXy1CyUqRzLIk091vwhlY1sRlXiilcL7MzGvi7dvzlmT4XVVrYZ1n5FItFTGY5Gs6HBjH0WLhDyPeOw5TYBoiNJlOzdU81IN1MsIQ8DHuI4l77fWCtQPqvfZ6waqldgxDT1ZzziOBJvco1nZvYNr8ZHOLHBZjGrdhRG2g+spQ92FGY88s0a1rkgvOvHgVg8gqlFpJyRhJ5wNDa20vqbDMi8Wdi8WiO4d57yqIWtqcqDKFgBfI1WQHRnoZO+fEUaQgmJNIiKG95rWl3IeiVG1fzRKwuSRUC9QoWi3d0YklrDd22W0tbUGc2jcUtCXO5TWT5oQWW6QYn2ggtKImk8GkJdGZm8I4jpyOR3z0OGfacpdNitLH1yyQxDFOB4JE/FEIR6GmwuM3783Xt0o3XdhANShrLrZAyIUZIAaOr19T5xV1HiYw6l/pdG3HkCrXfeitBvMaVly1wTjvDLTVWqklbxIQuHKp14ZGG470Aee8aZfFb8NtjZ5uv1NNkhIGnKsMQ2QYI3ldmS9nUs6UNOCCR9WjRayj0QY4tbPntlLYGGrRxkxruzdcY32Lbv+ehgkNjmGMn5jN08ZQV1KtLDkz54QE4+cRZ0N6uZJyZc2FmAu5VEq1BW7N1VxCaiEnm1dAHD6YLKlUY4FVnN23mD1fca0p4Hw7pq0z1CVATdMfQrQhw85eV6Wkfn8DzhZsOaXNuWdeFi7z0mz8Pi7D6Gx3yXYPaRtNCMF00eMYLSTGO4bY7iUw95FawCviAtXtDPVee/2TqB1Q77XXC1ZPOZQGjDbgcqONvI0M7k4CFhtuoLsq5Eveoot7K79W3RwB0lp4erqQcmWeV9ZsrXh1semtjVnLqXKZza8WHwjV3pjPa+IyrwQvjA1YRhrYERqTBeL9BnB98Ayj6TIr1qoWKh6HqOBKQYqx1gaizYN3uczGFq+JlDKCMy042FBhsYWDOItkV1UkN8BZoVSLAPeNwa+lkJeCFgPUJZuOt3b/aDG8ihPGcWIYTOc9vb7DD5HD/YnT6zsQIZXE5SlR68g4RUQbkI4jINSirCUZqD6MyKgcf/w5n6dMXhLzt0/keUVyhRbyIm2YUqsia4YK69dv+eYf/BFhmvBfvMbfn/BjYHp1wsVg2uI2JLYBU+UqAZDGKCM2RSeG4qWB401vzZWj3ob+BKoEimsdgT672NhkVXC+mGexKtOQUbRprB34lfH4RK3gUMrlwRZztGNeqyV5Nh14SauBv6bTdah1XbwzXXq8SnjahrKWlaKQSv7kUGJtC8RSKhbZHcgKy7ygXghTIAwBFU8uwpqUlCHXNrypBnbN0aMCDnER5wcbjM2JeVlJuXKeTYphd3LTEDnr6aScyAoVR1EbZBSxxUPvMDlp2pY+FFyVde0piib9UBF8iAyjEGJFPgFyXRv2HaJ1mdZl2c4jQAgm8fCuu5HY3wyTlOTmgmMSlxoDWve3/732esna76i99nrBKt32zt57eaa/vGEfO8sMFvKA2pvs2rTU5/OFy2XGOcdxOhJC86x1ptOd58SyPJnkY06kYq10P4xoFXKCZa2sa+bd08Vijv1APBhz9v6y8vR4ZoiRu7vJhuxCA7ROcNETWvhDbfvhYyB6aaxbpRRzDKnqNhswbYyj87ZIKCXz9GiLg2VNpJJBhRhXA9EKojYs55wQojcJQVQMYZlm1FWxVD2EmpTlySKc82LDnLaFDVA6oUZBguPw+Ynx1YlhGrn/4jPiNDCMA8M0UUrml1//Ge8f3nNMR6bDiFRhnEbGaaRW5fF8YU2ZcXKM9yPOBe6dY/jsDfPThV/8/T9mefsAlxV5LC1KG0Jj0euSIBXmP/0lP396wo0Dh5/9iOGz10yv7wl/+XcY7jwEDyGYZERMOrLZsMHmyNEpcW0dDJuKpLGudWPnoatpGlMsniotmdOFZ4s6aZrinrrnvWtdFkWoSFo5LgkXB4L3lPmJss4UB0UMUNvArbJczpzXi/l112z3g8OCRESgeqTGq27fKZqU83whUVnS8kyb/qwUcyFZF2oCEUeIkbVWHp/OVIGTvyceIognZXCrsiZI2UCxq3Z+wFnYjCrOj/gwUWphXh95/3ThfF746qv3rCkzjBPDeLg59tjN7b0Bd62sBeugtMWU2447iHicD5Q1cZ4fWda1nc+AIsRhxMeR86Tb34TvKu8c0zAyjQPzPNsAc+tuiNBYaQheCA6CsxkKLcmCaZyDEjZgruFD28y99trrH6d2QL3XXi9YvWXbpQAATRzd9LHtS7B5yVp1WcR12CnnjHN+k33cTHu1AcRMLtUYqFJRp0ht/rxNLlJKbT9TydUeWrW1tu0NtzRZQWlOIgaxOgu66VcMKIu39n2+sqFVLVnumU82V5a1tuGszrebJFiprkLFdM83PrpXyUwXufBMV6tq+1VLNVmJGqu7eQh7wQWPBE8YI8M02OMwEMeeVGkLgVoscS6lRF4zXjxxiO11u4a5DZK1gUE3BIbTgQLE44Gwmv69XlLfQyhNMVstcrquiXS54ErGP13QIeKHgZqzyVV8k39sAmQxN5BqMgmcv7KX0vzN1cJKrhdH6QqOraQBO5w39w9xSJMndPlQl5dsMdbe20vUCloQV3E+4EPEh2iLu5ohBFsEtK6K1mosdDt3di1YgqF1Vpr8xxvLq67aheLadfS9pnlXqZGpiWy/tSo5Z2qzZLTrv0eKt2u9tBmBUpDaA2RsCLVUG3QslTYkWMnZEhfXNYMExDVPd+0Jmn6TIpU2FyEqtnBV8DcLZrleFZRq96vXphNq8hEnfBJM0+4B703q5bq/ebs+t78l0v2vBefsHLjmma3t70bF/k59Sl6y1157/ea1A+q99nrBurQ2bNNvIIJ5OgePIg3QmuY5r7l50zaQW66PXKCoA3UUFVx779P2xryuiZSN1T4vmVwrfoBYPaUq53nlsiSWNXNZstltXRLDeQWUjIM4UL1jKUpWAxCPNZlTwJs7vBstPjl4ghMCQhTTbK9YnLGqkmu9yltMwA25tGE4A2IKRBdw1Vr1uWlLa67U3DyNc7bBu6K4xl4PMTLFYGzvU0ZLoaTCuqyUbMdXgklWZDDW0R8G/N2IHwJ3P3rD4c09cYgcX98TYjTQlS3R7unhkXdfv2U9L9vg5mdffGZOIGDaU1Fynnn//hvEecbxFeOXb3Cv7/npdGC9LJx/8TXv/uCPKcuKzqtZ/Kma9qYqugLOtLMPX3+Fzk8s68Lxy8+oVQmvXxHu7ky3K84Yam2DhWo6fOca0O7AW41BRsHVav7SfWGxPRqoawDMwmb8JiPqHtN9ISQiDeDaVWLOLB4XJ2ItcEzoq1eUdaBERxk9tRTS5dK0wgk/GsguVJa0MoTAcRyIwVOdowh2TMQWEtVVSLawc+HToFJLQZeVugI5m6/7urKez2SFED3iHXmIjMG6OU/nlW/fPeEElqdH0nzBB8/xMBG857AUlmRA/PFpYZ4z81JYU2VNlSqZwkpVWFbzm47DwHg6Ik54vFx4uly2hYkCp8PEm7t7gveb/0oulWUtLEs2lxw10B1CJARjsT/lcOK8ZzocOJ0ONgA8DNYBOj+RkiV0eufxIXA8RE7TQNXC8TC2n5t5+/4R1cLsF2r9+Gvttddev3ntgHqvvV6w1hayUGtBSzEZg3cW7IAxVLUUUsosXQNpDWKKYoC6JbxVFUSF0vTDHUzXCkvKzHMil8plNaY6VEeRgdLkFWsqLGtmSYU1FYY1c1ls+woOCRF1kKtpQOuyUJYz4xB4dZw4jCOKgWLnLcwkuhbMUpWapAXPWPveNZYT2AbOooPgg7F54nGNqS7V2OWSsnlPqxJU8dqcM6q1zWMITGFCc2U+F3vd0nS0uRjbHBwSHH4MSHDE+wPjmxN+jJw+f8Xxs3tCDIynEz541vPCkhYbCDtfeHr/SF7M8SQ2J5RXd/cGLKsNKua8ktYVnCcc7wlv7gkqjK/eQFG+iSPnr9/C04WqQq1AKWhKG8usi1KT4yKF9fKEClweHnEhIKcTg4/gWyR9d4RofuXShuSuINnAkOu62AaopWmVO/PZh+C2bsnt73fdtWp36rsORG4DgAVVh/gBHwuMK3I8UWOgeCUHqDkbMHcrPkVc9GhpQSQpGVvrLeDEBl17qmBFxba5rgVf1WzdPgEqqYWaEprauVGlpsR6mcmqLOcBFyNaKuvxgPeVeU48eAuoefj2LU8P7xnHgc/evGIYBlJRc8QBLvO6AemUlZTNK7xgUqyn84V1TQxT4c4HxDvOl4XHp3Mbxk1mhfnqFcfxYHe32CPXHsxS8AhBPE7BR7GFp/efBNTeOcZhbIOHnmEYWNeVeZlZ16s0yPfB29PBujnTaPdafUv99r3NPiyJqrdttL322usft3ZAvddeL1hdtVCbfMJVIeWKb0Nf2oCxtZibBqS5YeRsb+zl5qGqzGsmF5vQ92EAhKLS5/k2KUdJmSRzG0SqxnKKNHBuA1FP50t7064g3lrsTS/rfEDiQAihBV5YpLniUBVSbkl2bVBLvNmw1dYKz7U7N+jVbUIqeHMBKdVkKN1qr0uAEQ/UFjJTcWrWXo7W0m6McsnGTtdiIBcBa2DbkiREjxuCPcZw/TwGJAYkePBN+tAFKGJpkCjkJSMV8rySl9Vs+lzFiQ3fmd1cYV1m5ssTTgLBjbgYiHdHTj/6knSaWcJbVvdowK9kajJvvd6aFwLegdbM08N7ihjokVf3uBjxw4Q0zXxnmLtc4zmgvspo+geVj0RZK7douV2rz6U4DWNDH+6sV5eZ2hZ5vQFh+LsBMjErP+ccPgaGcTTvb9fkR/0aa5HdJl2pTYcsSDGJjlM+OZQHMITA/WFCBeaUoBSWEBidNxeUUsjzgqiyXGa6DzmYLKkixHHCeU8uCikjbt2Oc0qV0u0n28OpdQVUlbQW5nmlYvMKzjsu88K8rG3oD2gLon7cmts2+UaO4rQvmGBNljA6f5/LRz9nbSFkCarPvetzyaTsSClaaiNs8eR9BsMrOLF7e6+99nq52gH1Xnu9YBW6dVpiWVLTAjtjcbUpKVXI2azrTOphwNJCKYyZnpOwJKhaeDg/UhWmw5H7VwPOOZIKqwpJYc6W2pbmM2s5m0ZSBXWOiiMVZc2V9eGJt49nvPe8fn3P4XCgGxiIQHCeME4MwTOMJ0KcEC9UTKKxzrO1y53jMB0IYSLpwpoSFXMVkZraMJzBtJAhJkBkA2VwhYLBOWIYkFqp6UJNZp8XvbfQkQwlFcqaWc4z62WxLkDDlQWzUAtOGE8D4TgS7ib86wN+iPhXB/z9hA8BGQezPWssPUD0gTEOoMrycCaJcJ4OnI8HfAz4UyQMnpwT6+ViQ14SWZbCMB149eVvMR6OHH/rJ/z01RvyvPLNH/4R7//kT0nnC4tm8rmF5BTzmPN+YBw8JV34+R/9fYiRz+czXzhhmA7cf/ljxrt41T43dr86+3MtcgWd2lxlqhSaS7UBpQamr1pjrgNs1Ov5KA1OO4fQvK2Lgf/SJEVaCiWryXNKNTa3A2sRs5gLHiUyccCJxdiny5m0XAg1oM6GRAWPU49WR9WMiuLEE9ShUvFj+ChpKiJ8dnfiL//4S/SiDE9nHlIiirHEc87M88rjvBJioKZMHAfiEJkOluz55vWJV2/uqbVwWWfqnPDnleDPTaNsloQpm1qnFGwYViK1wsPjzPv374njyHmtOO94uDzxdHnCec/p7sQwRNR5cnewKbYIXNdEKk3agh03VXh498iyzDz+9kJKH/ehttkBS2BNKbEui4UzqeK8p9TK0+Vi8i5XEXLTUzucCFohhhHvKiEMeLcPJe6110vWDqj32usFS9tEVlWaFAJyLqT2ptYDXqo2BrqqBUm0Fnnug1TlOiS1rqaRljBwrDaAZ4Z10hhqG6pac+G8Wqy5CwPOh82CrWqLQy+FEALH04mpOxZ0+YAPBPHG9PrQIrxlA08pF+Z1JfjAOAk4h4rFwtTGaHYNaaUxm/addkx0swIEWqJckyZs7Ggbamxpc6JcPbtzadHNjZUTe52CkZ3SGepbdnrwSPQ2aNfYaXFXxGbnxJtvdEp2nNZEXhKo4iYLkkHN87loJS0zyFPzwKjgHf544DCdKGvm8du3+HfvKCgavaX4FWMKRYUg5sSQauX8+EjxjvHhPXdPT6jCMZduBWNDg2LHmW2IsLfqbahNMfu1TTe9fR+gBwMp175Blw7V7XwYOwyqhax2jIt2u7VC0f7RtNFKRUXRzkK7pveODk9Ei7AmIS2VKJXioN48VKD6xnoDDDaoiP+4BEEECy85jagoh5JIThmTZxgcRRxz83euVPy6kKkkLRRRQgy8cneEw0hOiTKb+40ppG1gchyFENzGTttYgElvqkJqUquCIHFBnGOZV5Y1EUI7us6CiFTZ/g6UNhRcN+lWGy5GWVOycJclfXpQsHcUtnTVYr7327ctJVIEUvKsyeNFTG7WtscGH6Ux1LsP9V57vWTtgHqvvV6wlsWGgwz4GViZl5WUEtEHpskG/SoOVdeAtQVPzEvm/eOZkuuVZVZHaj+3ZOXxsuKcZ14Ta8rWPh5GQlCCS7jaJB6051VFvA0qlaqUnKk58+27dzyez0xD5NXdgeA9gzNgVFV5mm0/ohdKEERMT5pwFIWHZSXkYqznMOJUWdK6MWzabDrUCU7sz8yyrpbOKGarZzZq2BAiStAWqd7cC2gDm6xYql0f8FOliqICYYzEMTAcJ46f3TPeHwmnieH1ERcD4XBAYgRnjhSIacf9MBByJcSBGCMFQZOlFjrMTk1rZV1mqI6slRgDHsg1s54fSLUwvn9LqZUYDwzjHS56jp+/gVJZHx6RXFkfH1nnC5fzI+Ic02efMb2+p3hhCJ7qPNPp7llsdqlNVOGeg2RVuUJlvbrKdPAn2CJNhOaGUdrPmSf0n/mv+C+m/5Kv3Neou3YMemS2gWM7r1qyzQJooQ4XqJmaZurde7RmyCtaVnP5yKmFFpUWNlNJ84W0Lgwx8vr+G4YYW7hR80TOLfa+ghahoPw/f+trkv9uUFmc8gd/9T3/yb/9czQp7+aFSy48LgtfP66kUphrYSmK+MJ5mvEhNf32jPeex1eJnx/fMXztuP9/BYZvrvKfWoVlyazJvN3tvi3M6REejfmdl7XN3FbmJeG8YxgnpjvT559OR2KMlkjatfBirinOK3EYsQAa5TzPJgFqaYd5dIg7A+W7978Uzpcz+lhIjaUupbCuKyknFu9Y1pVaPY+iaM445xhjxHnHstishdoQA/4jr7PXXnv9+WoH1Hvt9YI1zwugjf0z1igtM1oz4zgR42Apa+paKMR1KPDxsvKLP/uWNSWmw4nxcGoDfJ6qDk1QnxYskKSQa8E5TxhsSCm7BVdMc5yy2e4lVSQEAsLahwlL5uHxiZwzd3cnlC+ZxoHsoTh77hg8uVSiF9ZB8GLPq3iomD4Vi+g+Hk8IsKbM05qA7iQBBEdwEVS5rBcu5wXvhGGI1ob2FVzBi/0xCs7jGzNtA2cFXUpzBGley1qpYuhxOA6M90eGuyOvfvQ506sT/jQS7w8Wez1EiNHo1+7lPQyEcaJWGMaRYZjIrOiatrRFwNr0l4U8F/w4MJyOII53TwsP5yfiuuCnI+u6cLz/jHg44ULg/sdfcnr1muXhESee5eGRh3dvSd98hTjH8Uc/4v6LN6j3lGFAvaMOEzlXSIWcKzmbBZ0LTYrRg0WarlzonYx6Y9ts3yvFwLgNjKbGXFpa3+8Pf8D/5vAf8P+Of+/jF7FeP7l+2qYWN+F7+25/8ZvOQ+9S0AYmBWlBP1fW/Pqhf25M+xIqy8cAtVf+q7/xLb/319+ZzKW9jqp1aPrr2jMWRC7tsLRFiICTrxEnfP77J/7VP/xtPvvmeN1XhXVJlFJZlsR5XllTZlnWjT1eskXe11zJlwXnPZ/ff8HnP/oC7xwhBrwXfOu8qGJdEQTvhWFUnI+cL2cen55AlXGaOE4TeXI49+6jpyXnzOPjI+n90mwxjamel5WcE4IwDwvJe8q6snjBe880mn94VsilHaN8XfDvtddeL1M7oN5rrxevm4EkrS0iuoHszrBuXtA3ntDV/KJTrvhSca2dq2ot4lJhzeaH29lnFe1Wvp3U3YYQ+xBZH1az+TFpMgEaC26+uKk05wEcUtX+nQ3ExWppiW3iqskyDCz5qhvPVduwJC0xTjBZS20YzOwAK4rDV4WW5KbSYFeXgPRhRKWl2l19dmt7XcOXNszmh0gYommmh4iP9sA7k3lIH4Qz4bWIw/mrDKQP1JnEQq/DfJvNXI+Dt6dwLYnOWOBCzolcbLDMt2HNMHlKKsTTiVqVWBJhmY2pHEeIERcC/nCAEEjegjZcMA3vVb7RMOwNVJR2fan2ITW4Sjuum6/ta0UL7+Q9D+6RX7g/4yv5hm/l7acu3382S2AdK+v4Q/2T9YOPYFc9zPeJy2eJ6bNEmIXwZN2SnEvzbu9DxN3PvbRB2iaZ2eRJ5vMcfMD5JsnRfn/p1jG4+stfvdqvA8z1B/tCm9uLs1RKvV4PfWDV0lQrBZuvqAox1LaIf35Erh74e+2110vUDqj32usFaxpHUDhfLhaHXOummKxFWVOhVuEyrzyeZ9NIJwPVl1RJ6skoj3PhaT3jnGOYbKiu5Eq6zAZkg8cHj6iSJOO88rSsPM0zpRpo1aZbNklJAeeI44BXJY4jqooPjktaWWsmx0AZgw2IXZQhrRzGAQ0HgjfIbvbHBjC0VpIrlHlFRJhVqGFs32+IIQOraT8fl8z5kojBW0CMd8RAC4yxQcTBC74ompq1Wq6Q1fY9F1JOVGd+fC54xldH7j5/zXB34PDmnuH+hBsH/GE0jbez5EdDsgFwyDDij2ZbFg4H4sE0uSxm96bBYsB99BxPB9zgSVqZNVNLYToMjHcnc0mRwrI+oY+eIgM+jNy9+pzD/SvCdOBePId5YTg/MT68N7cQUR4FptOJz3/6U4ZxIiGsWOjKdHpNiIfmRd3CRJqe2QbnzFrPwHzzMu/2dyKEEG2BoCZgOcvCf3z4T/hPw9/mV/4r/tT/4i/2JvlnoM4/Wvj//ju/ZHwX+ey/mPjR/+WIu5iTzRaGVG0CAGcLN7T5fhc11nlbkNmiTNUkX7UWgnMMIdiiMtt1k3PhfLlYt6BW0zZX5XyeSfmBy/tEzh+XYcRh4PWb1xy/mDifzzydz7iqTM4xaMU515yBbLuXLlOKA+ppnQLTTdd2D++1114vVzug3muvF6zY4nzlciGt1iaOTS9cq5JzRbWwpMxlTZSq5ihQTSNd1FHUkVaTdPgQuBsODASWsvI0r6hWxmlkEIeo4p3RwHPKzM0H1/locdO0JLhqzg4+RotGbqxrrYW1LGhWEMUFIWtF18paHNUJg040sYSxoxQbnixKzcWsx8TYafUWnJI0oxWkgEumR57XypyKOZYMHZwDzZ3CO09wDlfNnk67d2DVlu5YbLHgnMk5oiMeRqb7I/F0IB6PxOMBFyMyDODcxp7b4KMFfYiPyOjwFfww4IeIK7kl+IlNODrzcx4PB+Jh4JIWzueVopXpcGyaZ3icKzkv1OVM5gEfE8PrzzmcTvhxZHIBTZmwLITLhVQS796/Y76ciYcj0+c/4ng6sVYlFtPTxumIa2E4uTGbfbCts/jqpHU/yjOGs/sQd5YUhFkS/+X4d/nfT//HZjO41/Iq86f/xjukQPrVK47JEc6O1PTr5sHd7OaajzZVWwejJUo2C0DXuh6q5kOdc6Z634MQbQAyF1JKXBqgdj4QQqRSmZfVwlnOxRa+H6kQPMfTidPdgVKr2eyJEr2/SmyqebVTC2ihAoeqBDX23DdArdnupb322uvlagfUe+31gtUZIO89IQQDOWLygJ6UWME00LmYHlOvbhmpVNZcmdfMvGZ8CBBGxmJ+tcuam6/tSipm2zVgrGVVmnd0kzS40IIjTLKhuVC0ICIMLYLb5BQjYAOIIVjIDM6kHFlhbbpRarFhNNOzgCoeQZu1W0pmDVarktaWskdCWUEtUVG5Sk5o+lrvHP5mENE0wgYAekxy0RZ1LjTf5wN+CEx3R4bTgXCYkODNzcA18PzMi7nFbiMgCs58kH0MJhPJydhGNT/uEKPpYUOwbkD1hOARbXpgNXA7RI8LpofPOaFYO75rbSRGEI9znhgjrhROPuCOJ46nE24YURcQaQYX4jYZig0ZtuFE6e152RIP4dq2l26P1s6/ff8qFOkSnX9m5Rz/tKvLYqTLnox5LqUN8jam35xkEqlUxGH2i77ZDHq/2dXNbcBwWVZKyVTnzYsb0z7X5srRz5frnQbnOJ2OhOi53K1c/AOF77bO64qr6zVt13IttgAQaUO9DnywaPQYPTGOhLZA6zKgrr/ea6+9Xq52QL3XXi9YIdgtNQwD0zS1VrzJF6oIc0oownleOS9rs7ibEB/IVXhaMpd54e3DmfePZ3yIvF6UcTxQMUbSgNEMosQYefVaGMeBrCBhwAM+RGPVfCAqSM7oupK04rzn7s09x9MJ7x0xGqBLy2wDlFopaSVXi3ZmXi3pbZ3JacGJMA2R4I2dI4yoCOfHmYfHC6VUUiqmHQ6FcciGA3IB56nNrstsvLrntOFcLQ2oO0FwZM2sxQbqikB1wnQ68OZnPyJOI69++iV3X34GMSLTSPEedQHvY/PSs2G4TWdqCAmKDWvGw8Th/g4E/MN7QBmmkel4JAyBYRoJY6A4GMmUWnBeUM04F7g7HRAfebxUvn04g1vJ69oSQRwcToAweE/0AVDuGsASZ77HRcw7OhKuSYfONdzfIsEriNSm3W6piZRN7uF9aF0H14C125jWejtcuNevVS6VeU34RejhLHGIHI5HnPfo+czahj+nITRbPAHvm0Vd4ttv3rbhz0TVggPaWC61mg2hYWG3yXbGwTzl71/f44Lj258+8H5YWD8CqNsQhIFqZ9eIFiVlk4rE4E3S5S1W/TBNeO+YxkjwnpQT67JaomNjzPfaa6+Xqx1Q77XXC1ZnDnvrXUQsuEWsvVpaUmCpLTSjuTe4xkXm5ku9psx5XglBGcZEbYExNsBngS+KMdzHUvClNobawOo1lU6tLd1YT8OVQoiBYRrMU3qMOCfMbciulkwuFp9dFGPCRVhzJq0J752xtc5YdW2OHrmaF3YplTWXxpxlFJO8BLW96Lxr931wTuwoNHZ6Y6jBnD6qXh0d2iDicJgYDhPxMBGmEUKgem/Dl07aEGYfNOyguhkg98RBZ618F/x2fPrDt68539r63uG9uzKEWhFRQnD4GHGNmaSyRWIjNNDlkRiRYQSB0Nj97ids2ueAEwPUNEcM3QYk9YaVvrLTndTv/zB2WrbB06vB3veUgsfj+KG+xK2/cDtZ15w0zPnj139Dtv/92tP03wKgilLlO362/bxTcHWbuvz0Ft6y0O7j7Ly2OQPqlfVXMLu9ELbI9w6ExXU/c2fPXZVc1vY8Bp4dZn4nzW2l1mLDi2Fo58j+PnjvGcaROEYu07p1uD61X1uvovuUbxr66/kPITIMI85J2wdBSrmy1PDME36vvfb6x68dUO+11wvWZTGrrjktpPbmugWaKFQxpmvNhTllFCGI+UevxVjs6hypdqlF4bJmisumTS6ptW0LSmWaKuMxUcW31zEmzCO4Zpe25OZXWzKlxbDUZg1SpbKWZJHbWlBvg2xZldS0y75hkSoB9QPVwVqh5MpQoDTWrYgni7nbdlY5K6xVjdUWiALBKU4C3ivBi0lNRIiqRAWHRUirWqz60oa4inNoDBai8tkbxtOB4dUr/OmEeo+MoyULhoiEobF5Nw4d2sBKUcACcNacuSwrWSvjYaJGS+o7X8744qmDEmWg1ILvw2cNyPYUOmPTKzmtqBTSupDWBQkD7nBE/GCplZZvg7TtUDMnBmxJxRYFLdv/xdl147zaYkSaP3lLnRRx28LA+9CAtT2/8xCqEiR8Eqjd6Yn/cfo3+Vfyf/sZyHfe452ztYe9jIXbpJlaM2+//Yr3b7/GO+F0GBiip6SVtF7QWnFScZiuewztueyyMwlQyg1sVkrKZK38vZ++5+/8S9+Swq+DPV+F/94fvOK/+/df4VqCpoUJ9QWpkFXJqlQnpBgoTviT33nkv/lXvmGdvlszXNUWg1q7M48iLdFQEOI4cifObPNW65h4PKEtmJW8xYDnbDMMQwgM42B/C7LNU4QQOE6BOETu7068efMZzgmpZkpuPuufALm1VtZlJSwB5wN3968opeBcJKWE1sqy2IBw9IHQAHsItjDsEignjjhEfNiDXfba6yVrB9R77fWCdZ4vKGphC8V8jc3woicOagtpKSb/UIcn47wzdlccVcwzdkkVVyt+zWQya07My9zstSqgHJIy3a2oCw1oV+tGA66aF/WcVgO3NZMoIA51Ct6iu0vpumxL/auomXNUGwgMDbBU5yEM5iBQFCmVsUIW02tmZ4A6o8yleSlLxaXcPKcd1QuDB3HV5CaeDVAP6hjA3Cma3WDqxwko3qHi8acjxy8+Z7o7El7d4e5Phvji0NIbPerbAOJtIlyn95wNaKqaLv0yz0itjJNlR6pTni6P+BxgEIpU8EIIxlQWNU23E2OtvXcNIC5UHOsys84X/CgMdwEZRmMxG55zNywy/oZJ1hsKdXPps9WME+x/aqBvi3EXZ8Ok3twcbsshBITQpSR8N6l7r/f8z+d/l//V8r+w7sJiPscxBNN9OyF68A5yOrNe3pLWC//wD/5r/vgPf58YHD/98p7TYWC9PHB+/zVaM0EyXgrRe+4PI0PweOxNR6uyni+kZSWnzHyeWTTxH/0b/4i/97N3pPDr+l5fhH/999/w7/2ff4c4w3xeyang1OEI5q6jlbkq2TvOx4kUPf+P/9HP+aO/8p51Wr/znu2Auhazrqy1IqWStbnPjBPD4WiL02/fsi6pLQxt8aLZFq61VtJii9d4bJp5EebzmXUxn+ghBo7TxOv7e370xecgwrfvvuXxabnR3n931eaP7eeVYRw5HO4oteJcYF1W5suFx/fnNggdCCEQY2A6jNvsgjTHmyH660Jzr732epHaAfVee71g3bZTu3etwVuTOZQb+ULX9PaWc21fM2mGaSRtgM+G87QD800soZstXirlZgZPrl639EcDZm0QSpvshAbCobW6u1zAGbt1lYoIogbERRVbGlyjlasziUjf1u6F7Toa7JvcFBcheGIf+HNi/s12ANvC4Hb7m091HwQLARejuXmEsOlJDVzePDbN6a02Qjfm+vbYesGCVFS31EDZjrkitR3IZ5C0H4tWcvsztz8nz+cjW9Q6yJU1bz93u5lXiYK2IU23jRluHsJtOz+UdzzDZTdDjN9VgjCUyJQmtCqDmlNNIBCJOBWCKk7NhWatiaSeO73jTk8MKtzVA6cSWUpC8kgtDo+d1xg8pxAZ1ONV8Wqdj7B48hooGWKODOqYqr/d8Q+2E4biuc8DMUFMlkgq1SG1DXHW1pnpi6/siKkFBX1s/6Vpm50lZEqXy7RzVFWhmJSpbr7fsmnV7Xjr5ghy7Yg8l8AIsiWB9ke3urFUy/pJrXvVlqSZM3EYbWC5WLiTa7Ikt7HmNPbatZhy12Qh1322sJ299trrpWoH1Hvt9ZLVWMSUM4/nC6owTkdiDNRcWZIlsRWEOFla31KgpERSxceBgCdOB+I4mwzAeYsqdx4XB0Qr2hhqdZ6ny8JaCuM4MB0mnJNt8K9ixKc6IYSB0Zs8INfK02zylG3OSdqQofMcTiem49HcCBo4rTmbvRyKaEVUyQrvns4IwiUVCo6sjrVpwcdoTJ0XIXolepimgTev7rk/DNw5x+SdyUqWloaYKyW1j6WaFtULw+mIHwfGV/fE+zv88WAyjxAb627Him6RtwFnx5Z4A+A9DAOUbJ87SyMM3uGBcYocpsEACkLN1cBW0zRXLPZcG1Ps2sBZ8J6KR5xsC4FNviG2QOmLnV49l/E5Lu/wuC/PDPA5aVKPK9WOd2H7rQ6YzLmla2x9G2C8LsI+rFor56cn3r17S4w2jOebhMQHG6Ss2lxbVKgSwEUOp1d89sVP8K4yTB4Xwa0DzkdbJCZL8KMoZagW/JMzmhLUSkmJmguiMA4HvKuWJPqxe0tgOEROb44MkzBMAyUVylJYzyu1dVNGNeB6oSLVrtVP3rLem954kBb7Xk0X7zzguMwXzpdLk3ysKIrzjnEccc41Zw8DziEEJAScONZl3RaJgw8MIRCdI4jHqQ3gWpLqyjzPrKvFuH+sSs48PZ2pj4VxOjCOoyUlXmZySozjhHtt9n2o2eqlnBEHMQSaOqhdku6Ti6y99trrN68dUO+110uXWOt4Wa3FHIeDAT7UUglzQTFPaIpScya1Fr4LAY/Dh9ha+CZgrbCFSaCuc9aoCGvKFK2I9wwiTefbf0I21tkHzzBEs6NTZVnXZrdG86gNzblDCONoDBrYoF1DfNoYNdFiA1cK85JQhZQrppoVi1RXZWiDXN4J3itOlBjNheB0GJlQImqpkA30aqnU/mguFc4JfowMh4kwTbhx3BIHTebhbsC0u2qnxQJuDDw0GUFzaMCHZrFnoTXeeXwf6Irxij6qAVstfeARYx9bFKU2oG5spdsYwtuBQcFkCe0o2v/7Mf0A48otU90vqPZ1o1plA8zOXXXXPUq6tIRNG3yTxm5//HJVNYnS5XyGw4HT3R0xRsR1MN6DfFr6pnhwgTgcONzd4ymEWBBXr0En4s1CPFeKtHPpHDUXymJ6X5vWtRS/GC1p0HvPxzZWaNfwYWB0Di+OkgqrrJQ1QVa8CsEuWZxqA9QfdgyelxPX7BHtvqFWnA9bFyOlzNP5/GyIT8QRQtis73qXx7urVry0kBZRW2z5ts2+M+AtSbXk3Lyq8yfTC2utrOuKzCb7sWFD13TuNnwYQkC1Ml/OJt2phXl2lFAIwRGHcL2v99prrxetHVDvtdcLVsUApzZtQ62wpkxlaQ4fTU4hmH62FHTOpJRZU2VZCjlb9HGzMjagjVnkHe9OAMzLhXWd7ftURM1P19jJq4tA1SsA8yEyTUdjULVpGBqgBppjgIER6T7KyOajLZ4NcGhR0LoBy95iTmsipUzJhZILMsIQzGJv9JXRKYMPluOoihcITdupiA2GFRu+KrmQS96kKofDgen+julwaM4LH0g8epiJPGd9bQ2gm8qiU/LizI97Oh4grayXM1IrTjNSs22TNxDtoidMFguuXsC7Z7IUFwLDNKEE4jAR4oALcZObKGzDjDewbJNsmDRAP/haY7BvpCYGpM1rWJv0xvbRNWCnONeY8wa05EpLfmdpW1ydL2dzbmmpi1pt6K9r87fru3UAXIzE4YBoItcnSs6sa7brPWeTMFSlFus4FATN1awRq4UC1SZZkJpbWFD9qI5YMZebKpUqbHMALjr8GCBUXNE2dCqoa52ETwop+kVh1WPGc86sy7pFkTtnHuWq1+er1bzILVTHzl+p5lLSBwIFwXtbTNkCILOycPFnHlogyzIvlFy3BdEnq11wKSUu54sFM60rOfcUzdaZKuYJ73vQT62U6szSzzlEhvbx+19yr732+mG1A+q99nrBMnJQWlhLoFJ5vKzU84pzHh9HxAdiCIwhsK6Z8vbCvCzMS+HxcSVlGz7quKJqRatwdzzwk5/+BOccf/arX/LNNyuIOXtoaUmCWkGF6Af8MDSW2qE4xvHAmzefg8A8z6RsLenuIqctmLCHiKiYH7QLBgzEeQQDRHlVam772qQPy5I4nxdy87vNOeGPJ07TkSE4jl6ZnHIaIkHBF2PNhgY8Ms2qb808PTyR10RSA6I+el5/8Rmvv/iC8bPXuDgYyyzBHnT/CGnI1UCktt9/BinbTjvvOd3fQVq4vH/Ht1//ijTPrENgbky+emOkh2nk+PrOLPbGgBsiuBaogRDiwP2rEVzgeHfPeDghftgGIk1vrpvEw7ajWfk11l+1Pgf8Cqo9KrpuoFacIzjXjrstvLy/AmpVcE4360Yvnx5Aq7Xy+PTAV99+TdHKZ19+QdTBgGVju53XDXxpk5nE6cTh/jVlvXB+90CaL+R5Zp4XtCR8Lvhiavs0r8iakVKQbJKEvBgz65wxqNnr93ojK5UiieI81SxhcOIZZLJAoTnBmmwRs4UBfU8ioFy7ArYozNg87hPOeSpK8IO9upqrdwfSqkrJxaRK2hfClWkYGQ+Hdv8MuGBnfj3PJJlZLzPn9w+owFyyRZ2vZet2fHRTFVBlPp/59ptvqLVymS/klBtjPiICKWXOTxecd1RVQp9V8NKA9H1js3dEvddeL1U7oN5rrxesDoKb8hUQSrEkNh8EF3ur3lkYh+9s1zVeultwGWspm6Wxc950m745CHiTKiC6qW1vh9Vc91UW2w7nvCW9ieDcukkBbrGWNpa0t7flOXHaAKAiOETMB67bEdfSIrBLbXKIpq5wDu/8pqEO3rc5RW3a7bYdXFvhW7Jct75zjhAjwzgSYryyrvLBx4aeN5JTbo7Jdl76qTEJQRwia/AtPS6TM+T2fc2NgXaOWqox1F0C05lnVcR5QjRtsW/exdLkC/rhazcmvZ+XrfqJkJvPVX6NYe0pkv3490FUwTWwV68/2YdMP4Wb1GK2Ldq90FMVaxuW6+B+k7KIoOIQFwhhQGtGlc1bvTYZjGvXhVZFi4FRVxVpQLSWun0dKZTGhH8KUnY3GpMytfPrQYIgpX80Vl/K9S78ZN2cIK3mD15Ltw9ku5cUbSMSNriqVdv1VbehxG04kat3uBNzXJG2z6JKUtqxFUo/3z+AoN7OVy4sy7IB+lJKY6fb3xOtTfrTfLDbbIeqSa+uA4o/9EX32muv76sdUO+11wvWshjDpirEYcSVypqXBg4rLitOKy4IwQWcU9P+Nn10iAMqhaqz2bk5z6GBZ3Gt3SzK3f0JcT+ilMKyXiilMMS4OVT0Vm+MkWk62Bs5jstlRVBSKjZIhbF+KBsQAq4OBFUt9Q+YYmCIAVOrOHwYqNVYTANj1vJWEYZhBI2WBJgTKsrxdOTNceQYhSl6YhCi8wQcTbjybNtrULQNWLoh4McBPw5IDOg2utcANzdOKNVgV7MyoMdwN/zTNOBmLziOI3I6QUq8evWKNUZcrTi1Rc28LKSSEe8ILhDDYJZ8zqNYVHxOheoCYZgQP+BiG5R04arrNkh1Bfr9o+sAGduX/o3+aV9oiA3ItYvLfkS4AXgtcl4U8Aby5Soc+VQ573n96jU//vGPOR5PpiWmWrBMN0vx5oKhWci5gBaGYWQMb1jnyPL4NSWvUBI6HGxA9JJbuA+UZCmPJWdICbRSc7vuSiXnQvJ2LD9pHUclU0iq5FKpWdECWlqiZHQMYYKqxFTIteKD/ySqNnBfkCImU+mguG2Ga3MJzjmGccAHO76lmDNHTiZd8d5z//qeYRjMLUSbFKs9pwChXeOlFNaUEOc43N8zHA+Uo8P5bz+6nUK7N5xjmWfmeW7XQdfYQ3C2r9okP87ZcGnwZn9oDHWzjFz3pMS99nrJ2gH1Xnu9YC1rB9RsgJpzIpcmvAgVhxC1Jdu5utnSOR8I0ey+iiqXZcb7wOF0apHTtLa/4+7uyOk0saaVd+/esa6LpRe2N9ctqRHhMB2b3tMxXxYMXBr7Vpvv7jVt7TmYySmxXhZQ5e504O444Z3jMI4GehPkko2Fr5WiiohjGCcc9gZfSqY64TCOfPbqFaNTxpCJogRxLaJZqI2x9c4TfDBg7B3VO2SIuCHixogLYWN+N1DNleHTCj0TziFtIdJOyqZVNgnDMAyE0wnJmfXVa1IcKPOF3F0dLrawGacD3gWGOJK9sYpVjLWGjMSJME64OOLjCL4BavEb4N+8O26YwVsw3T92PbWKII1xvyYlsmmTnchVziIWOy4YCO5+5O2IfPKadc7x6vUrfux+TAhxkwmAQrvuLEHSXq8DyeM4chgOLDHw/tsT6zKbc0qcUPHkeaaW1n1RA9SaMnVZQS0jFGnDdjmzSiHlj8VuW1WUrAWnylrMMUdtthFUcMPEGCeoleGSyKXgg9uO/XeVqjHSUuzY9pbLdmWJw4tdk3enO8ZpZFkW3r9/T84WylKLhbm8ef2G+/t7lvnC+eGhDXPaosFhsfKCLSzmecYFz/1nn3N/94r1aIOxHytbQNlg49PlzPlyQUSYpsncRYDU0jK10uz0PN7bwtYSTq9uMSl9+ljvtddev1ntgHqvvV6wcmmT/WKSDqj4YKll3QPa2scYs9tb5HCVbUCLKQ4mC3GyPaR91NqlIMZabUNQ7pqUZyDZtNW1WXR11nODonKVbDyj8do2cYNBLQmuoN5AlSA2hNW9tfUD/UhHJB/guSsA1G07aVrknszXj4V4h4+BEAOuPaSlvukNM3e1qNMPXonGZnf/4Oda6h41/iy2uzPJpm+gi1GcCzgXNotrGxVt33cO8QHp7hDKc710P5a/VtqGSL/r567H50MNdI+cvo0h77v/nO3uJ/C7Xvv6XBavHq4yISdt3lF5LrPdEHyL3K6UatvhvKc2VxVTStiizjXGtxTLsldrslzZ95vF0PcpEMRJ80eXZ24qXaLkRJAeliP9rvr008rNR+nb0BeY7Tsi7tmCc5N29XuqDyy2e64P6rL9fpffuM2dxTVpUG3gNn+Py4cJrtoRa52YviCpNzIV64RcJSd9sdzaN+36CN93qPfaa6/fsHZAvddeL1jnszlvHA5HTsdjAxLgXTQQ6c0zuRTl6enMmpLZ3lULWsnFpBjjNPDZ528QcYzTaKmC0TNGT4ie5bKSloWqlTEOzWe2gYnGUKXVhr7Oj2dKLsQYjTV3zaYseGhuDLUqm9dxH5DTCupwzqy4UlKe6op3jpoheNckHy1iHVqU9nV4q0IbzBNKrqQ1E4MQBpN8kBIprUi15Dk/RJbZU7VQtBDGI9P9HYf7e8bX98RXdyan6J7OdGAhV6wHOAXTerMtCLoziZcWaiEOF6KFuYRgQKRCLXbObG3kLSY9jAzjgWE8oq5SnKLiqC6iEvBhIh7vcGFE/ECtbXvqLeBvQ4UbhGvJlg0AbQBn009zA+DUFiBtEYWwLZzak9K+abCrD6vWtmDzn4ZPPnjCEAnetODiHLUUNJdnwJW2sFAKyzoznxdKnlEJxPFIWWZyVmpWRj8wHO7QnChPj+S84tSi7E3X7QlOLJGQirSlz6cqxsjhdCR4SNlObNVKonlveyEMEXKmiJLJlgD6CfgoCEFalHy7drQUlsuMitko+lgIMTKtCecDORdTQt0ELdWiXC4LgqeUtA0oO296et9cOJw4hhAI0wTAvKxcfvUV79+eyZ9g6B1CEE/E49XhWpR9XQu5QM1Noy3Ski4tOTMtmbRmVAu1WgDUNI2M4/DR19prr71+89oB9V57vWCtOSPANEEIljg3DJlaOmNp2ttSsrW5U6bUurFsxvZWQggcDgcQ2bxu+5S+d00TXAqKWvx1T9+TK3tp9l9mZWdv1GKsuQLRWNkqxpB2drmDse4WYeyrIGquEmvNzU/XU4MzO642lFUxxhe9JrLdVh+gUu9bG93AUykFp+bWsGk8Gyh3wTFMI/EwEqYBN42oNN/pPsh1M4jZP/ya2qGDU+2Ma2MNvQMNyBZ+cqPD7vsvHiee4CMhRFZp0e/OofjNl9mFwVxcnDe9dntcBySVbmK9sch6DW/p9d2QUreOxJWJvg7LPdNet0/MSvFW5vKRElv09KS9nrYnVUGuMTLapmP7oGMqxRZ1JW2SJXHmP63FJAfRWez6Uio1FVsISOeluz+3cvuVj25mY8FDjISCDeV2GUo/Cg7LSK8OlT7k+GmXD2GTiiNqW1CrkjVf973tswW/mL6eftT7gk0tgnxN66bFbgeseb1f2X/nPaHdp0+XmXlNzJd5e96PlaOlLWJyoM6Iw5U979dFX3D1IedSMzmvbRD5hjXfa6+9XqR2QL3XXi9a7Q2qaVrBNMHee0pR1myJc6laIlutFd8YY8RbbHdV/JoJa2Y9ZN7+7gPz65WH04XHz2a88yzLzLqsz15yo2elSyocOWfmy0wpjaGOZuUWh9i2yXxsq9bmSGAAzVLcGsPZh6oaenDOGLYeaFGbp3Uq1eLM+0AWyjcx8KthIHrHn9294/4wMgXhsykQveBywqWEKAzV4VV4Ol/45qdvSSUz3M3Eu/d8MXzOv33/V7h3DhF/BdSbD3U7ANLAzaawvoI0186HbIzldrCa5MFvwSI9Ytp5j1fwMSJhsIdmIBvQ9oHqDUyHYcKHyVjvJv3Y2H6xNMZt+/QGBNNl3bZNroXrdHu2W+mH3oDP9tW26/26u16JSrcN/H4n5h73frXna+e2lhvQZYElHcSr0gYUIQQ7x5IW9PUb6rrgzu8p8xO1dDlE26a2DupR8mzuGL+u4b+tIsrvf/6O//iv/TF+hafzTFqTdT6SbcdwuBDHt6RSeXs+M+fMH/7lB1L8CFAVmP9S4tv/6QV5skG9lAsVpYUf4kPF+YL3K3oHT6Mxyeu6UkvlcrmwzpnsKu70xBzXtiCzbXJ9ESFC2Lyfr3KMZU2sObP81UR59XFArbWS1hVZ1IY7r7oTO35FKWUBhGEYcINrMq3WQarNls9ZCMw4Tt9zVey1116/Se2Aeq+9XrR649q18BHBh0gISq2JZT6TciFj1mylVkLwTNPIoI7xaA4Wy2ohGe9+/Mjv/zv/kF/+ta+3QUNEbhiwX3v555+o6ZuN3mysFGyfX22+rr/17Fn1AzDW1RUfin67lLQLA25IYy837h3OXr9/lBv29MoOmvQFxRhk5/iX02/xV9/9a/yVxYCqODtO13RErqBy2wfTnLpm9Ud3GZSWmEjdALl4jx8iIUXEOXKTSrgQiSESRhs69OOE5BWKvbYLAxIiYTwwHO5xcULcCC5aJ0ItCdP50GQltEVHfQastRqbbOyi7aMTtrTG0mwEbdEjz/a17/uvsY1NBvJpXW4/zQamRc1fWRzUmqk12xLEheZ2IRaxfjPY5kQ5TEeGIEzecwxCXWcef565PLxDsw3m0QB+bcw/TUcsase6LzA/hv6Tq/yt3/0Ff+enX4N29ww2/TLQIuIdqrTOjzKPhXkq3/2kAo//+sLlryWknQP0eh1vP9Tum2/8u/b8V3u82qz2EOHJLXYePjjm25pXbv91PfaqSh31k4C6lMLlciE/mUyKJu+Q1g7JOW/R6HCHD8G6Si34xdabiscT48jpdPq1bdlrr73+/LUD6r32etHaYCJNxru1YKWBkFprY+kac+qcZZSYSpIKJF/Q9ga7fpGYf7z+Be7TX3y9Xp74dj7zPl+IDAwScW3xch3+u9F6dNDWgabefv8DMNo/bUz1JiXBAJo5hRiw31JwpDPbfovo7p/3n+vDYCbxvi5qnkswbvyLmxZ8S3X8jtIPFzhtXz/duv8hoKlJTzqjXrvspQl19fr9223p4NsY17bgi4PJdZxr1/u2zNokI+L6o0e//4ASeBgTD+ML2r0J1JNSTx8B3MBzhP/pn6vfIy/5x6nu3V1LuUlVbF2LDsqL+dtsaZc3HtlbU4bWu/mhx32vvfb6QbUD6r32esHyYTQWssDT08WkFyrEMJBzbQyaDcV553DAIURGhFyVNStJKr/83a/4w9/5Bef7mYcvn/6id+svvH7l3/O/e/W3+NuH3+NfW/86/7P53+R1vTcA2v2Z+2CiE0IweYfb/J+1YaEbqYdu+osmZejAWVDX8G8HfM70sy73AVID08NwxI+TRXBbNrsNqon5Nb9//0hKmcPpxP39KwMxtTSaVrdOQ1ozy5qaVv6EtFjqjb2Hjfn8LntD37XPN18zZxKP59NJiWBrgOBBa+YyL41J7lHbkKmU4qDUFiteWNaFdV1N0qAri4dQExGHiKXwWZJ4O0diITrHw4BzQoyB4B3qICwDvqoNyu6k6XdWVSXljKba2PymaS9XP+/eY8o3wS9dly3t3lCBZV15fDr/he7PXnv981Y7oN5rrxcs721yvla4nBecCNN4aODBb6mAzv4HzhHDgHjPmgs6J0qofPXXvuW//h/8ITkU1H1/y/6f9/rGP/J/uP/PcQj/66d/i/9J/u/zJvvNG+LKfgLevHcBQ4OVjcEza4ZnQmO6WGWzi2tYGwDftPAiLQmwBdio4MUThwNxOhHiZBppMPCoBqgfHx+Z5wVEOB1PFuTTdOame7VkwpRW5ssF7z2Hg2lbu/ymg2fXtN233uG9rrZs8uzf3gcc/pNspC0mbJYv18KynG1Q1IXNTjCryU1qKdQ1U2thXRdSzohWtBScKJOHGBzi+vAtzdzEtO9hGDjcndrCwTa3ovgY8bXi/Md9mP9FL60NUGd3PfddnvJMfy7bbMQzyc/NtO6aEufz5Z/2Luy11z/XtQPqvfZ6wSrNh1qrok63Aa4Odqy1X02DynNJiJPK5p0rSvX1e+3O/oUpgUKlqLGlN7wtm5RDetDJh4CZ56DiA3msfbl7fLtN9qGYHEe8t6+x4fNnQ3Z06cn22l1qYjp6592mVzd9RmOPYfPSvpV+XDf6g0Nw48ywhbxodwx5Xs918d9P+X74vB8y2v35cspczmdqs0ochghakTaEt7nDqFI3TXIbaG16/tLcQ1DBt+OMM9eKL+cD/51vPuf9lPjF6cz7Yf0Xm7Fewf/C4d4J4R843HI9P7eWit2V5tfPX1+W3cwXaAvbKeXXzvNee+31568dUO+11wvW4+NTk3R4C1sJgcN03FILUymsyQa9cA7nrV0fYrSAjMY2fXQya69WN6BVTGLRoaiqNLs4gRayITe6ZJMxX3XQiNhQYozoUJDgUWdfD+No7Ok4WAw6UNXkOapCUUfFI5iFHtLAtw/4WJkOE847YozNNYVmS+fo4Ru11ub/3Yb3tNny8ZxtBm4SM+33SvkeS7huUfcp4CRs+mfVajpoeAbawXS5j08P/Omf/AlpTfz4y8/58vPPqSVzfviWtNr2l1LQXEm5mPtGrfhqoHvNhfO6mLPNEAg4MpaI6Qn8m7/4GX/jP/8pf3Z34T/8G7/P3/7ZL/4c18Y/P+XeCqf/aGT6TyN8o8jXtCRM3UB1bo5B3anGOhO+nU+llLZIb39apA0wOreD6b32esnaAfVee71g9WAG5+o2QHZlqNmGtKQq1zm1Dz1hb1jK76p/2lj72kn+p1sffb0rK3zrblE7AKRLjzca2Y7z9pTS5+xunrKx094Yau2DdsFZop137TUN6lYEp821AsHT3V1kG1wU5ywlU9V+vzPQjQ1HQbS5kNA3um+zPhugvGUcnavUan7hm1veh8dKtj39YYe6Dwo2u0Xnrqzm1Y3EbOUeHh5I68oXn79hmiZKTsxPPWinaXs3547rte6AopVczH3DVTveLR8FEcfPzgf+5V8c+PmrM/+nv/JHtgX63Zf87b79oFviuw7G9/3ic3L3N6vv2+gfsA0yC/H3PeP/PaCNVb5NrtwGWtUWja5dd7bw+uDFtsaHDSv2btpee+31MrUD6r32esGKw1W7W5vm9ny+gML5fGHNmVwqSLNAqxW3Jqoas+edJ7RI4o+VFOH1P7zn/udHG7trccalFHKytnvJPXzi6sTcg16gGVE0EBm693J3ZFDzua3NdmzT8Hq/RYPfyhhq7VIG2YBdkyIzxsA0DHgnjN4TvTB4x90YCc5ZUmPJxiCrKV5++ebC3/udb3maPpYa1zIY1WQD2gByt5O7Aucuka7X31MFLe1RbUCwh3+0oUQfA8M02S45Gw4s1Xy2a6kojQl0puEuVXEKoUs/GqJX1Rbi0bTZrmuz9RmwUoEwWAKgNNnKmpMFeDSrvc0gxK6A7fNuHaeacU43dvI5mPo+RNiBdGjDiQNFuhygD3zah2k6MB0Obf+FNSe0ZosED56+7NDWObguRLT5lVs3QHxbqITQAny8gWpvswXHEvgf/umPOSZH1brFcvcFqvOeaToQYiTnwrokSlXmy8K8rIg4wjDhvOdPPn/gv/mtb1jjdwBIhdM/DLz+vQFJQlVbMNn5tnvJh4BvIU1d0nJ10Hh+dPtxL7WQ0vMocecd4zDhvW8plnaN5Jwt8Gi7YK+f+G8c/o+bBt4pflvk2O865yjt3rOGjCK14gl458360dWbIBpb9mlzcdlrr71ernZAvddeL1hjGyjLa2JdFmotvH94MDC9JpY1bW/UWksDZR4fyxa4MES2tvt3lV8dP/07X/KX/m8/w6knhAEnjmVeuZxnaqksl5l1TQiWaigIy7IwX2wQKXiH9/Z60zThnCPlSs6F0sIqUkpUbWEtwDhGC4xoDg3OX4MjgKsVmkAQxQl8dnfiy1evGILn80Pkbgi8miK/8+aOY/TUywW9nBFVfDFQ/Z/99T/jTz5/+jSgVgPVqlcdte/6524t15jeWzs4QVvARWra34xoNns4Z8mJcRw4nI4tLU8oQK7KknJLiAy4OCA+UtRBAVcFVWePattWVQ044hBvQBln2nrEtquzjcM0Eoa4WaPNy2zhG30oslGlV3xmn+dcm3WdIFJwzjE6x+3V80Nksmb9F1HvLNm9+SpLX0A128f5NHO6vyeuMy44lrxArXbc4oDXhNQKXragHNWyDVOqSPPk9rgY8UNARZFkYF6CAy+8ziP/yz/4y/y7f/+3STkxzxdboKqSgTgMfPmjn3A8nbicF969fWRdM3/21Vu++eY9LkSOr74gDCN/81/9h/yjL99/FFB/9ndH/lv/4T3+wZEUsgprzjwsK7lWpsOR6XgyHX8xIFxqpeQOmO36E7DjBSzrwtPTmVLbTIUqwzDy5rPPGIaRWgq5FGopnJ8uNriqbfYCriFKVYgXD846Gc7faqHbgCogtdjCo92rERtIlRuXD21Uv9A6ZWUH1Hvt9ZK1A+q99nrB6nG/0jS4NOZZK/YGug0S2WCQ4yoBAdM3PmeqvqNUCLNnfDfgNZhLiDhkFuqjseL1XNClRcxIQBTy7PEXDygheoJ3xBAYj4MBplRgFaQU/NlRk7PZsbZtfvKE0YbshnHAN0Dts+ubZUwxSsNFjCly1JExeE6rAer7ZeCNnzjGgM4KZ2ObfVFchbtLxNePo8B2BNmwTAOb2/BdC7vQm5/uMprr0J9+x9faM/XYZlEopsGuN0oMbdptZAuspqnfPyLWkWcfnm2V0DhDNs1rDzf5wBnvmYuD3MhB+hN+fx7id1ePADeWWnHiqNKvYddk5gaonfemB6+ldTUqtE7GNv/Wn7dZQ1bnNjlOfw7nb4Y/5SqlUey2cep4tQ5QAzl5zpfmsNIA9TCO/PjuyF2442kODJfKsiTK44X6fsCFgRMjfpw4XgKiH7+e/CwM3zjCe7O4dCpoVuLskCrEgyMe231duN6vzW2ja9SFtm/OUedKeGz3T2OT/egI2e6hUkBzheKQR8HNbciwWmR8h+giYqy9bKf5eta3GYDrmbQFZPvYG0d0uN8Xou25PrzA9tprr3+s2gH1Xnu9YIXQbimjI9GqLEtiXheTU4gFf3QZgQJFzeGgpEqaE8uSWNcfEl5x1bjaoJq11Wtt4Q85Wws7rdZaTtmGkQQIbgNx0zDgQyClJ5ZlobRY5Q8Zah88PnoG7zgcDozjsEUa11p5Op+ZlwV/IwkRPD6OOO9JpXKeE17h7ePMEj2hZGLzbpacoVSWcvXx+M5q01XSJB8d9G1wo2uVtS9SGtBt8g60dnhBrQWK2cDVBjZM9hGhVkpOLKUQVCnSY88D6gbEj0gYcWEEF6jqUBWceJwLTUssmwPDdp64Bd7S6EjbbhEhRpMXuBst7HeBn9vAIN+AnDhn/ua/iXuDYEOZDCCFWkw28HzZYc8Xh5HXbz4jpxU0My+r2QDmhNaCasar+WzHYeB4fyKvnnM+Uyj4aWS6u8d5h1JItdqg4ryQ88oYg0W3d0cctcVMLtm6J0BB8TUaa+s9PgbCMJiWPUZcaHKUlHDa5ho+AR61Vmou1KyIjzYkDMRYcLWialaCqpBSvpFS0WROHhFj40+nIzFGYgxULZRcmtViJXhHLglWSMk6WKVU5nlmXVI70O04h7BdBwp2X5faot6VGKJ9X/iOFoSSS0HWdft9EDtN+crSf6oLttdee/3mtQPqvfZ6wera5xAMfJVSOF8Sy5qb1tcjrr2Ja22OFMZw5qJcLitLWM0d4ZMEktyAspu0vQ5CmldxyZV1Tk0fXbeIZJrrhXeOYRiaCwmkdSWXQkqJ3HTUuZZNo11ayuMwDhyPR7QB+FIK87xQUkZFCEqzmnP4EHHeUfJq4BR4vCzk7Jk2MNni1EtmLeVT+Meqg2qMcZfrxFV73FK8LdLc1LFAtYG+LkNoCwJt8hDTAwdqKRSs7Z+rojhUHCoBJIJEnIuIiyCBirGLTlzztHbXzbjdH+3SjQamN9rxylRfB1U/4R/dgLSqbq4OtyDbDtMPYSEtAMYRAKF4O0a1y2VuuO8QIvf39+ScOT+95/I02yIlZ0QLjkLBHD18CEzHA8nB/BQoJeHjwHA44rxjWS6UvJJKZV5XcrJj7YPFnJecTeqOUopdh/0Mltpit527uuRAGyD17X7KULXprz91KWlLHwQJLblUleg9IjZImdqCOKVEKZYCGUKw4+zbwtE7DtPENE2ImOwj52z3Uuk+3plUlXVdmOeZUirrkkgp9zOBIMS2H332oaqB5GVZDNAfhDDEfuH8WtVSSKR2jTQdu14TFD9mj7jXXnv9+WsH1Hvt9YLVJJMGALLZmqVUWFMxQN3wUa5KbrHNPhdUHDkVSq6Um0HAT5XQJSXWLC+52NBc6XHD3ADsrldgA2/GWl1BQmna7lv0IU4ILhj2ay1+VZMFOOdY18zlcibnzLIs5FzwTqjO48QYvctlIXsHWlAquThSVXxpLDPFHAqqNuD76Tf5BhXbv64SGvnQJYPrskNbBIz2r5lJsrHZbaHRmfZSKqWaj7KIN92q2DZrUQM9PtjDRZyPOBdMFuHcM4VHt6K7glzZTsHtAuhWMXFriSZ94IwrOO7P08FzH0577hRzPRQ3B+2jpWoDbVUbGy0OqN85uCbicVJJa+Lx8QmHMgYhyJVNpVaWdWW5nCnJvKRdCOCFgi1k5nVlvpw3sGprjGsUeVW7Ryqta6C+BcJIsyE014tSqmng1VxPxEuz78tUCqXkm+vlu3a+HSCV7ceccwxDxGtgzZmaU8thMq18CJ5xGBqgD3hnzDZaKSWjteKdoM6R2wIWoFYLwPFOmKbR9O/YeUTZdM09FVO5gl7XFg52fThyu183i0h0W4D166if26sy5Lkr+S772Guvl6sdUO+11wvWshiznEthTYmcCw9PC49Ps0kTWjxcUSjtjTFVwYds4HtNrDGT88dFD/bmKNYWr8qyGmuVlkReErX5AHcjjJKNgYMuOZamKRVyKjw+PIEIl8tszPbNm2wIgRBjc59ojgSlbN7KDw/v+dM//VNj4dqCIARPJCDqeHqc+ZV+TfCeN4eB4xARCo9rJlWHzysurXiBU3AM3lFEPgV/6AIE6YixBYVosQXKs0WBVq4yDwOo2mQeWpssJhVKakzimlhSZl5NLuPCxBAc+JHzUnA1cZg8YzzhhxE/HPHxgI8TPsQ2xNeWBU4YxqG5tpgbSwdu1Tr3GygSadyk0JxWip1fdyWxO6u9Oak4twHLXwPTsGnx9XvQtAHTSsqdpXcWLNQA9vW6AXAEH6BWHt4/8I/+6B8xRM9Pv/yceJzQWllLpqaVb96/5e2f/ZLg4Dh64jhBjKwNCP/q27e8/fZbnFQiBd9i3qV1eVKtrMm6KyEO+KD4YbCH99SqbXi2UGppCxdLaky5cj6fWXNlWefvAY6C+SSaZEdVCcFcRBDH4/mJ+pRNVy4BDTCOI/f39ya1aZIPBWrJzJdEKYUhBLxzlJzIarr4kjIFOByOHE+v7b47zyzzSsnFPpaKE3ezgDIJT/DCOB0BWJaF87w82wVwzVXFmOiUUpMNXRdzrp1bFHQfStxrrxetHVDvtdcLVsn2JpVz3R6pPTZkRAsIAUQqkotpnat59Bb33czgbW0QSa0lXHJpDHVjqetVR9yT1DYZwfYcBh56u7nk5wx1lxz01nau+aZlbGxdKYXL5cK6rPSpxB6RbZrTwuWyEL1jDY7Be2Ooi+JEybkgKRFEGHzEcx1O+97974NabTCss81bbfvfn7GrgdvXGpO6MdTlKl8ppRpT7h3ORxBProprX+/sdGeoxflN5mE6aaOcvfMNSLcj3kXU3DDUVTeC9HayT9s+fHxh9ev66mdSjw9kJp/C1VV7quGtgOb6C53ltNewAca0Zs7nMyVG8zTu65tq2vRlXTnPF4bgOExHY6idUNRcMuY18XS5EL3gozHPdHa8dVVyi2nvw74xRsIwbMy8LfCMob69LkWg1Ewu2RaYn7yi5Nm+3mrZxTnC2iU4bGEoMQbGtliyzEsb0J1z2iQmfZudbCOB7fpUXGOopS2KBSGnTMkV85Xp18E1mMd5j2v2fUuTZkFzYOH5vd0Z6mv65u3eSjvP3yG/3muvvf7ctQPqvfZ6wcrJ3rzOl4WHx0dyqVzmRC7cRFt3X4X2O7lCtuG/nAprzT8gAc/hXaBKQUul5NIGndZmZXeVL9RmqTUOI4dpwjvH4TASYyDnzDwbM72sC8uy0K3AnDP/2z6E1UGaFmW5LJz9mZwSwQc06kYGO3FbCMWqipZM8I4xeLw4tBYGKYxBGEQZxYY0VwWnlfQJEAmNUa22eKAFkigt3ppbzbHSY1hs465DiR1M15wpKbWBTZPnvH944uuvv0V84PTZjxjCiAsBP4y4MCBhBBfBR3wc8HFEvL/KNbp842Y/mo9G26oboNriuS1HRjZQ2AFPbVrhW2a6/8wzsNTo6CsQ3tCvfVM+DShdl4/Uq762s5wChNj12WIm5j7w5vVrfutnv2VSCBzLvDAG5TCNaDB23seA87aAzLWSqpKaa8owHbh/9QY0o3kmFyU16ZCgpAZOnTM3mtsFhDbQDjSZU2kyCxiiacHHwQYXQ/QfCB2el3NCCJ4QTJ5hTHNhvsyIg5ISXsAHxzCMBB9shmAacc61IWLTSz8+PrKuiWEcORxPxlzrhPdds2zgeRhHg+EivL67R+4d87wg+q25lZTaFgra2HegFEg2rJxS2hZc/RrZzk877Z2ZtjkHrvZ5W0fjE5fEXnvt9RvXDqj32usFa12NgXp4uPCrr97aEJ+L4Lz5EeOvbFJr667rSqml6a0zqZTm7fxxEOSdtd6LtMCWlEjruoHjHtxgg4QZrcowBF6/ujd/43EgxsD5fG4gYGW+zFzmCyKOYZwIjQ3r0cW9aqlczhdQk6jEbYjMNKBOpHk4V3JNzLXgvWf09nPrIugqRCfcHyKvDwPVwdLkG0k/6fHRJArNscQ3oNpEouKaA0MDktpDXOo1xIVaEDX3hpJX0rKQ19WO/Vr49u17/ujnvyAMA791fM3r0yskRNx4wMURGSZoDh9+mIjjtHUcNiTMB9ITrhpW2PBvA4emONiGxTpjrUrdgJLbQGH3394s9mDTg1t168YuMfqebodcNcoqV5BeSmFdV5wIPph7Cc7hXMAH4YvPv2SMgbQuPHzzFeenM/Fu5DCdQCPDNBGGaGwxkLTiamXNFQTG4wkfInm5cHm/knNiTdmAJcqymNNMjBE/mcxDseNTW2dHnVKyLYy0VrwI02ASm7VUJDti9B8Fj4IBzxADMdoQaQVKzix5NfW9FrzYoPGr+xOH6YAPgWEYAFjnmfli99Dbt2+ZLzOvP3vD69f3hBgIQTgcbIAwNPvB3gVwInz25jWnu1c8PjyS1oT3F3MGmps7T/Os7prx7nyiTQe0BS+5budoCyTp8g811x+tu2Z6r73+SdYOqPfa6wXrOgzYx+HkRsvay/r7tymE1yl83WQVn0KVtQVL5FI2Rw9ry4sxxN0iWQ18V2qLJW7MVBPFPnMHuXnBPnT4/Ht9yElb6uItky6g17j12nTNPXrOibXwS9UWlGIa6KK6RXnjLABF3MedLa7HuR/UlkgI7fVlY3RvUGvb16albgNsNKZTtR3DYl2C0uzJxCtIT/SL20Oc71GT2xCd9KnCj28sPXa8R5PbURNjLW800HpzsWz7Rrc5023ft0unyVquMqEGsISbPsin66pa7+z3B0KIfpw76BfzmPbeU5oDjDnDBJoTMs47Qoi2f46NgS+1bgy+vUhPauxylfrseoMmb2lbU9sx6duzgco21CrS9l2a3OL7qFi5Sh8Uex4L5mm+8WISjZ4qGoI5eri+aOM60Kr1+YCkay4bgjH8XuyjBd10ECxtoLZfD3aPSt+Z7RQ8H2Lt2377d+J6vTQ2f/sbc+vLvlPTe+31T6J2QL3XXi9YqUk+vB+4u3tDqZXLklhTixoXG2JKOZGy+cT6EAgxoNVs5xIrJX9c8qFVeXx44qtffY2uZrtVS0UUjocjIhCan645MTxSciZEz5pmcnFUTWRv/1YtIDZMOAzWxh7HkdhinZc1XdlUlLwWzk8zac1ms7eYtjqtFm0uIhSXEXHE4G04yzsqkIq94a/VoSKs6liwQbTx7sT9aeRwP+N+oEeuNiM1a4kbFXptfTfJxybxyNePNUPJlJxIa2JZFy7zwrquLLlQxBFDZLp/zemLHxGmE8P9F0gcCOOdJSWGiIrJGZCmAe5KCxpmb1tRGvsKEGLEt0jxIXh6oHSXM5RiNmtam2OEKuM4MgwjwGZnZ7Ifi+xO2c7F9TzBMAxM/oDIc3D63QdSEbVJSWm2gsELYzSAXHNiTSvBmQ4e59BSSfPCfL7w9ttveXx4B+WeV0dPcDCME599+YXJMfKMaqUonC8X0+4vCyWvOC0MQ8RFTwjBAHOLi5fOtjY4fdWcC7hNF4PmTC0VSkFqbRZ+FecqIp+WT5kkxn6mZOsQFa2kmlGUYRoY2v1wGO1h1Ray7TrSmonRGTs/OLxXvFOC9yChyX5cw8A9h16Yz2cu55l5XljXZZtlsH03MO+5urj0RUn3hzcJmVWppWn3LXkSZVtwS1s5CDZwqt93WPbaa6/fqHZAvddeL1i1tVWdj0yHE6UUlvTUpAfGGIo4tJpcwjULsBACPpk7QCFfW/nfUarKPM+8f/ceydK1BsQQGZsDwjAMxBhZ15Vai4EtgVxSww6FWh05rw2U6uYa4ZxjiNEkHyqs5OY80cAhdXMlKDlRsjFzJWdyyghCdeZU4EVwg8M5T1UhNweDrIAKScXivcUTD0cOd0eGw2Eb6Pr+arIO+9RKoGpj+Tqk3aQf5gZhko9KLdnkIymzpJV1TVfPaReIhxPT3Sv8dCLe3RtD7Q+bbZ6KQzureANswPSy1U4YmgtpMVcGYzuN8bSFw/W3atMZ9w7EuiyoVnzTEfefUdQ07r7brRmgvpWBOCegI/JMtf3dx9B+pt58btZuMbimpTbNurH1thjQWm0BuKw8PT3x/v17DoNjWe7R4Ahx4O7+lYXjnJWSV9NJL6u5gawzJSeigzEGorv6atN0/FtCYz9KeiNbqO0LVc0qslzlPKIGpF2zS/xB1xGVWu16KLWQO6DGglqGGBiGwBA9WttArZqPudaMaiF4QQZP9K6BYTVbPd+kXj3ESMy7ulbl4enCZV7NFShZyFDXyUu7Vqpe9dF9YdsbErdf7ymbzumN5r6x5mKQvjPVu/pjr71etnZAvddeL1jrmugNVidClasbASLkXHDNwaBLE0w2kdEK4zBAtCGpT1V/85Q+a6c27OSbTON0OnE6nQghsM4zTrqUQBuD1YYj20fnHdE5fLi23q/MlrWuO37pln3OuMznOs7uDOLN3cL7nvbXXExyRvDkYIB5WVcepVDrQCpli6H+vvf6rSXOFY4+l6103cLVKs8CXAo/D1/xD6dfstaVJx5ZjpZU93A8k1Lmm1fv+eqL9wzTyvKzP+Czz55ww0Q43DcgPSJuwPvAFO7wbtiY1G17FBClugKipJhI1RY1MQwE34fs/I3eG9QpKSSKZKqrZFlBlSGOjL4x1M6Ot3MOL+YRvoSFdVxvJAH2Owd34EEe+BN+/kzS89Hj2kCsF0Xd1YbNht8KWt0G9mIMTNOE1sKb12/wDqZpZFlWSgaPJSuKwLpJZJoGXFqADYqjtoWdMnpBa6BLT1zTbtS2Tz0JVBByteCSnErTULfukBMq1hnRNnD4KdVHjJ7TcSJkQYIjJAPUPi0UVaJ3+LY4qzmRk1kgjoNZFo7RE5zDAX4cUVWGIW7XXQG0Frs/xRuoVUExedEyz1zOMylnG24sdQO70o+T9y0psft8czNcKM1xp/6a60uXeHw42LrLPvba6+VrB9R77fWC9fD0BEAcBoZpxHMd7urtWNes1bzzqEJaVnO48I5Xd/eUqXKYvro6NHxQCmip1JTRjDHEasEuOWWGYeBnP/spP/nJT7hczqCFeb5Qq8UgX5/F5AMhBsQJMY7EOFFK5XJeGrttg17OQa1CVfBiw1XBeSp5A3BeTAPdGW7vPDGG5tUrrGklJRii31rh67LyXlfujhO/9dPPKAL1ezSvItgwoj7Xl3Z5x5Z4iCKiuA5s0kLWzN+8/3v8b7/8mzy4uSXkdbs80yGnnJuG2jEd/kEbrLMwl6vg1m1WZptGV24Y6q5R73g0VHRqOtmu6xX5NVijgIYb3WsDid0hpv+QST5udMWHSp024XX7HYshz1L4Bb/8XkAtmPg4bv82hrXkzHKxGPbq+kLFcTgc8QLp7o5p8MzzhfnpHe/f/hK08MX9wKtXr1nnC/PlCXKyoJWmNw/DgJeBss5cHt6jeSWIcpqiAVjnTBrjxNI6m0e6nS8oaUZLc/xokdpOnEmMVNHgiFTGMX5SR306TPz0R28YDp6nZWVOmTUl3p+fyCWbJMsrQibNT9T1wul0x+s3r3DOMz898jTYwiYOIz4EO49aKalSq/nEO+cZw4gXT6nNWrMU3n77lnfvH01mkitVTRYU44ATRxwsNTG3kKRSTN3UFzbeu6avL5vzSZ8ZsIWXhdFs57kPue42H3vt9aK1A+q99nrBSjkbaK7XW0vVvI2R5vXstQUuNL/cou0N1zyfXdQtwvzj1eBRG0irbSCrALVaDPU4DtSaiTFaG7tc3S/qrf7SWSvae98kH4ULyzUMRgxsqVy9bjuUk7YN9IHIBvy89/gWKuGaFKIWc0woN2xaKRnJCyG4Fmsu6Pe9z0tnqAVt6XZC81FuLLzeyBe6U0MisbLyi/CW/2r6E96Hyw84ow8/4Gc+va0AP3A28M9fL/H80mcEbaNtKNUZiKYnSl67AF1a5JxwPJ2IMVDSpVk2JpQB5w0Mctt5aOtEG/JzaHab/7ex4Iq2a6YvGvoA43Xot27e66LQ9Q/ibSgXkfbmZl2bT1UIjsNhYMyeKoILlo655oVU+iBvG4RsFpRoJTQgG4Lth4gwDgMhRnIt1nHRel3IVqVKRJxQSx/sLaS0sq5LS4a0Y+TaACodMIewdbW2oVv0Kh9pi97b+i5/8tsFunzHgm6vvfb689cOqPfa6wVrzbMB25qY1wulFB4fH7jMZ5yzYUTnHNM0cZgmpH1uVnPW/k3VUvs+ViKW1HZ3d4eulWVZbIixz8RJ5TI/8fbdt5SciTHg3GF7Y6+1tpjwfOPYURiibky0DbJV02WPozHM60JKNkhZqw3zaa1E71Gv3UwD7zxjtEHEECLDEAElrdayVi3knEALTktjwB3DOHA4HhjHAXEff6vvsoTNk7iBaKG7Q5i8w2QxNoj4J+Eb/q9v/j/8PL7lPzv9AavLL3fS//++pAHe7khji63aXUkQitZNV5xy2qQsLgaoNrh6Pl+oqhzuTmhJnOeZ9fKOvM48vntPTjPOX5M3Q5PJxBg5HA7UGAghGmAtNJvDYh7RPjY5UbtGSyHL9RxuISrNKlCAiOnYg/u404eIcH934Ld/+gXTfeDd05nzvLDmxOkYyKUwLwvLuiLOcTocGeIAIjy8/RpVcLXw+ZtX7fkMzEfnGbxJVdYVUmOKXRsQLTWzNM10qYUucfG+h8GYU46jmgTHe5zr13QLu2luINuNR49Gvy6Cwe5HsEVIX3T+MGHVXnvt9ZvUDqj32usFa03Gepa5krJ5S79/eOIyL4g43BK2dmsPWZmmiRgjl8uFp6cn5rQ0x4bvfsMThHGceHV/T1ksojrn3Ky77M35fH7k22/Nq3oaR5wbNmmD/WzdvK6NvW7Deo3p6lmOMTpe3R/x3nO5OC4XpZbKuiyUnHHOE/xzjap3nnEIG+M9DIMBgZIoxRj1nFdqEQZfCY4tOe54OjJO00264HcegBs7tDZwxRUoqJrzgmqlphXNmX9w/6f8B5//Lf7u6Y9ZpbDKDqhvq83KNa109wE3/a0ZaVRyzbgsm9tHCN7kQnnlsq48ns84lNP9PVoS3/7yW95//afUksjLGa2Z090d98eTWeqpyXE8A+FwgpKJvgW1oGhNpj124N3YBhYNaJoieWkLKWOl7dq1xEonoCJNWvRphvr+7sjv/vaPmM6Bb9694+HpTCqF1/OBXCpv373jm7cJ7x1fvLnjdDzx/uGBX/7iV6SUOd294kefvaaqeWeXPgvQGPWLKq7WhnJtoVpKZmlhMLXkNgjaZD1tEVOrBRf1zlVK7ZruQ6fi2n2nbRGkbVaixdjDzbCs2MD0M8nXDqj32uslawfUe+31gjUMsTFEzcMWi0sutfm/ypUtu/pHX/1la61UqR8MFv16dcmDc46hOXvknMj5ytbVUqg3Q0odRHeW+oMn23SfurFY3UfXJCTBe2IIFLIlyjXw7f1Vy6vceOvKjSuB9ue7kYm0ffBBCMGYy9j25ZNTZM/qGi0uPVpFG8DQrqmuZApnt/Dolx/4vP8ClrT/iVwXc01dcDvACh9CsRupj3i8BJS6LRxFzM1ERRuDyzZg2BDy9ox689nzW8A2pF+f3Rqwe3tLv662keCbwdXvvZQM5AqWtBiDAdU6RkqpzENkiiZdGYInBmdDiGIMuHc2CCnamOUGjqUNCMfgqdX095XuCsNzqZQNBuB8MBcgsZ91bai5NhvF23RM4Xa/r3KdW9nOtnubzN+89Ha5x157vXztgHqvvV6wfvaz3wKUeV44Xyy18PVnhhlSzpzPJgNxzjPP8xaeEmNknmdSWikkAxufKLNVK0QfuP/iC0IInM9PPDw8QHMYydms+pJbKc5xfnri8fGxAf1uptbDNxyKsixLYygrzlvc8jgEA7wyMQYD7l4r6yoWdBFjc/FoMdoiBjCgsd/GhCs2AOlQRCqiyjiMvLobefX6jtdvXvPmszec7u+21vdHS2zg0GQsyfa5tc215vaoN5+XjzL+e3VwZhDrCsYMWIs44jByqGq6+DaI2ZlrccLpdDIf7rKi+UwtntPdPeTPqTVT04VaLUa8FKVQ0bSiOUHJyDojtSCDZ3DhKutpfGtfYJVcSUuzl8y2MHR+E9Wbv3Ip4NpQo8h1EfeRSsuFx/dfo5eIlMoUQYbA/ekACFO0h4gwTiMxevIh8vpuIqXINAZGD6VU1pIhJ0KMDHFAxDENgwUaVZhToTTLPWczoMQQ0HHEh8h4uMP7QK6VXM0vOqXEMi9mqZcLUs253Ae/sdquzS94uQZEae3zBG2R4sTuddrh+oSsaq+99vrNawfUe+31gvX6tWkp43DZGCpxEcSxLCsisvnNmg+127x3U/ehdsZGfaq0MXwdzEzThHOy+U6LiDHUWFiFOsc8zzw+Ppqt1zjhQ9yGnvrAV8ppc+1wTvDebMdi8HgGonOk5EiXC9Rqg2nR/oyUevXGvR1+7AEUwTcmk9b5RgnBMR0GDoeJw/HA4XhkHMfvdSDYRqza0FfXoBqaKE1/q1tynX5PnPm/8HWjud2OfUv7FBGCD9RoOmbXOgv9mhER071TqVkoS6YKjOOBejw2QO2ax7MlbJqHdaKmFUrGpYRoJXvrM5jvtMCWoNhkEKU2r+ar9EFvGNgtGVBtO/keMA1qPtmXJ+IckRA3+8hhHBHnTXpSsumlg+m/x+CZxoHgMzF6QtNGS/M6dwSGZnfX0zRTqagkUi62MGmbHZxDQyTEgeN0wIdIKoW12MzDMq82J1GKeW1rD31xV3a7nzfpPt6VwpXNBnBYENBz1n6/K/ba66VqB9R77fWCNc8mKVhXA8cGDgoi5jzhvSNosDdHuq9uoRQH1K11/ilAqdCARSJVA8rdNi+GQFWPb632XArrg4HoeV4aSeu4BhQ7vA+IU4IPBB/QaqmLOSXztS7mpVvSSkmJkgvBOQhXjbQgXFb7Pphukz40WGsDX3Jj+WZ6zxA94zgyTgMxhs2/+vsAtbb/6EBm4+FsEDGltclMzDHl+47pm/nEX3r4Ccc8MR2PHA4nYzxp230D6mwg8jmDrrVugRylWGqf3ATliFzlEs+b7U2ecPs12f53PeO6+brwXc36ph6w79/sp4iwsvJ7/B5/xB99HF1ql8qwMflbwIqaVMA5z4ekpjhwtTvEBJZ04XI+k9PC+XzmfJlxmI7ZFnDO1jzS5Eh0ttQhqs01w4JjpOiGlrUqFfNvv03+u56LJqfCtNONXG/R8h/Z53Y0vTdP6aFGu5JEqSVzeXo0IVFOTE3K1aVRQxAOoyd56/VoTW0GoeJa90TVfOILSsWs/rxzEMRSLKcJnwu1rNSabHiwbXPJFuVea21DviNZMnWdKU0+tdkjYk463Sml3wqudZ1Kc04RkS1lUjbSf2ep99rrpWoH1Hvt9YL17v07UMw2K2drWDsDV1UrcYj44Ck5c9GCaLOOE2ufd0bYfaod29jsy+VClow0p4TgPdN4ALi6ecwLX/3ZVyzLwjAMxv46iz02O2HHMEwAm/NILYUn98i6LKaZTomaM2meWZcZBwzeMYWJcRg5HI7mrfHuHfPl0uQAzYWjWpIcmLOZOME7kGBa68M08vr1Pa/u7zmME0OIFsTxyTf6DqebdrpHa2sBKiktnC9PoMo0HRgGa6d/ClD/zsOP+fd+79/iXzr/iJ/89u/y09/+XcR7kjqKAuJBDBAGP+BdpEEpAHJaWZYLtRTmy4VlmYlx4NWrN00XHvCxSxluGfarjraDdL39ge3n6tWT2g7Bs6oKpfYhtGtMtTjhW77l35d/nz/mj7ft/fVLql4lAh2BqkK1NUsfjDOw1i0XQZziGiCNDi4P3/Ltt1+zzBeeHr7h8vSWMQY+/+yeOERcTog4S6hcZ7qw3nmHU/NfHsfR5EKrUou9UK2NdW1e62hbDDZrxu2gNvlDl6OUZ0OW310xBu5OB+5cZEkrOWfmZeHd+0dyrpzu7nh1dw8IKSdKrcjgqHcjORcul5XLfKFWxUshBvBiEfdVHakouYA4T4gTMVpqaFVnQUd6hrogzkO14Ja0JC7nM4IwjBOn8WiSsMtqQB2FYufAi+CdJ9dqf3Oq4kLEe/9sbgIEJxWcJSaK38H0Xnu9ZO2Aeq+9XrBSMveI0gcONyZY2Qb9b9rlcB3a6yjphwxSVbUgEidls9gTEYZ4Yyen2my7EvO84JxnGIzh7OQj3VkATA8dAlXMwaFkC2Tp8hPzCK7NPcH8fYO3VERVNSvkD+hA0edt5+3r20CjsbhbAEwDRN9f7Xj1Y3XrQa1XtrhLFr5vyPFQBn52/pzfffoJvz3/Nr9d/jJCA9TNiwIXAUeUES/js99PdWHOZ0rJXPIT8zozMPCmfM5QJ7wLBDVQL3o9vZsfOA53oxX+8JCZZEW3Xd4QYtvHqubiQJMCGHhyiApf8RWv5bWd9++Elo0Bv5UZfXge+0Up2hY7N9+/SphRVeucpJW0JtY12TWkmHzDtYe67bz0AT7BgLV9fmXauyYYuWqDVXvk9u3N0nTgzgbvbFb1+/MhXUv29N7hsh0ltFJzpuQCWk2WIVCKDR16B9GbxnuxC5+WG/p88JaKFqUUxSGbRaR33tJQlRZNngG3yTW0VOtytOPjxLVHGzrU66Kryz4E2RIUuyxERK6TnttCiecf99prrxepHVDvtdcL1tp8mku1FDQwXXFvF7vW8l7WhXlZNk/qOIykdaWUhZQytXz83U6x4aycUtOwzqQ1gwqHcdoY62EYqKUwjiO1VAuNaWCllEKpBddAdH+jrsW0x+MwGIgohbImUGUInmM8GXB3Xbsp5MWGL51WxmAOHS7Y4FqWq1QheANBMTiOx8gQPG/evOZHX37Bq1d3HI4HfOxBIB8/xrZQKFQtOGfR0VRBiqVieAEnbRirlo2h+5Rzig+ew+nIUU7g4Hx5woWIGw64EChFTUaC4FwghCuQM518G850jqHZnYUw4ELYGONf24fmB25DqYMNsWFs84cwsIlN7JOmo805b7/v49BY+OYiQRsYFGfu3J9YpNWqzPOFp+WB4APjOJrUR24Bfou67+AZA/klW4Li/PREWmeWZdlkG6VW5nlFa+VpG8a1QVYHSOia5YG78Y7ohEGU0jXAVS0MqGTKaqx0XhM5FXqoj8lFjP215EqHBNekRgLdbeTjlxOmXhKTpQhk4DiNHH72U7vXaiWlmR4mU2vBAYcxUKuHaovJXCroSsrm0a3FOlR5LaRUcD7i/AAKJSfKatKgwzgS3WjpjA8Xcs7kUokumFTrfOHCxe7LODCEaJ7g/Xg6j3eeIsUkMApalKzt74PStO83R0GV75l73muvvX7D2gH1Xnu9YPXgk1LsDa+qktpwkXeeEE1vvK4ry7o0/bInxsFAbqlk+cDW7sNS84JOa6a0lEQLUQnbkFiM1vItKTMOA7XpqzsbnUumqhIBPwzPrPYEYYgRN0TWy8z5fEZr5Xg6cneYEMA3RnpdE5fZALVoZQiNYfRhs+bqjiXeGSs9xMjxcGAaAm9ev+LLL7/g/u5ogDqE53He37X7TXuuWs0pIThj5gAKeGcsoTbHhyLZbMc+CaiDAWp3AidcLmd8HJjiSHRCLpU1JVSFGA43g3JgLL83QOu8acS9N+axA+pbUN22o5SyDZuhEEPc9s8IxSu7750lT9K6DtRKWhaeHh5QVQ6nkw2XtoG8rlVWrVQq6vSjgFrVAoWeHh+YpolpiBvLrVu3g5bmydU6r1RqyaR15enpieXyZJKg3ukoJjnSWnh6ulByZpxGQjzQo9zFB+IYuX91YoiBOp/J85NppouBvloKdU0mSSkVGnMbgmmHadIl5xw+eFz0ze2jA+pPL9CcSOu0XB1Bpmnk9Rtzz/n6m6/51VdfWZJn7XHelhIJJonxgvnOpwzV7vvSBhnLmljnjI+VONiCt6ZMadfTNBzwh5HHpzPffP3OdOc+Enyk1Mr5/MSyLgxx4P7uhHeeJa2w2pCzbxHz3nkcttCoasy4tqvU+P9ruulueLPXXi9fO6Dea68XrHE0BiqVjCZBmstFvWH6+seq4KoxjSkli2y+tbn6VHXpiKVHbMNaZQtu6KDeNNbeu60l33/XbUoIveKNJp0wGYGBLdrQnxOTaDjAqeKUJv3obWk21to1/a5r3+8tetdCXII3WckwRA6HiWmaNgb9k6EutpF0f2lzdeie07q16+kx2X1Y8HtcU2wREhhKtCCQrqvooFb1Bj7/+u92T3ARKNXj24CduA8HGHWL2C65bL/fX28D0u3lv+v1+nbRWOO+uNi+znV7t/TD7zmctdq1knOm5Lxpsd22b92e7WZ7ugoEA70lZ9Z1Zb5cSKstFMQZMK9VyaUSijHPaKWqXWMVAedNQ2yIvQm3PYjphVVl05trbQEmfVdvz0ULnKmqVFH8Jg351O5ffeD7EG33Te8SLdcWM6WdFuu0eERcCytSvGTO3pN9QdWGOG0eN6GloM7Cl1w7VimlJkuJ/P/Y+5MeybI0TRN7znjvlUEHM/MhPIaMrKpmMXvBKhS6AQIECC6a6A3BDcF/SYB/gAsCveCGC5KNYjezoqo6w8PDBzPTSUTucEYuvnNF1T3dzDOyrECAKW9AQ83MVUXlDqLynu+8Q63iqyh1bRz98X23kuFaKlWt159n82V9lsKwfv2Pjlvx7Citf++8XXDBBf/puBDqCy74hPjVl18CSOvhOJJy4jROLIvIBWqtZGRbe51ePx6PTEto5K82JeZH3vDa9q02RrZ328QyLAuHw+GcbQ0Smad0xXe2pR5EkWx426bjutUhZ2pLJFC1ilylFkqM53xnb41MLwFdSiPZDq0qubXblVol/7eRjfNEjIo2IsXovGUzdPRDx6vbG7788gu2m4H9biclNfYXJtRVJqPSvBihJDRgaeQrRXLL0yaDybVNAz9MIbxz3Fxf8XpzTcaSaeUeOZFDoJS2WHiRQPKckrCW38j11cbIpF/JrsF6HlYCPJ4OzPMkkYPeo73DGN0qqNUzKVKiuUWppk9vi4baLJk1k9LSFlKdmD91xWDOKud/yPKsVskfH08nSkq4lk7iu661Vio632GNhZopOSFbAhowZAUhzIzjifu79/z5678jhgVFlu/XipAKqUTRo+sAVJaQSblii6IaC9aB9WAjShdMUaAciUBdkuinM9RUKVphDKzZeBWoSkl9/W6g1IqNgVQzzn/ckFpKEc13lAbPnCMpWlJcoBYMsOk6cs6ERdoNe+u42m0xxrIfEilm5iVQYpY3VWXBdORcGU8TcR4p2WNdR02F6Xjk6f6JnCvGzWjTsYT43F5a8lkqZoyh9xIlGUMkKTFGitZakWOiFP2iLbVivWv3XmuPVIpcMiGltmArnDMuL7jggk+CC6G+4IJPiP1uB8gEK+WESZoQnqfPqazT6XqeLC1LIEYpvZDp6Fq68hGsmsiziuBZU6uUeqEZrpg2WRbiVQCZGjtn2oOtMVylcTbRrdYsmbqqEWqjVTNiNR5TK1hDLQajFXN8MdFsE2qDptTWzqZrm5a3abCzDEPPfr9nGDohl2tqw8dF1NQqU96aEzVHKqLRlsNYCXdFq0zhl4tdjNFSfW57lgxLkqdQS2nFNBqFtN39mJs1He8a3YYcY9Gm3QfmxZHIZDbEwDxPLTqtw7UnLjKfRtblu58TO84jxfr8UYvIIVazaC2o2kyP64Sdl9/zgdNJbRPTgFGKEBZqKRgrbw+SQy2Sk5IVqWYobXtjLfBJIv2YxonHhwdiDGy3HUMvsggpNqnolAltMp+yvB5yRfTa2oC2YCyQUUZMoCrlJmPgXICpWaexz4QaRAvvvZepvSrQIv0+dj+tuxilKHIuLZZPZFq6LYZc031nrcmANVLYYq2lWEvxFasNg3fEJaC0RTlPyiJLykniJEtKZKWJbZKfc0VHUCaT8tqc2q5KlT9rpdFWt/v62Wy7Xr1SylkGVopMtnVbzK0590opQgKV03ny/UttrBdccMFfhguhvuCCT4g1Ik4hlcNaK7a7Lb7rCDFxHKeznrnve0oRCUBM6Zw00B7gF36Q8EP1o/dEddZMrsUqayKDom19K3mD3e4G+mEgp8yyBNGH1kbMSiHFQEkJXQqm5pZDzPn5lZzORGRV/crPre1j5VsSAyjkQIitNT1X+y37/Zb9bkPfOTpnJZzhHxBB8Ez4IzkFSgpowGSZ6ObU8rJzoWRQOhHm5aO69FIycZlZ4kTGopRtz0EYnEybNUqZJmtZt82F9Mjx/pTAtqrs9Zq8uHCryW+NTNS66dtV+z7Uj4j4+hi1SYRK09uLlEckGatEQRi1fEcLSPvRo/0Ukq5hsEZ2LbQxYgxFZEPngA+lYE3OeCEFqi22pPWXYKyhVHOecq8yFmpFGUuuSkx7xqKoZKU5zoGYM46Ccx3VZHJsCwY0GIeqSibUSpJmpJ5bSmBWcl+rmAhrW9ho/VPpw9+Hba/FrhjGcSamBCpwOBwwxjZvQ/M3NElMDIFlnsnWNmmRkGZVi5hitWryKIVTCqtkd0bVjKoZ03Z8sq5i4NVGzmvJ1CIGRmPs2cislG4L5lleo+2uWFNA1Bod+OKeOa+31bOR9CyLOu+uXHDBBZ8KF0J9wQWfEFKDLeSq6ywV2O52KGM4Hk8sMZJypus82jhiyjw+PDHNC533OO95IW7+IGrTkkp8w/OXn99oNRKt1SQctAmz1RbnLLevbri+vmIcR96/v6MG0fTmFte1TCMpRpxS9MagjTQnOu+oJTMvku5QVtMbQuLOCXUtG9oY2XKuVRNCIKeIs5ovPn/Nq9sb3ry+Zb8dWqmLfh5BfuzYS6akQI4LaZlIccEgWclFQZwn4jKTcqGWhVI0U3+SBJMPIKXEeDpwWp6w3QbbbZHpXxbNrNV4JwZSYxSqPcd1W141ffgqb1k10evEca2FPgt/KZQimuOcM85WXIs8ZJ3Q/3i1JD+vFJYlkGKQCnhjMVZkAWtSywqlJKNY/72p+k+gaHp2j/MO6xzGWiqVlKLsNLTFoQxDRbfdam+EUGv50FZhvQVd6YaBfrs9S11qlbSRCFAVynq0dSRVuDuOGFW52W54td9ALixjIuQI1YDxssgpCrI8Tl2fgQJlpDgn0+RKSq6JVWJc/Njx+67j6uqK3mgeHp9YYmCJkdM4AQpvJYGllEIIgRgCCsXJHM/nXaOIMaFqwSqJoPTOkXWlM1oINQVdEiornK5se0sugLYobRuZTuQUMUaqy3WTBVljJYc6LOQX0+WqAKueI/LkX9f1xXmBy3mBLa9VvX7BBRdc8MlwIdQXXPAJUYrkUFOfp0fGarSxZ22wUqCNxq562TVJYSViv0Cm2w9oCoD6o8QJ1b5fCkSEvK2b4mI0W7OfpdnOnp/TMwl8+T/O5sJmamTNt5bYvZdiAtUMh+rFtLSuk80XE2xjNH3XMQw9XdMPmzV7uP6i2OX5+Gvbns9yzkvVZ4NcaYUyOUtd9RoH+OGHawa/8/eWFhUiM1D18vheyinq8/evPrH159RmFpX1jAKjWVUKzxnL5UxSXxzaecL8c5AM8tzSJlaJyPq1z6TqLEH5xXPZco6NPktuftQseZaaqOe/rj+lLaCM0S1pxmCdTPeNlZSTWiu11Y0XJJOZtm7QWpNrYUkZTSEOpcX1QSqVmAqqVMyqXX8RC1jX56de9GS2e0IpwPxyBrV8u0zoTXNcnjPcs1wTraRNtJ7lGOsuSW6D3va8WsPoWs+ulbQuSrSdTJFNM+o6Iws0WRMbKiL3Wu2rRq8FTxKJ93NNn5Lo85MrcjY18ky6xf18/rqXU+sLLrjg0+FCqC+44BPi8f6uTfws1ol+NMyZwkxYFoyWSLqKoSpLCBF/OjEHg3FW6pmtOmtvf5YQNKKWc0aXlkCgQBup8dbG4KwWIg8YLVMq2a4OYlbShVojSmXkaWqMVZSiqaXSeUXNBW8MW+cxSlN05e7xjpolZq3k3CqnHRiFH3rcMFBKJZ4TC0ojJhVnNc56rnYbvvz8NZ9/9pqbqy1OiaFQs8Z6fXxCrRU4A05XljQznw6oWolF7JxhDpS4tAgJyajmF9rylHpOHkkxsMSM0pZuK6UfCokFVJLjRkVIvEJWDSkGQpRMaO8c1llSyozjTEpZ9NnDAFSslaznWuu5lEdri//RNX558dX5U1WqafGbpEO3eEJtztR5lVeUIka+qBaKy2D4WSgFzjv6vsf7jn7oRW7w4sfL4iDLdNNKJN+apGK95dWbV+z2A76zpLwQY6DvRBcflsDd/T3LshBSZo4RFPS9xzkn0p1wQtWM1tL2mVPiu7fveXp3x7br+Oz6CucsKUZS223pvcN6gzKQmqZeBSgkWdQZDRpi+rghdW0TjFk3n56wTW1kpyClQopj0/9brLWiqW7a5FKK5EIn8RsYpTCAabKYXed5dbXDWMfm6hrjO3JVUhpUKocxMc2Z48kyjRPOGvZXe65vXlEqHI8j0zQSY2wLYFhCIMaAUloMmrWlx7TFQIiBUnO7ldqiq8lQzrfXRUN9wQWfFBdCfcEFnxCHp3tAsdlssEZKTmKIhJyJKYuxz1oxXBnZ0rWtjtxYg7ZWtnD1x6PjajOkUSR0WSMEwPsO4wx97/BedMnOyAR6mSfmqbYpWRVSqDLiPVOYKoRCJsUOBXTGsfOSPX18euLx8ETJhRQTpRSpiXYWrTS+63HOi8a3JUasxE4B3skUbr8d+Oz1LV989pqr7YBTVZJE2uxRrTrPD0ArsFpMiCUtzNMRckGnBKVIfnFq08RSoYqG+2MTaiFLBms0yxw5LRPaOmy/wdLJc6rNFUem1uZabMuAnALjUTKh2Qxo1ZNCZDweWEKEuqPz7lxsQteRUmKapPBkrX8/7zTAjybDz/+qyBVylW170xIc1smt3BuNUGcptUkqUEwG8/PHr5SSyu++l3r6vj/XVpdmdlw/cybU6iyhMc5yc3sDdY8xsCwnYgxtUqtBnQg5cZpnpmXhOM2AYrffMQyQ48IyjtSS8F3PbkmkJfDd+wfefvsDr2+uubq+xhhH1ppIm4x7i+0clUyuQeLrYia3FkZjLWglddwfeS3JAiWTSsv4Vk11rsSEGkMghIDRhv12I3KtF7r1XAo5pmb4rW06jeipK2w6x81ug/Ud+9srfNejXYfpB3KufPfuifvHEaMVj089Rimu91tev7oh5czpNDJNExXZ3VFaEeJCynIP1rbzse5arAu11BYSOcsCvB86trsBrcW0XM732AUXXPApcCHUF1zwCbFqaxWlxdGBGNvWLGR505Us4lU/a9lsBmnL857qmvnvo1uyq5BjnR4K6clVptYixdVNjitbw9Zqus41w5QkR1ijGXpPzrYlMcijrz0g7qwZ5kwU0Jyzp9ctbNOkEOvUSxuDbdv7tYpcpPOOzhv6vnuuej4b/IqcJsXZyPdh1DNBNlrLxF9nSUB4cW5ok1tVTTN2fXyP+yzReHGGVw16KZkUAyjTTs5qepMJ8TltY83HrpWUE+N0YpoWrDVs1/IVJZrnWutz9vbLBdSa4qDWJIsmvWGdpBuydXKNeZmBLdIU4f0iC4kxEAgUV6ju5487kvja/In/3v1bnHVs1IBWhqJKMwBWJOyx6aBrboKgSFERVSvaRKiFx+GO72++IcZ4rsOeuolvw1vG3cQSI+MsSTSHzYLvOkqOhPlILZlwA8sraQH906+fuPcj015jvrij7zxxGknTCWMUV9tI5608txoRmYnGGLn2xhjQij9vR5L68K5HbRPqkoRIy2ICSpZFWWjpJcYYht7j1xNZnye96yJGt5+rkOSUWsAoLbF3xpBCpJSKR2G7br1Tn0l425pIMTBNY5uOB5m+t6m5hvN0fC3eyWt2drvHRb6jWj59Osu/VkmItEde2PQFF3xKXAj1BRd8QpgSQIGjozNCO5aaIIe2RS6Nb0tYmJYCSrPf77i5vW0RV5bcyeR31cD+LNq7cC207FqpPV/CQiGzUR2+s0gUXmjTZMd+152b4YyudNZxvX0FSpreQmwpJWtQRC6oKPrXzkH2IgspBmqVYpa+c0LAqKQiEoauc1QcKQVikAXCm1fXXO02fP76Fduho7MGI6JnsUvVQqWQffroNHlN+Sg5MfQ9Tt2QQuSYn4hlEW2oNqiq0LbHKof1Az8uWPkxJIs4NXlAK7BppKPWTIqFcQrUqkBZUFba8roBYyxhESNkpRK9wzrDOB750zdf8/j4xFdffUXfogG7rsP3HbY4rHcimzBrVnI9a6o1oFR5QZjl87DZ0nX9j/TjZyNhlQzjWgvTNPL09MSDumexM/Q/f+xP+on/0/B/5v/a/XfPhLDpfzHrIuksFn8m+WuecX2W6cQ+sNzObZrdJrg5M7dGyFKE/EEzUhotC5AsJN07S+c8tRbmfzUSg0iUNv03kq+eJSrx3JSoJJKxtp+/ehRQ7acreDfMnFz64LWPKTKdjqjJorViGAZCiBzmEzEm7u/uuXt/j/eOzls676lKNdNvK1Bqr0FnLd4qQkjMpyOlyC5Pf33DHAJv794zhYXrV294bZ1Mw0tGU9EUKJJe8/R4x+PTkVwr85zIMWG9p+s2KK0JKWGWII2MLW1HKSWJIUrReY/3klByOolcRCmZphulm/n08vZ/wQWfEpdX1AUXfELoRjC0qhhVm4hhbfJ7nmCmlAhLQlvLdren32zP5sLU5Zad+zGss63nhrdcMqkkdFHN9KXPU1d4NgPKJKy0CbWRf9OaEBPWCpldCXWJiVxED722ImoFtVVbW9s0xkrLdLeVRZhzKLShGIO1mqHv2G03bIbhnGus2ki1IlNgWQDkj25FP7fCSRuh6XuRvGgNrNFzCFnRBq0dWtuPurBEHVLaRH0lZs/T85IrMRRyBbAojBhNW9xZzqlNqGvLNC7EFDkejzw+PnB9fS0yCK3o+07I5Aujmao/blN8OfV8+byFSFpqK4+J7fwp/VyGs+5YrLnki5p/1KD5UwQV+Hf2D/w7/vD3b7G/FB7Y/iO+7/+HqDmTUiSn5/O7lqSklJiXmePpSJc6YlyLUerZBLvei7Jjs+aGQ4qJWipu6OhaMcwyT5xOJ/phK6ZG/bybJRNj+f2wLAtznKkVSlVUKRVvixBzjjeUxBtJXXmZOW2dxXuRXxmjybkZOdt9tSa3XHDBBZ8OF0J9wQWfEJ/d7AHohp7eaXKtWC3TJ6NWPbO0E+YSKalwGo+EnDBaEhKyWstEPoIWe6WNTJt0MztSIafMeDpRcxJir+UN22uo3lK1Eg2ykrSBrXcSORcD0zIBYJuOdLCa/nqPrjAPHeFqS0yJ01GmXr7r6TcbUJopJJaYRXLQtpaN0Qydx1nDZujZbQf63otEpGmSS2lpCWt9NvAxRi1ZzIUUi2ilcybGSi6GUi3H08T9/YFaYbt/RTcYxiW3hcUHHrNWYqrElKnatHY5CMtCzoVcFTkrapWkFCFNzxKetRhGoWQC7R2d92yGnmW7oVJ5fHqSIpemU5br+Nxqyap/TSIfMbUZDmUE3AyQ6+VXrWbbygKuTdRrLVhjWpOgaQugX4jN+ycOKVQyOGuoVfwFImHSpJSliMiKGXG722CdJH7ktvBTWuG9a2uv2qrRZUpcSqWkzJhGlmVBKzHmSmPmSEVzOs2Mk0T1aWNw3lFUJrW2RFW1kOpaCSGA0qT8nA2vLVBkAbgmlhtj6boeoyOznSmlyG4AohMXU/PHzb8XXHDBX4YLob7ggk+I333xCoCqNVVpYi6cdGVGsnF7a0i1clSVnAMlQUgJtMZ5z7AZRLeZFj4s91BN8qEx2rLdSI4zSAJFLoXHh0cOSpI1doPHWo3XitKJZtd5S6c1vbVcdR5jDOF44HE6yVTUyfR1t93x1etbnLWUJO2J0zzz7bffczyOdJstw/6KiubxOHOcRBe+hEStBWcsvnd4Z7neb7m+2rPbDFjVspxLpeQ1Uo+XbrwPopRKjJkQMjlkcszkVInJkYvi/uGBP/yHbyml8tmvLDeve56uEil/LOmhEmJmjhnnDU6L0WueR0qpkqahHUoZjKVps1vpC6E2lQIAAPusSURBVBnnDJ2XXQbXSLO0QO5apXjh3d07Ot+x3e24UtfP17LSDGKigw9R6q2tdVIN3zToz82Ywo6l7vzHU0alDEqrps8Wnbrhl/Xj/5RhtKazjs45jIGuVFADNze3VOD6+opXr27PiyVrDClGlilQS2Hwnt45ainM40LOCa00m1bc9HSYOJ2OxFzQytD5jpwqDw9PlAqPp8BxSYSYMdbSDZqiAilXSoVURV5Sa2GcZGodcz43ilqtJV263T8acM6xGbZEG5jmuTVHcibUKWdIHzc+X3DBBX8ZLoT6ggs+IXovhqXcPmoFo6Vgo2owiO7Z6BZzXCuFZsgrP60V/gjUc5mDNrqZ3Gha0vqj7d11akZdiasSY5OSshHX5BfOGHxrNbRKNdmKPHenFTiLckIke++I3tK1CnFQOCuPU9cs6VrPRFC3iamzkqTxo4zjWp/lBevffwHrFFxMV1JrvW6Pp1xYlkgqlWkO+GlhCVESHD58QqXmW4t8RWndnksze9W1tGZN12iTap7NaGIuVOfMZN2yhG2r8JaYM/UijaEdB2KAyyk/R7jFVlVdpKmwlELR5UXeR/v802xinjsWJT/5Qqh/DrYohuzosmGbHUbp871Lm04rK5XlvkUKisTo+VyeZTlIPnmpzxIsBShjzvKjcyW41vI7APE+5CIa7hgTKT/r5c1qVK0VXSSvviDJLaWuuvY1TrHdROe/vzxS1e7b9tza/19i8y644NPjQqgvuOAT4mYvW/kxF0LOJKuYNh4oxAJTUqRSmYNnXDy5QtUOlMFYi+8tuavPFeQfgDEG5y0W0VLSMnKlwlqxGTx9J+1rJU5QC84Yhq7HaU1nwCnorGHbSR6wM5/x+mZPSonT4UBYFiyZ8fBANJr9dstuu8FriK+v2G882nW4fpBc3VRJqRJiZFkWmZilSiwVQ8EZxab39J3DWY01oscW0sqzLPwXlxRK0jYw5BxZQiKnQkiVlCtzLIwhsYTE6Zvv0D888nf1kWlePviI1nn2V7fc9G+EbrSFjfX+ObhOCdnuuh7fbaAqaa3LEaUsRukWoldQJWOobHpPTj3jPHM8jeQYWOaJuCyg1Hkr/+nxifv7+5YsIeRrGAZqrXJtnKMU1xZRum33a6z5ya/wF2TKecdut2NilqzwC874atrzv/vmn/Pb8Yq/erdjR4czWvTMpU2GQ2iSi4r3Tq5LXivjW7lOqzlHS357ypkQI95qOu+gKnwXcUuSNk86CjCGxHGWXO7HxyMPR4lp9P0W69zZHJpy4TQt4mPIsCyltSsa+ZlI7N9aRi6LQokKHMdRvBohimlSVtEiDXmxGLjgggs+DS6E+oILPiH2QytzSZkpQNKKTWfJ1RELqAgxV4bOMvROiiSMF92ukXKX5KSy+0NQiDbZOoupssWvtEYbhW/b/Ff7PfvdQAwzx8dIigFrDJ3zOK1xZCwFrw2983SdZ78ZMNYQwsL3FA41o0phGQ9EpdgPHYO3eKMoVxs2vQXtUbYjFzhNkWnJLaGiQs0yeS2ZYhRGQ99JUoK1ukXvPU/0alM0/OIbvVIoNCgpxogxk1MRXXWuxFyZU2FaIsfDHVMofH89syzhgw9prWWz3bPrxDyYUquQf1FbLYN0iRkchp6cK9MsVfKq6JWviDa8ZLSS4825Y1lmwjxSkiMsy7mUAy07C8fTkR++/4FSytmwmFKi67pzHB/URqRNm14ail6TLn7+mIZhw4aNZJ/zy0uVfyr4bN7w3377z/jX958TQ2IhUvWaYFJa7GAiF7k3vbMiC8rxOaLyxU6DJMgI0U454WyHsw7QOCd17rVFHlalCPlECCfmIMbVp6cjXT/Qb7Y4Z87tjSlllhAIUZ5TiJmcK8Z5tNLPsX20HRTpGyflxDyLGTXFSM5ZsrXPOy/1RzF7F1xwwX86LoT6ggs+Idb4MK0qVnZssUaKSFAKj8IY2PSO/aaTkg4lPYG1RZUpXprz/j7WRIpSCqoqchYdL1URasEWTU5SNFFe1CVLIUuUzueaKRSij5LfnDNVxsUYLYS8d44cA3GaULXivD2/aTsnBC1XTSqZmqVeuqT4XPNdRSIhtecVq6WJ0LStbHlDfy5xqaWetaAfE75IaYdIKdboNZF9SHmO0prNZosyjulppsRAUR8nkylljqeRp3A8V0ejZKinVhFFy1WmZHIMlALU3GQfmVoSpUqMG1XLuUiRmiJGweA7ibbLiXmaxIDmelCKnBIhiAFSCLU6T0V/evXPW/irZKiW51SS+uI4W7zdL4mIXHX8Jn3F6/LqXHDz9885rBKUnNL5/itFprQxBnIpEhvXUmOsketTWqpNLfXHRLTUc7ze2va50rucM4fDgWWe2rHIBPbcpqnAtpx1qzXOGVnMtGu3tgKu2dzn/2s/4H/+9IrtYiE9y6HOkijW2MiKam2QObfcc7MaVuWZ1Frp+x7n/TldIyVLqZVpWYAXxTLteSmtMVZ2mArQdb6ZVR21CpF31tF1PakVQslFT5h5puTn5/tyR6I2U+TaihqryItyWevYlTSQa/1saL3gggs+GS6vqAsu+IQwyGSzasCBMTAskB0UFJ12FDTOGzbbnlQqYywiEUkiVSgkfql+u+RMTIFSDKpCapnJivJcQOFdK5eoQraXyPFwxCiFLQlDRtXKcnONaWkSSlV6a/n8r/6KvvOMxyP379+SU8RZCy0d5Gq7EZPUGHg8jKSYifOJZZplezknNKV9ZIwqdN6w7Tt6b9FkKPGsNa60avSVfH1kSm2NZegHBjWQQpIJdVmYl4VpXLDO8eWvv2JeIiNvuV8eKMp8NDZvnCb++PWfMSe4vbnh9e21xNpphWlEzSih1yVEpiAaZ6UdDg0lUpYk5Fi1bfdxIo1H0jjRa013e43ShjTPvPv+e7quY399i7GWaTxxeHok5dxSOSSdQ0o5PKxb+kqIomm12KVIHJ7+mUl1XeP3foFSX5U9/4fxf8//ZvlfYa1j6Ae0Nusypz2+PJ9lnjgeH1sk38iyTIQQuL97xzxNXN9c88UXX+C9Z7fbs9lsSTHy9HQghCBxcONEzoWwyE6A0QbnPdo8k+VxHPm3//3/kz99/bVUvucEVLzSOC1GvH1v8VazHzyvbwac1XircFa065vt8KI4R7XrJRPcftG8efQsS5Dc7pyEn9aKrhVdC6rIRw6iaVfasNnscb4D1qQXsFo8BiEEljlSlSZMibf37ylZ4vVKuyestyhj6ErPrhZ8zATA9l2bgAdSjrx59Rmff/4FuVQ2wwNPx5HHp5HTGKmtkVGiONfAH3VeuFChhERgRgqGIrWWs7FRG43VhqH/QDD5BRdc8I/ChVBfcMGnRGtK1IjxsAJWS3ReUQplJP0j46jakEqlzhGdCqjEHH95Qg3PWcOq0FIkoNYsJSnN2CZFGs+tg6UUUkgUVSk1YWohtu3gUmRLuZaKUYr9dsvVfoc3mriMxCjFNJQCCqw1aAzBRDFT5kRJ7SNnVmOkEKTa4vvWQhm1jtNgJYFnA2VpC4APH/u5JtyKflw3o1guhZhTm1Bv0DZh3aNkZquP98KllDgcTzwejgz9QC6NfwuPlSl1I7opZ1KS2DLrNKrtRJR1DSS5euQUWzJKwliP8/4ceTaPI1TY7iStoeR8vhbrNnxK8WzQVC+05atxbTW6rffDTxch5+ZH9XG9rK+O36ff8W+Wf4Urnq3bYTA/Ol+mmdvmfOJxeU+MkWk6Mk1Hlnnm+7sd4+nI6/qa3+5+S597bvwtu25PiIH7+Z5lWZjGiePhSE6ZMC/SqGiM1Hmb5ynz8fjE4x//zPKHByk+ydLI6LWma3GPNxtP7w03u45fHbd4Z+i9wjuNc5b91RbvvSyK1szvRqhzzoxhFDJdyvPEdzXFnj/Lhc0tPs8Yg3P+R5nPhoJu5lVrHdY6ZhJzCO37OrSRe0Im1ApjRQqCkrjFWCQucRlnSqlYq9luNpQKp2khpcK8JJnKK1qjqEyo1br78nLq/2KIXdY4ytJ+B70wCV8kHxdc8OlwIdQXXPAp0Qj1mhssBSoFVTMiBpBOtM7I1m+uoIwi5MocLUprZuvovGub2z9HhBrLQ8iYaJItVDEhaq2IbSpoDQzeY5XHaonbMopW/W1BGZYloKoiBs1iFFMzRZ2OR2op+G7AuY7T6cA0TyjAtaSQUmHYbDAu4w8Ra0LLxvZtRzqiiAx9x9B1eGeb+auRZwVgzpNX9Q94o69Ucm3GsJYHXGpFGSEqGUlFqEoRs2hQ10KOD2FZAu/e3dHdSz30Mk1473h1vWczdPK9Vcj+PE3M04wxhs12j3NetuajZIf3w4au60hLgBTRJVPiwpyiXH/tqMpSvJNscmu4ubrit7/+NTlL2kMthf31Fc6JyVQ3CcP6Z3gm2bVWliWcJ/vrx9PTI+/fveW9fs/DXz1Qv/jA+ayVsMyMxyPed1LgYy3OivZXbmsp96EWnHNoDTlZUjKkpKFJFcbxxNt3b/HeE0JkXoQ0Pz0+sYTA4fGJu3d3Z6lE5zwpRQ7HA6UUrq6uuLm5xloHKEoudN5zdX2FUZr58MTx8IQ3hk1n8VhyVaQKpgLaYJzDOIMyFrQWb0IrMcklnxeQIgmBGJ9lKLk81887azGmsoRIjtJwmmLCuUyKidKIuCThyIK163uMddRiOB4XtM74boPzPYVKLIUcY8uFVjhtuL29Zn99zTjN5Ld3LCFijWTVS8KMxDNardhuNhjrmGNmOme+n28GaIVNkuCzXt8mBVKrcqae030ufPqCCz4dLoT6ggs+JaqQKlVbgUvNqJpQNQEFXYVU99bTWyMykKKJBeZYcN4zmcjQ+Z/EX/0UopvW2tL3UiIiu8ClFUAszNOJ7abndv+KofOkMBPniaIUg+tx3oLSTFMgxSzyjBYNNk8TnXfs93u++OJzjNGcTiOH0ygmLa1bEoFnu9vTpcLwMOPchNaGbhhak1ug5oW+c2yHnt45nNGNnCKjfGR6Z609f/4ooa6QcyU1Mp2z6MG11RhvRdMsknJCSoyLlGZ8rNhlmha+/fYH0g+Bx/tH7t69Yxh6fv/bX/Pq5pqSEzHOlJx5fHjg8PCI857Xr98w9APLsnAaJ5RSvHr1mqvrG1JKqBQxJbOkhTkkKgrtB5TtKJ3HakXnLG9e3bIdBnIuzIvIZnzX0XmHNUqmo7Zpgl8kNdA05+N44nQ6CSls5PDP33zDH/7wt9yZe95u3sIHCHUphXkcOTw90nUdSkmyiNps5b6iElNqZUOFvnOUoslpJiZLjPqs/T0eD8zLjLGGaZo4jSM5JY4nqfF+98M7vv3Tn1FK8Zvf/IbhzUCYJ7799nvmeeZ3v/stb968wToPKHKpON/x5vMv8dbyTQg8ffsd3hqu9xsysoA6E2pjsb7DWIM2DmUM2hqsd0AlzZmYohh7rcFUc97NkeSOluVsDK7rAMWRkRgi2ogHIUWJuZtGKUyxTYJjjWE7bHHOU4rh4XEkxsxmv2fY7GRS//jAEkTTb6zCacvN7pqu3/Lw+MRpnFFqxNlGqFu2PCXhjObqakcfC/eHI2OQ610lvxFqaWVJFaORqEuAtSK9SOKOqpK97Z35+K+YCy644C/ChVBfcMEnxJmyta1YpWS72a5Sj7Zdq43IPwqK3Laic0XIUzNbfQzrlu1aBb7yT9WydMUXuOpfJZKvJCMuf7V+gxbV9SoNqOVsYFrmhZJzq0wW/UNucWLUSsjSbug7i1MaZRTamnNChTlPUmUib5vR7vxc6ypTeD4m1Z7XL21Dr/P5H51o1HN+tMqUKmasl4/7MZRSCCGyLIHZzYxOKsXH00jnnUxoU6QUkSqEZTkTUUphWQLTaUQpxTxspLwjZ5lsrqbPLIS65IRCUxpJLSmhFXjnyLqcddEv87rXZ39WfnzgcFbTX86ZGAMhBKIJ58f8EHKTnGitxbiKSE5SSijqeRr7UoJy/mhXRSa8mRIrphhCCISwtIXMWg0PKSfZuynlXDKyLAvzPJ9lL7XUs3nPGCsf1kp+c5Zs7pSzLKpqC41TQLsHVDM5np/s+V7h+Zw29+H5tbO6EVf8dEejSg50iokYgrRolkKxBmtNuy7qbFqsdZUZPUcd0lJjdPuzbuZA5yzOSQGStxatEGNxkSry82u5yTVe5krLuef835VSTU9umpRKrp0qIvvQ6++Nj91IF1xwwV+MC6G+4IJPiEpjwo1kGq0lu7nvKLUSSqYAxjms9xQUY0KymhUsEbKWP3/orU4rxXbT8/p2jy4ao1oWctveFrGJpRipP+66js73rWrciPFKK6nTLppcDboackiUINFy0xTQSnJvlelw1nIcIwXZoj8ej4QQuLm54fPNLcoq+s2W62uRBkhySMDoivWGzhusUShdz/KAWhQaRdVGpNRaoZR51lV/DFpRtUYbi3WeUhWu85QK4zxyPJ6Y5ohWmt12x9RrjHn84MPlnBlPE8cnSwmRMM14a5hPR4aho/eO/bZHa8V0PDGfRjlPhwMakdgsixS3TE+PPF1do5QQQpH21OYhU8SUycqgKDy83zKPW7zv8L5HG0hGUUsr90BMcsL1xF64TlPhedFkraXrOtE2jyeWEMg50TlHZz1G//3kjhWlyIT78eFOYvpaysQyjUyno5hchw7nLLVmShaCXkqSnQaKpLOszy0WtNYcTkeUNnRdx6tXr/DeE5fIt3/+VhYwKTHNM8fTiXd3d5xOR/ZXe968eU2Mka7vef3ZZwx9h7aGAiwpc5wXrNHcHw6kHLFmT1E7lLVoZ7HeidFVKTKS1JFaQY6xls7IdD+nKGUrVmO9lUVDhKyE6C+zLAZyzFitJd7w6cDxcGJZAk+HE6UUhr6n7zx937Pd7Ok6TSowLpEQE7bPuFwoKElAseYF8TdYJwS6847Xr27YbjbUCg/378m5MI0zOccmRynSeriS7HZfgcIahfM9xihudluut4Oc52WSZBaU5GprxdBZbP34IuuCCy74y3Ah1Bdc8AlReZ6yKi2RXb3p8FRyKZi4UKqQTNu1HGpdCFn+uzNgFR+fUCtF1zn2uw3ESlzyuVFPa3lJK6vRhfPkS8oipPWwaSYoNVOqajkcWjKcl6bDLe0zhn5zwDlHSpmKI5bM42lhnEZMv+W10hhjcV3HZrshxcg8iuFLG5mWOacxhnNEXskSBVaMacSgRdKdJ9QfmZxJdl9btKwTzIq1luyEaMzzzLxElNL03YB3qWUF/zxylqn8NDpqjORlQWvFeHrCWs1+t+HLz17hrCXOM3GRCX6YhazklIgxSdpCCCynEecc2/0O51zblpcdgVQTEVlsnQ5PpBjZ7a/ouw4UGK0oWnK7JcvjOVqQWik1Az8+FmMM3vs2oU6EZaaWjG3tlKvu+mfv2VpYlplxPJJTxCiNtY4UAzFIKYyzNzgnLZormV6zsdfJdakiwYkxyaR+mbHWYYxht9+x2+54+8NbtDGUKvf7EiLTvHA4HjgcDhyOB04nIarOO3ZXe7yVZIxaCqkU5pgwCY7ThKJwteuoSqFalrtux9ukwxQKpd1f2shCRYiplKWs2nuV1dnEW1ImhhY9mTNaaXItzNNESoVpWnh4OorRdxspm4FaEf17k6osMRFiIqYi5mPAWoc2kiWuTIvfswYUeGe42u/ou8jT05HD4xMpF2Io50bQlUjLQqoZjgugKlpZOu9w1nC93/Hm9oqSE+NRi6m43X+qmSOp+Rd3bi644IJ/OC6E+oILPiHKWcNoXkgYWn6uAlclo9YYfTYNaSVWRaPAW0Oni2Q1fwAKmWbtNj01VhYVyKlQgJJjMwNKUoFUWWfRicZICgFqRWeJzNNKE2KiFki5kqvkVYclkrMkMDw+PGGdPcsJ5mXm8enAaTxhrGfYvMdZR0pFpsVFNLchLBjjca7HOX9OWhDir8/b0+fjaqUlL3QEHzwD69caI3IWWxqhzgVjbTPw6fM2fS0fT04pOTNPM9Ooqd5Rs5gBazFYK8/1wT3hrIGcqSm1/OVIyRJVZrVs69dSiG1CnHJCa40fBobtTnYRlMIg1e4lJ3KW4p2wzFRocXJZppJraolSoiv+wHkx2oCDnBPWiEm17weur6+prtK1qLefg5gaF06nE/M0czqNGG3Y7bbs9zustaS44L3DWI33QgBTjKQkBjvrLP3QtxKSeNZyr/rkNZnFe89msyHGdNbKGyNJFznLv+U131rRpvuFeZ7PEhHfd7KDozVZVMY//miaIPNicVZq2ztSCm3k30SCUsntmqDlvqxVkmnqmvWuaEZZjXcarSXbfZNkp8A5JxITFDEmkQ21jxAl7aMLgWanbU+OszzKeo+2XkyPKbbXjebqai8E/TRT50TMiVykFVQpud9LKaScRVZTqyyataLzlu3QUbKhphmr17pxWZrlIsbMCy644NPhQqgvuOATIqVmSjQKp6UqWhvVotUqzht5w1eaqiu6gEEMgd4odr3Eh3VtavVz0FpxvRv49ee35CVzPE6EkDiNM4+HI6VUmdpqQ06JeZqlZW2ZCfMkb7xFSHyKGWc8zjaSmCDFwuPjgXkceTqMHI+jaERbOc00z/zp2285HE+8vXvi3f0Tfdfz669+w2effU7lwDhPHI8Huu4Vm+2GTd/jvEMb2gTUCLG0ug2bVYvAszK9+8g5VlqjrcMUj/OSdKCNZQhRDJHdjPMOlwq1ZlJYZHv/I6bEECL3dw/EH0bZvu8cxii6XmrSDwfD08M9Vms2nWPwTrbbc4SS8dbTe5GElBgZ84GUEsfxRE6Zz371K37z+99jtZfKda0xupLjTCQzUZvGGuYg7Yu1ygxSKc1ntTAMg+x6qGd98Kqd9V4WLFZrTsMApdB7z+3NNff2gaurqw8ee86Zx8cHvv/uW0IIHJ4O5FL41Rdf8Ktf/UrkQTlRSubVqxt++7tf03WecR6ZZqm33mw2WO94enpiHMeWM72gkKp2pTXWO7a7HZ999hkxRoyxaC3P/fb2hmHo6YeemCV6UUI7DDEEDqcjKSYylavbG0m+0IVIJQKxQiwinYq5YDF4LZGK0AqOlCx6rDMUo6hYSpbIwmS1aIyxGAOlLCJfSRGNpnOSOtJ1RnKmQ8T3m3Phi+zmaE6niZgqDw9PPDweCDEJWVYGYxTONv+Dc3S9l9zvzRVdt4F6xzJNHA4Hbq5v+erLL0m58M33d9w/Hkl1JKaZJURQimHw5FwYx4mUMlQjmdhGc7Mb+PLNDTlFOpMIi5Epd6tOP44L0zJ95FV2wQUX/KW4EOoLLviEWBvJ1mHoWrqglMS4gULXypo2Xdbt/FrQSOGC1fVs4Pp5KLy1DJ0nI1vTClgWJZnQpYJupqgqEyyT8nlSXWvFlIqqlWgSsS0CyAVKJZVKiIklRJRW+NlijUEZ2SpeloVpmhmnuWlAPX0fePOZSCxqa4cLIVBqOU9M17zo1Rimtf7RhPpHTrePUGoFZwOiNpIHXKxMpm0u0sa45lPTkk9+YRpXWtvfstBix2p7fpVSjEyhcxBdc+1lQloratURm9IaFkVOUHMmxMB4OhFj5Gq5PadyyNHJNS8lkbMipUBKVmQDKZJaJKAY8DQxtXKO83lZFwfy92eTqkErOa/OWIzxLHb5aCterRBjYJ5npmni4fGBnDPbYeDqao9CEcIkldpOE+NnGKNf5JyL0c1SfxR5WEptX9NyyVuCS9d3P7q/jdE4786167VKY+aa21yphJauUUGi/GpB1YDkYNS2+Fhzl1dtuTqbdM+RiS9uMd3MwKvJTykxQuraKrlffJ9uE2ilDSipi+8yco3aFB4gpkwlsATRT8cm+wgxYorsrJiq2zRZt0ZJIxF9Wv/IHLrZbEg5472TBahWUoleMgq5x8UH2UqZzq8NyYnvvCXpSuctlEaodSFn0BQo6WObNhdccMFfiAuhvuCCT4n2JlxyllIP3eQJSp8d+fJlVUxCRSZ5yxJJ1VDwrAUtH4JWUl3++qonLwVLJQSLpsV6pSyELBdKiizLTMmi7+2HjWhR54WcElOI3D8+CSFDsmtLzmAMvu949fqWv/7db+h73zIFKofTSKqV4eGRlAtPhyPH04RSf8fd3YFlmXj/9h1hmXn16hZtHMbJNM60BAMQLbCqCl3XKvJmbau/1O2nac8WYzw4UMowbArOeW5C4YtZJvbv7ibu7k94+/HMXa01znV0nVRIx5hRKjfJBWyGjqHbYqwh18q8LEJicmqTalBFNxIuhLYURd9v8V3BWGnliykz5yx54M7RnU4Y57i5eYX3DqV0M29q8hwZj0dKrVxdX7Mss+w8eIU2FoU+L0pyLuS0MI4j7+/e8/T4eE6XefBPzNcfm0ZWYkgs84LRhs8///y88Pnzt9+IBnq3pes8aMUSAkprvPcM2w3TNPH+/p6nwxO1PVfJto7M88zpdOLu7k506svMdjuQO39O9DBGtYSZjLGG7W6g1kqM1zhvOR6emMaTlLAoyC3bHa1bWI1uUo9KiJlliVRnGOjaws00ollJMZDS/EyWaz0noAgxbQsEJf4DQHwGpZk3TyMxifcgV9XsCIWUxZcwhwMVxdPhREyZmAunSaIqFbIbpVTl+uYalJS7hLlg3cj9/T3T6USYZ0pJGKva1yicA/EySlwmSqGQe+XqatdkXoWcI2FJHA4P3L03GA29U2z8QMnlXEq0TDDVcCHUF1zwCXEh1Bdc8CnRil1qTuQoRK1oK5KPMyWVKVqpst0e5plpWqTsQzdSmT88PVJKsesdn11vyEvBKVhCxCjISUxhh+PElBZKVizzSDKW7WbDMGyppXCMiRQiMQXGcYRa8dbSOYdS4I3BbwZef/aav/mb/xm73Vb0viXz+HRgDpG+H3j3/p7333xLTIn7+yPGfi3a0xxRVL76KqCtx7kO57y0w9XSqp6ltKJUmZav+vOPk2naiNGAEjOiVhpjMgppwKvIFPF4mvnmz/f0/g7vRGLyIUhBTkfnO1KOhCgthbk8T4bVqxuMc+QcmFJ4rsQuhWwLJctzcc5hjJT09JstWhtsI9QVeDwdGecJbS1+M4jmW8PNzVXTfxspMZkyx+MTKSVubm+ZpxHrPF17bNXa+kAmzDFGjqcTb9++5e79e6zROGM49EemX32YUNdSiSEyTzO73Y7Pv/wc7x3ffPMn/vinr/He8dd//VfsrrYorZjDQlXwavea29tbHh8fOJ1OfP/991xdX/PZ51+glebt27ccno4YY3n37j3LEtBKsdttKKUwTRPLsmCsbobGhHWa7W4rOzoU+kFkNHd371liEEJds0z4dZsYa00G2VlJiXkGqoPatPq6YoyC2n5mkLzwNZYw/2RXCSQFR0p1NDEWYjNjnk5HTuOMNg7re5TS5FzJpbVtnmZCjPK5LWyP48QUpFG0BDGLhhDxXtJzlB5BGZ4OB8bTkTBP1JywVhZWzim8A2tBK9nXWgujjLFSLuQ983jk8PCeHDOHxzve2cCm7/jq81fsNj05F2KSGvXDQ8WU8MuvtQsuuOAfjAuhvuCCT4jnjNufbM3XlnernvsP68uva659aqv3/mkG7gtUVTkNC++ujpRQeDITISae/MTJLsSUGHeBaQ4YnUmdwuhE2SjKRpIaTv3CMi3yJp8SUHHW4p00OnoNRlXu38z8cH3gtBUNbS6Zgz7y8NnMkwkcXeRUEzFmtAkotSY/ZLSC+zcz3189cdpGykZx7IJMootMdo2xWGMlocH1aOv43jwS1T8k0ks1PXGRrfq2vW+tpfOelAp95xk6T+fcR5MuhAhLIkqthUT8EdmQvGAn5kqn0dXKwiAs1FJaLJ065ySXlverjKW2uvGztAbOkpQ1l/u5Sr4IUWy9mmu+85reobR5li+8kCTIZF9a8oyWWnZrjDRTtqrsj2N9rNpy0FfpRjmb80qTN4QQ2gS+yNc1OcSaKy5lIxVr5DoYo1nmueUjGzrnno+35SmXFw2Ga9D2Wu+9PneJmZYWR1VLa3gXqcPLl8t50VqeTYV/nzdW1hRmeVmKKfHlHbJWza9G2vWB1vO0PoDSGqNU03xrdBY5hnUOpaUkRrdcbOMcVDmu2p5fLRlUPbc3Omeb9nuVH9EaMl/IVdadrxf30NqmqWrFOXv2AvS9o+87Ss64ZAhG0zmLtfqjv2cuuOCCvwwXQn3BBZ8QvfNAS3Vb/1flzVefc4lV2zIGraQBzWqkTjsFSfX9iOQjmMz//a/+jj/d3st0MUqJSUyZJUgj4Cr7WItl1kxkZ5tON0YxftVngqCVPqeLaCWVLNvtO/672z/irDl/bYyRh39xYFkCSwiM4yRTZuKLGC4hOt9f/0/8v1494Kyh7z2+baPTyjhEX970qS1J4Vt7zztz+MhZls1zlIa2na/JzegI26HHKMOmH/jNl18Qpkz57B2d+xYYf/YRpWb8iptXWx4eHkizHJM2Mu0eNhtuX71muxnYbzy7wVNS5PT0SAxzqysPlJw5jbPIJ6xl2Gwx1sq0slSMs2z3G25ur2mRDE3moZmnUYpMrEcbSylZynJQpJI5TSM+Z7phi6oSdxfLAtA0vBXnHW/evGLTd/SdZzMMPLqnj5oSn6+XLOjq2sxntZxLayg5Mo8nSk6UlPHes9vsUW8URhmc8XSuhwLjccQYw36359XNLcu88N233zLPM8PQs9tusNay2UhFeymZcTxxPB6ZppFlWc6LI7MmcDQOO/S93IslQ5RJLi2ZYzX7GmuoCuZlJudA11mG3p010quefF1gaWPQSjTGNcuiYE2QAZHu5AJGtwWglQWgaqS273uclwIk4wdiTHSbgOk2UszSzrA1ml3vzs2KZ6lOyeQid/Wr21eUWtjvtlAztRaskdQO7wxOI9Ga3mH90CL6ImFKaDLXVxucUfzuN1/yz373OUPneHO7Y9O5sykxhMA8PrLMhwuhvuCCT4gLob7ggk8Ia16mc9TnT21CbY1M9Aqgqxi31rZDeUNPoMpZOvJzyKbwx1fv+eOr9/+ZjwbgHvjmH/3d3/Me+Ec8z1+IzVs1pJUKWoydWmuZXHqL0TL5vrna8+bmhvf7WZJKPgCpjR7YbzfM40kiBZHpozKiF95st2x3W17d7Hh1vSOFwIM1zNOJaZxIMVNqIcTIcRyx1lKVOedQK2vw2XP96pr9fkfbkzhnT6cYKMW0vGAhzFprtEEeNyyoZnoEmQTn8iKXWInBb7fbiWm177nabrFO/vxhrDnX60RcptJGK3wrSSmtebGUQkkF5z1hCe1qyMTVGgcFQltMXO323Fzf8PDwwOPjv+f+/p7ddku43uO9x1pD33eyMAiBZZml2TFGIb21XdO2KFVUrHO41lwZTolSZdFYW2kJLf8dILY4SK0rnTdtwquama8+32Z6nUZXktYo1QymjahrLY8h8pFmptXP02vnHP0wSPGKspLDbT1ZGVKrMq+14p3l9fWOzltCCEzT1GLvCjmLEXK73aC0Fr16W+BorZrRVn6+xGtqul4iKk9TIKeMs4qh93Tecnt7xZdfvJY/7wc6J02OtcCyLFztNmwH/7zbccEFF/wn40KoL7jgE0K38pD6osK4VZag6rrFLOO0kuUNs/eOsh1IGWwEbbJoKz/2g/4J9zFUatOgN821OMaouVDXKWOu1JyxCjqrcS3x40NQgNNKPozCWy1T/5woqXI6Hvnh++85HQZMeUNnJFlh2GwY+o6uGzHKEGOk1rXUR4pEKpVpGhnnEd91XN3sqTfXLwyYkv0tFd2FFBOqyALLWodqpTXarPKKJgNpx15pSSZt0TYMPb5N60OcWcpEzumDx26s4fXrV/zut7/GWGm0rCURw8I8ndBa03dd270ITHXCWsvjwwOHRyljOT4dOT4dpdbaGayxDF1P5ztCCGL6tDJ1Px1PBLcw9APWWkKIOO8ZhoGcC4+PT3jn2G23bIYNTw+PLHNgPE30vacfOkqCUOvZM7Asi5hye0Ot7ll6UsRkK82ccqF1a41cw2REpaSoqmKMpOTUwll2IWSXRmwd3hUK+lwCk3OSPO4qd6fWYrKMKVJqZbfbsd1sMFrRO8mfrxRK8VLyVGS3al0gUUWPLQU3YnA2WmOVwlAxVDrXcqaL1L0r1UqhdMWogtEVrWWhZo3GOUNYIsssi5beO161e/CCCy74NLgQ6gsu+IQwramwhXnJGziNTLcPXSHm1MgXXO82XO13xFQZQ2HUkU3f/ZMmzR9DbZP9VCukRqZLgSRShZIKJWZqTHSqsvOGwWnMRzTURkNvFRun2TjD1ltCiiynhSksvEsL0+lA1znC+NcYCtvNwK9/9SX73ZbxdOLx+oEYIpvtlv3DEyFGng4jMUbuHx54+/4dXddx++aWz774vJWfyH2SbSb7TNGVmAOoRFGS4Yw2+G7AWo8xtiVLpLMOWYhjbVpuxe3tNUYrjk+P3N+95Yl7wtX8wWP33vMv/vnv+V9e/RsOhyN//uYbxmliPh14fH8nul6toWSWJXA6TCitubm+4ebqlsPxwA/f/sAP3789i5KlTluh18ZEoxmGjnmaeLy/xzSyGpNUtm82W5zrSCnxpz/9iWHY8F/+y3/Jl599wdPdA6enI/fv7/jsszcM19dkFTkVCCExTwuHw4EUHPvekHcdqt0jpVZyqixzQRuN91a0zefYxtW+IOewlNpSWpKU66hMzlLEVJvkRGtLCJnTuFBqJixLqzYV8ZHsKCSW5QRK89lnv+P3v/89OUVOj/fSPpkM3su1xHjQTjLAD0dSikzTzPH4CCi0cXTG4I3GqYpTlf3geX17Rc4ZTWY0Fa0KRqUmCylYU3EWus7Qd44wjTw93JFSZL/p2fz21xc6fcEFnxAXQn3BBZ8QzyYxWN2HtUpm8Y+cUetktTXFaWNRqpJrIWnolKXPFkUm6UJR/7Tf+lRVOCy2anyVko3VF8aaO9yiU3LOpBjJSTKijfppUffPPH770Kqep3qlaBT13Ih4Oh4JwXI6nZimSeQ7bcvfto9awXcd/dDKTKZALpIpvW7xxxDJKbfJdG5TzkxOYjrEqrOkQCbU5icTajnoVepR67NMAwzW6KbzVaScSETKRyREWin6vmO325JiFG3xWjGeE1RNTokUI3ERqYJSitNRdM+nozQshln0/4WCtVb+LQRSlOm41roligSy1oQQJKu8FCmmMSKFmOdFpshV4ayT2u+U5XGqmC6rFo+BTOqlwTNnLbsWqLYYfY6orC9eb2vU4PpZcttlCaybuVWtso7Sarp5zk63xpL0atasZ/MjahXOKNaKdpQYBDebgRg081GTzkZHfTY1YvT52tY1/SdElFJ4Y89aci3R2Vij8M6QtcI5jUtyr6pVotK+TuQqqk3NKznJ68IYjbP9Zc1+wQWfEBdCfcEFnxAPT2KmU6p55pTC9xbrDVUpPDIBE0KdAUVRqRFxLaY9pfmv7r7C/o+ad/3I/+1X3/DN/mMmvf//x5tyxX87/9f8F+kr/mb5HTdqjza2EReZHi5LIMfA08MD79++JYbE6XFmPgXm6ST52h9AyZm4TIRZ2uau9jtizmAtmxAIceE0jaQY+eabP7PME7vtltPxxM31FafTkcf7e2qt7Hd7Npsd3VDZ7K7O9dQhLKAUT49P/Md//x9x3rHZbjHG8ngYSfUtruv4zV/9ntubG6zv6Hd7jHW4rsf3gxA6Z9tktRBToL4oUFHAEia0gmk8CZHWH1+MpZT47vtv+cPf/S0hRFIKGKPYbAZub28ppbDMi3wskXGcqBX+9v/zt7x/956YM/cPD8zzzLzMHMcjxhj6rqPznlzyuU691IoyWhYOSI7zZrvj1795jXOeP//5z3z9xz+SQuLh4ZHedRyeDjjr2AwbOt9hjUPVSt8N1JToO4ljdM7R9z3b7QajodMJoyrWKrxT52hE34lx+Lz4VchiTFW0yegCep1U6/bZaDS1GRor8xyYppmUMso6XC8T8TnMpJwZJ/mMKtzd3/H1n74mp8R4eCSGhRAi0zyTS2GcInOM7YkIrAGrQWtL3+Qwp1Mv5sKU6J2hM4pqNLf7DdvBkVMghUkaPr3BWYPVusnLsiwoqoK62qUvuOCCT4kLob7ggk+Ix0aoJcJKNLQb3dNp31rb1q+s5/a+nJvpSju8M3gc/9Xdr/ib717zH68e+Lurx3/yhPp1ueL/OP2v+d/O/wZVJbkEVcnFoHShVFiWSJhn3r59z3/8w78nhoiuFl2MkMuPJKeUkls1uzTX7fc7cqnYrmOJicenRx6fHgkh8M03C99/9z3bzYbj4cTN9Z7T8cjD/R3GGP7mb/6G1599jjWWvntuBTwcDiIDeXzieDiy2W754ssv6fqex8OJ+8OB7W7Pr377e/ZXNwybLdevX2GdpypNVWs8HTQlOSnFNt3OpJykICVLdnZJYto7j98/gJQS33//HX/4w7/DOSGuRis2gxDqZVl4//Y9p5OUlSyLJMnc3T3w/04JYy3b3R7nPE+HJ96++wGlFVf7PfvtDhSSXNMUu88xcnIs282Wf/Ev/gt2uz0lF/70xz+RYuLx4RFV4OnpKBXd/eac3aypDF2PKpm+tzjvsc7S970sUlTFqyAyCA3WNkLddXR938yAEtOnqvBMXYRQq1JRuQjpb62joomvGLvGGcI8CzH2wwZqK36ZJuYlMC+hJa8o7u/vxTxaMmmZKSWLpGOciDHyw7t7Hp8OeO+5vr7GOcdu03O1HdBa0Xee3WZgN3TSjpoSvdV4C0ppnBsodSAsE+MpoXUj1E6f87dL8xcAFyp9wQX/mXAh1Bdc8Akh1cTPhqeVAIme83mLuFbaVrI6l3Roo88Vx7ZqfNZsguGzx4Ff201LtpA3w5WXr+YraEkF7THXx8q5EGIjVvXF962SiRc63vXvErVnztvE59zd9Rhb+5xuWcQ5y8LANqKk1PNb9rlJHM5RYUY/SxLkDLVjal+nUC+kDbJ9/8/zr7ite3o6oZKqtMfX5+djrOhju75ns90RXaBGBZk21f0wkaj1OQtZrolsyw/DQDeIdKLznaQ+tIcppbIsgXGcGaeFaV4wWnM8nnh8fMI5R8kZa6zIGpy0ML40Ii7zcn6clIrEHcZESomU0/l+CSmyxOeYwzW+cJonucZhaZr80vTVRRJPSubopP78Qyi1EpbAOI345DHanDXO3nsUis1mA0i1trWx3VcRE1Mjm0Ioz8kcSsnxLUHq4b1pcgpzzriOKTPPC9M8M08z1jqWJYjUoZ2f9W5djzml1M5ZIqckWc65ST6K1JRLQge8XEWsL8farnUL3jn/V2mGfM4zX2Ufa6LH82OJpKS21/VZ4nF+nbfK9VLJSV5X87xg7IhapUdKU5SSryk8J5Mo3a63RPetv0TWV7zRmqH3lJzpO4e37TwrSQ0yyqPqIC2P1p514TkXNNKQGIPcW1ppPm7TveCCC/5SXAj1BRd8QvQt77fW3CailYSClKlaYUPAFEMFrPOgNNa5pqE2KOOo0KaAhauD47/5f3zFv9ZXKCVkhFZrXRpRj0mIl/UW19IY+u2Oru85jRN//uEt07yQ1zQBFLloalWEEDmdJlLK1CTk2BrDfruj6zpyTsS4tNIQWvSfZbvZ4qyTaumjZDtf76/YbrZopWS7WoEx4KxM7LfbXopW+p43r2+FrOmmjQFKm8Bq43Bd1zSmUqqxqwP/Mv+OqhXSOm0kitBWikJI4O0tJSV817PfXxFD5PHugdPTiasbmaR+CLkU5mVhnBXKWDCWruv59a9/y9XNDd9+9x1ziJxOJ9ETp4zWmofHkdMpME0jx8OxlYz8B374/h193/Pm1S1911Fr5eb6hlorS5AK8lwK3333VtI9jAXriaHw+Hjk7dv37BeZflrv+e777/n2+7eiD8+J/KJkRdornzgejwCSt6zAO8fgPeNm4u7VA3z188decub+8ZE/f/s93nv22xPOWoZh4Pb2FQCvXr8RYr9ETuPYnocQ2WUJ/PDuPeM4oY3m6uoKrTUpF97fP9APPW82b+iHDq0tBanrfng88P79A4fjhLMDm+2WP/7xa96/v8NZy1dffCkLL6WJURIqHu8Ky2kECjXN1JIw1TCaRMlOTHrWoJB4v1ISypk24actPlJLiqnnLHTRZWtMqU0LrfF9JiVLLEK2ZU9AZu0FTdWGqqrkblQhwzlDSrAsieM4kXPmNAX0+3v6fuCLLz5n2AyopEgqkLTCb67YNz1zUYqYKwUlk3yj5XdJivTe8OsvXxNjYthsGbY9SiuqNm2Vt0Vxi9JwtRtIMVFzRReIWvP0eOTduwdijGhlGqG+kOoLLvhUuBDqCy74hLB9D7VScqKmgOR9SC2yKoWYM1XJdHrd+rbWieFMmXNJBU0j20XNP3+44rdLj9IGYxygyWWtLq+tzKXgOk+3kSiy3fUN/WbL4+HI9d8pDseRXCEWRa2KVAylauZp4eHhQIyJEjM5Zqy1vL65ZbPZkGJgWSYh1M3r5ZzlZn+D957xNPLw8AgVPnv1hpurG4xWOCPJGc6CdzKdvrnastl07Pc7fmO+ZBiGF9M5RcFQUFKvXbatVEX9/ff8FxNwtMZgqUph1EAtWfS7viOGiKpiOuuG/hyD9nNYp58ppXOJiO/g6vqKzz//nCUEdtsdtUJYAkpJNfmyROY5sMwz0xTaNP+O0/HIZhCN72YY2G63XF1dtSm5RinR0B4PJ0KM+M2WfuPatHrhdBqx3hNCpAKPj4989923QqJjIOVW5hMjKWfu7u95eHwAOOcVrznU825hmubmjv37x15qZZpmno4HOtfJsTtH1/UMw9Cq04XYLsvC5nQipSS5y6VyOp24f3iQIhqt6Pu+NSlWxmlGGVkISopHxlhHJTEfTozjBGjevXvPZpx4eHhkHEc6L5Fyep1+Z5FozPNMXJbWiSMa6RQLIcr9dv6edWflRZskcJZ6rAbCdZUoOx2gTSscshVtLQaF0vHFfdjyrmkLwXUrqsrnUiCXSspiPo0pkedAAXa7wmdfKLT1YKyQcmWwvkMZ2c3IMZBLa3Fsuy9rk6Q1muv9lpwzzne4zjZDo/zeMMa0uvR2LrLIWRIyxV7myHiaiTHKY7M+/gUXXPApcCHUF1zwCSHvtYqCfKxZxNZIocRqxpI3tJZKvco2FJg2SVvrjrVWDEMv8oECqTW5FWRbubTvW9MmtsMG41oGcCc5tV9+/jk31wG0Be2oKFJW5KKYpoX7+0dCSOSYSCGhUNhzsoAFpI5byiWkqGS739L5jtjSNHLOPD4+EuYFZw27ocNZg3OQvFROl92AMbblAKu/d+Lqi2IRSUhoCQgvMjqeN94bSTp3MStqkVgDZQzaOaxS7K+vMNpwfTOeG/J+DpvNwG9/91s+t3tO88xxnHHOcTweUfotx6MY7bz3lCzb+TQjKRXoWusjsNsObIYO7xzGyM+USLQDoGSy27b7lTZoIwujaVkoWnN394Byjlwrt2/enJMrujbpPt4fOY0jKSeWKIupJSxSWd4WayhFCAsPMTKnhWVZPhqRtvLFlCKHp0e01sQQOJ2OGG3ouh5r3VliIRnaTcqUE513bDd9kzsIKU0pcjoeSEmKWvqhp5RMqpmcC3MIhCgLi/uHB5F+zDPGWIyRgpRpmokp47yn73soVaQsiPBZpDqQYiZpSQPJuWDUaipsFep1lXisciL1TKb1+roEpUtLyqjyb+2z0gZVVx24RDaGlAgpE3MmlkoqsniujWwrYzFK461DW0s/DBQUISamOZwn2N53+K6dm5awcl5kG8Nau5NKZlmmtigxWNODkobVkgsxLBwOAWqV154R6c7QDVhjGKeFJURSzHSdw/nuI3fEBRdc8JfiQqgvuOATIjfKlxupVkphrMd3VhoR9UuBtYYqk7xKlXg3ram0r6NircFfXaGUZp4DT8cTOQnhjC16DaVQRiaDN83U1G22+K5jM2y4ur6lovD9hn6zAxQhVVKujOPE23d3ku6wROISiTFyd/fAOI7krHBWqFg/DHSdkPur/RXee+ZpIkSZ0B4fniipMHQdn725Zeg7vFMMnaHrHK9f3eKsx5qf0zPXVrUMNacW11aljtw8x5bVn3yPDHwVqmpqm+4ra3Gd1DP3XQefVf60i3TdhwnEzc0N//pf/S/43e8+4+/+9Gf+p6+/IefM+/fvefvuPSFErHVsBg1ZUeJKneS59b7H7PYYo7nab9luh3aFRfc8jhOPj08AOD9gnJNqeC1kK+TMfDhh54D50zfcHw6M88Lrzz9ntxct8XYr08l379/z/fffE1NkDgso2Ox2DNvNub1PKcV4Gjk+PjLtFo6n48dv3DZwDcvM3dNRIvzaos4Yy367p+s6+q7nar+XxWH7OTlldoPH2z0pFZaYpKDlcOBwGlFGJtDaGIbtwHa/B8VzrF6uVP6Ms44ck8QQWssyLzw+PrEsgaEfUChSWEgh0BpbWhRcJS5J8t1DJiVJNvHayGtKNW9hQYiutqBaCVOTexjj5DVYFehMqSL90RW0tWhrKWSqKuQKKRfmJTKHSB8TfRIJTKryO6Bqg/GSh73bX7HZbdHakNGclsDTaeT9/YPs7Hw+sN3tmjHWUEvB9x3GCamuSpGpxBQ5Ho+kGOg7j7eyMJiiGFMPxyNv370lpUTf9fS+wzkvr1XneXwaOZ4WSq50/Z6u310m1Bdc8AlxIdQXXPAJUZvzqQK1EZLG+uS/1/ZvLya0dXVInc2Fz4+nkCY7oy0pFalNboaldUr4/JXrNrFuWt6KVpquVV/3fc9mGACFzzIhNUqxtLSC6OUjhCiZyTmRsoI2d/PO4TuHte48rV4NaSKZiMQ5YhRNPmEwShN1wRiprz6XkLRSEm0+UAfespWpEjGo1oniB/G8UFESviuTdm3RFrx3osn+ALSWevGu63DOYYxumuEg2/ZFCJg1nE13nBUUYrR0TiaC1lqsNoDEldGMn2IMVCiTQVvZYZDbRSQCMVKoTNOEtobTSSQRxlpSI7gAqTUDxhRZwgxK0W2GsylVKU3rUyQ3o+XHKqZVW8gZY0hai1K4ZkoSjbQ1BmuE6Ckg9R1UmSJrYyRFwxgxtNKi8VapQk7UotriQdit7bqzKTEX+RkxRGqRHGWjDbrppqdpIoTAmh8t5349ura7sxr5VsNvKdS2c6GQNJhnU+1q9GtT5HUXZDX8NrkIajUqrpNs+d71Zbo2dZYqPztX0VajtJyTZpCVXHKP7/rz63o1HpaWuiFRiI6cFSYZCuIRWM3KqzxFNNoiS3quXOf8u6NkMbTGFNFoKCJBiX1GK6k4T7m9/lAiMbvw6Qsu+GS4EOoLLviEyCvL0qqZoyCkTC4ZqzXeib7VWYtzDhTtjbWK7tMhkpEktcpKabyX8pfNZsB3PSln3r67Y1pm2epNRbSjB4NW8mZuWque0gZtxeDnu56+f0Abg+s6rHWQEzuvydZROkvZiEzk1dWGlBLTNPHw+CjpF+vWeEVkHjGhamW32eKMZaqapSg65+msfNQSmaeFHBN37+/RwP5qxzB0bDY9XS8xZkqps2RCKYmxk6395/9R9MprfpTawJpCop6JbjUt1SSXM/F5mVTyUxyeHvkf/4d/y8P3X3OcAilKIcnh8MQ4zXRdz24vOwVhmpmqVMenljRh+45+8GitmY5HTk8PLdJsTTNRVCP5x3MqkBdizpyWhZQz0xIYl4DSitMScJ3n4enAHBPb3Zbdfs/uas80zxKL1nmUhpglvcNZS+fdueJbFlKW603PuJn5evv+g8euteHm5ppf/eoLckqEN6/IOTONI9N4AhSuSYCsKcTlRE2W69dvePXqNTFG3r1/zzgWqtUS7VYKJUUUoiceQySVwjxNxFLOi4OKZC0751vGtJD3khJ//PprpvGEVlIdL2qIitKWWhSlBDHSUkmpkkwhBon1q1bjPdC+z5o2uddiUFRao60T0qo06LYg0KwZeo2wrx9ColMphJxJpZBbWsdSMqcloI1he3PN3opc5SYESgXrHMZK0kto0+RhM/DZZ29QSnH76oar6x1hWchJDMDGW/wwSDykgYIi1cocZMEbkhhT22oIDQzbLZ99/gUxZQ6PR+4fjvT9wHb3mk535GpZkvy+GUPBLunHq/cLLrjgPwkXQn3BBZ8Qa9CX0qqRT0nhiEEIdS1Nm4zB2TVqq7RpcqG298iSCzkVdCMCxmi6zuN8Ty6Fw/FErULUlygxZlQh4kobFEYmldqKxMBYrLN457HWcnVzxWYzoLRUbStloJmUhAh6jDE8HQ5890MvrXapEJPEbx2PMzGILGOzGSSmK2RqLDLJtg5vfTPtLUQTeHx4hJJJKfLq9lrWHdrQ9cgEUqmmP1XUnGXCz4/NU4qmEzYvpnOcTzpQz7rXcxvlWfn6YRyPR/7wh7/l/uuebrOn2+xJKTKejmLsvL7h1avXWOs4GSO54SVTwkJOGZyhsxIleH848XR4wljLsN1irMN6mVJWJRramBMhJQ7jKIR6XjjNMxV4OBxBK+4eHng8Hhk2A7//67/m9//sr1ka6fbeUarsWIAQau88pk3ajdHYTY9TV4ybme3mPzwvQH4CYzTX13s+/+INqgBVpryPDw883N9JE2BMrRikkMJINYah/5IvPnvFMi/MpwMlzCht0caSayXGcL4/lxSJuTDPM2maAIXzncQcetEMd77De0fvPeM48u233/L1139kv9vx1Zdf0HcdVltM0zuXgujZqWQtr5cUE3GJ6GKo1qJMm9hrWcjSUnKqNo1QmzbpXcfHSPGJymft8vNUWmRSIu2oVKUoWhNy4RQCXd+zv9qz2e2atlziMWNOpJxl1+Z4JNdCP/S8Urdorbi53rPbb5mM4nTS5AzGWlzfY7SS+6xkUqksMcluUsqkKhGB665EPwx0w1Zen4eFx6eRmMQvUZUnV0vIipxhjgUX8oVQX3DBJ8SFUF9wwSdEaZRFN/20OPQrJWWqAdPeZENMrPutdXVMKU2MGaUkvk5yeJ/1w6v5TqHxnWfYbMSA5TKlVDRGpmlZKoZLqRhjKUVjdJbnkArZGiZnqCVhraUbetlmNxarZaJqtRBcawydcyIhqEGm5tAybuU5lpRb3rJh8B3eOpE5pIRCYvaM0Wi1bterH1U2y3MvMgFXLSdYiW7mXNleX0jP/76fsZ0jzmkLzxv8/zDCoACjVVvsIBrduqYMQ20xdfI8FN450cnHhKoieXDGCNl1jq7zLW9ZZCY5Z+ZFmhJTqeQqU/hSixBja9lsNqIJbpFua1ycXjSn04mH+wdSjudzbV7IbUqrW9fO4Z0VUl0rhkKyqRWp/Pyxa6XZDAM319eNUGYpAakFSiKnTJhnyX2uFXI5/+wYFnKKWCvNiFUpKmLg884x9FLB3oUo93cu1NSyvtVzznkpL+QTpe24WIPz0oBoWvX6aoIsWSIDU1hQXrPpmvnwhcl3NSya+vz6+elnzn/X7TX4/G8v86jXG69CMwJrrPc4JIpyXgK5gjueCLmglMboZkhNsaWilPa9CmMdXa/kNaFNy4JHdq2qmFVTLpSiMFRJq+GFgXIt+Vnv0Bf3/noOSllTgBLzEkilYKwDpcmlMC3hH/TauOCCC/5huBDqCy74hIjlmZxpramlsMRMmIJsZWf5b6cxQBFJg7YarRRdn0hZ3sTHcWZZItYh6RW0N1Gl0UZxc/sa221buYRkSj89HLj7QXJmD4+iv7XGseklOcE5i/cWrTWHhzus1Wy2G968eUPXeTabLb1zaK3QqqIobJzl9dWemBL3j0/EJZBLQeUMqZBCYDyN5JTZdj232yvRc4bEvEScN+yGHdYZ+n4jk29tybkSY24fUTS8jhZt11xkiA6drFosWCM3TX8Nq7RVmGJZk0KqaNUle4x2PB+n1tYYrvqem81AMUYkJyWj27UsOXE6HDDGYJTi1fW1pFi0NIzdZmC7kS16qxXb7UAulTkmcq0SkTfNoCRa0Tj/orylsL+64ur6hlLhNI0sTTe8zFJ08qc/fs39/T3WGjbbjqHrKDlhEP1umhcmfUTvttzs91zt99QUKWFB963o4wMzaussv/7q1/yX7m/aQkmm0U+PDzw+3BFC4OH9e5F/VFBFFiqazPt3P6BQbPqOzdATY2IJkVwqt9dXDMOGOUas75iDyFqO0yIpJy9I3zqxL1Vq1GOMbHc7Pv/iC4a+Z7PbS1LF4cTpMJJiYHx6IMwjr6433OxusNaj0NRcKVokUwnVFnOtnXElpLo1TzYZiG6SD1IBpCXRug60Qc9JJCFK0j1iqWjn2d+8oouJu8OR+/f3VKXQ7+5RxrDdbLm5uUFrI6U7IaLbLpMxhn4zSNMjEJOUAlFhv7+RnRUqp9MiizdrsEaRMZiuxymRq5Sq0GcSLVc2t52t3DwSS8jc3T8xzZKdvtleCZmeJh4O7/5Tf91dcMEFL3Ah1Bdc8AnReiHOjWgVyaWNSSbTVheKVmcNMoqWHSsmKe+FXKYo8V/arFKFtSVRpmtd16OMl79rByhSqNzxRM5SDDOdZqxJ6GKwNsu2fbIoBWGpaAOUQtrvcEqh+oJVz02AULFa0XshAc4YJMSunvfBa87kFMmpYAfDph/IKTGFQE4J73STmRhsi8xTSj9PJc9Niwrzwph5ZsMtRk+1vzaJ9JkXPtNDdRZ1vKSMZxp9zhH+eWil8NbSOUdEE9uGv/joFLUUQggYY+iMo/MeqzXRzW0aa/HWimmUgrGakBKx1FYEk5jmiQoMxqCsJddCbVFs3nv2+6tzix9KkYu0XNZUORyOzMtM13m67jOGXgp85LBkaptCoOaBznk2w0AJhliLPC/9cUPmbrflVXolco+cqSVjjcLqyrLM5DDLLkIj1FRIKTNPI8YYtts9zomGWxZclc4L8dPBMoWI0pqCYokZXQo1ldYK2O6DtRq+mTid92y2W7z358cuQIiRGALTPBPmhTBIm+M6hV+Nr2JUpJlHVyPiyw/40YT65TaIkrhLU9ddhhektVbQWmLntCM/nTjNi5TtFBnyX18lrO8wxhAWMf06K7IrbSymxegBpKPkVRtj6LxHK00IgXmen70FyjyXvVh7bhJdp9PiMSgig6lVFpdV7qF5XqholDJY59FNMjZO80fNqhdccMFfhguhvuCCT4jcFApaa6qyYm5SlqIsqcAURDKRVlOfApcrxmhSWchViEFMUaZiaGKsaJPJ1VC1bCcvobCE3BICFFoZljnz9HhimQM5VpzusMbijUTVeWvxViZ1vtMYp9kPW7bdIOkW2qBKS9fIQikpFVtBIV+rq5FJVxeIMWPRnB6PpBDZeE9nDRmozpOVRhXFPC5ChkphHCdSzNzcXIvZzHv6JITarm/uLwg9lDORqyU3LfQqp3lmyBJ80rKE18ljKZSQKCm1Ou4PXzetFF5req3ZDVvssCXmQtdtOM5ByOMSqRUMbQfCGvbbDbnvGDp/looYpajGUEpBqVZMrapkGyvNMHg2+42kfiiRODiroWbJlF5mpmlsevZW2d0OsuZCmGcmLedjvxFStt9fsdlu2W62DM7KL3Zr6YYNpattQv3zKKVwPJy4e3/XZDtODIApU2JGFdj2A05pqa9eomj8C5SaUVXSRHTROOe46XpqhXFJzDFhbWBaIkoZclXMbbFYVQIlspfHw4HTNIlcxntqKcQi7aIoRXkhcW4zZGlcbIbT3ORDdU3Y4VlKcq4aX2+UpocoRXZhVFWUmts9VvmpDIUmtahk5lgY58gcM4cxEXMmo+n6LTFnltNESInTGLh/lAzvZZZ4QOssIYsU5vHpyFtz1w4qU2vBWctmGDDGSJV6ldffcVygFsI8MS2JmgtVGVwnyS4pi2woJUmlkZSehfG04DvQN2JUzbkSosi2lmVpRPuCCy74VLgQ6gsu+IQIuUk+jKZqK2/s2lOVFEBMcxA9bs4t6xe8axpjHTmME0orMWh1nqoMS8jkEnBeU2W/nWkSgmeMY4MGY5lOiXc/PBGWQO86vN3graW3GzGtWUPvJO5us+voesd2O3C13YnmVpu25S1bx1Xyu3Da4LSm213zev+KUitLlCKL3jiOd48s88JgHb1xZK2xuSebzBIWxqeJSuHpCdAwT4FXr14BMuWLGzGAuVIRSlzPXim9UqdaqTmSi35ujFSraayeySdKoarE8dVSiMtMilFqmGv5mSsmMAp6rdkay83NDbef/4oMfD4Fpph4f//AH7/+hmUJmNZEZ4xh119htGqTdYnIM1qhjaXU0qb9Ba2rRO4ZxdV+4Ob1FfMSJKkjJbwzUIX8z9OR49MTzndstnuJp1NCrkrKTOOJnBb6zvPqSibDr1+/5ubmFuccu67DoXDW4/stqjd49+EM7pwz93cP/PlP37Eber54c4t3lhITOURUrVzv9qj9FfM08/B0JMVESEWUOaUSW/vgdjfw6vYNWhuejiOncWacF5ZYsGamKiMlKDnDHFA6kkvh7fv31CIG1+1u23TrGYyhaC2LNDnDZKXITbssH5VUStMcl0aIlejzFZQX172WQi1tryfLQq01i7fJdvnRhFtKbJQki6jMuCQeTgvTkng4BSnpUZZhd40OkfvDwmlKxDwhIRqKeZ5ZlgVnLfuTFAaFeWaaTiiluN7v2AwDnffcXFWcc7Jg1JpSMuNxJMwzJQXiFNrul6MfdigFyxKkAr5IEc4yLxyfJp6eJrYbWWz3vmOcF+Z5JsTEaZo4jhMfXWVecMEFfxEuhPqCCz4hcpZt69yyXoVvrNM0aTospZBaWoZSCm2qdLwUQFV0pZXCSEtaTIVSEoUIJqLQLEtkWSLGVJQKWFOYm942hIRTjqKf825LblKTLFvf9cV2uEa2lWUCKuUqJRcxpqmW47vqWLQ6izGMkvi/vuvQgEe3x9HnuC+lNLVUcjMp5pqZp5lpmnHeMWz683lYp4nnufP6h1rbVv6qm36WL7xM73ieVwsZWWunVzPYx7hDNpV5mxj3kW6fGK4SGQhdJqRKqIX5MbEsCZyiWjlnxVVM08qXkuQZKZo0ITGrxBISoctEV9BWEW8L4SYTl0zUhRgLpk/oIYgGeYwsNVK9we0yxdK2/iEbjd4okk/UHvyVozpFuEqEq0gxBbzGmoCzjs45Tn4m2fTBY68VYojM04zTzQipIEcxJELFGoc1WvKVraW2XZh1UZOa/rlLLYcaWeRoLfdEyS0Pu7yIQmxFR7lAbGUw1jm6JBXmtHtB8rQLVclCT2rX87n6XO4bztPps1lvveb1p8credcv/8NZavMBrNGLKWVCTCxNKx5zRVkrVeLn56Baq2nL7U5C9pWSKbJSknwyz6KR3vQ9pStSJb8aNrVGGTGbxpSIKVFaC2RBzkMptRk7mzG1RTlK4s+aACKvRbPGDta1ibTldX/kmC+44IK/DBdCfcEFnxB37x9BwfUeOr+hFlhCYZxFRzuPCzklYoyEGDHGcGM8G+dRRqOdwWiF9QOmG0gp8cPdk0wzlVSBryQ7JSEMOUu27MO7Rx6fRnIqhDlj9YQ1hqMbW/GIxjuFNZrdoafrHa9e3bLf71CIJEP0s5UYEyUXlpAYx1mKSQrEIrIF7XuUMcSY+c1XX1FyYTqcWE4TRRd01U0WICkDJUWeHh85no6cxolUMpvdht/91a/JtdL1nldcsWUQ7n6OC5QMYVCUXM8EDm1QqDOpUkpRdTPLrWqQWokps4RASPGjetEfvhj5v/w3X7MdHf3mW/rN31KBJQvRmeaFp6cDOWeMNthW7mLOJS/1TPhFA92SPYJEx8VmtFNa8adtoevfkXNhCVIdbozFWkcphdMopkStR5w/otYCEhRKg7UGrZW0aHqH0S0yrevQSrV6d0lVMVoTTOR/uPmPHwwOLDnz9HTghx/ecdoM1JzovOX49Mjh8QFjNDdXVwx9hzWem+vbVi+uZbEQAu+//4F5Wdjt9rx/eMJZh+8GnOs5TRN//Ppr7u4fwDqU82LgQ+F9R84yVV1iRBuD77r2/GUdl0sixZFaK+/vH3j/9j0lRdI0UmJkDkJwu5TEw9CuSW0lM1XiYkDVsxREJEJiAH5JwM+LgJZPrZQmJtlZOo0zd48Hfnj/wGkOvHsYiblgfIf2kt+e0FjfSxa861CALbJAttZgrDtXq2st17HvenabLdTKeDqKhrzIB9QXcYWReZyhFt7dP7L9/i3GyGMopZimhWWR/PTNtufLL18x9D37/cDQiwnWGU3JGmcMzn6gVOmCCy74R+FCqC+44BPi6Ukqnr3tSQlAEVJhiYUYEqcpkFKSuu5lwTrHZq/olZM32Ga+0m7AuIGQZu6eRh4fnyRSrJkba9WUqlom9EgMibwU4iRa4aUGNAqjNJOZJALPgrNCqMe5ox8cWinC/BXeenIMpBAopRCXRM6Z42nk7v0jISamRbSj2hj63R7jPVdX13z+5nMUinf1Bx6WRFGNUJuCiwljFlTKjOPM3d0Dp3FkDgvd4NHGcH17w2bbM2w8zotB01bVprKaKp3RjfS0vOpiJQe4SDSajLBzI0HirJTQhizmwPTxtsC7Vwv3//X3L/7lpw7Gf9wsr/70LwpgfB6+f+wb/wGJfz+ayn/k6z82fy2lcjqeuL97YJlnbDPKTscnxuOTaHv7gc53kq296anAaZox7kheFt7fP/Dw8MB2e+AwznjvefPmC25vPPM888P3P/Dt9z+w2V+xv32FthbjPc5aZq1YQmSaZ7zviDGjdUUbmWDXkllajOTj04H7hwdqzuic0bXK9c2ZWJoERWvZ8XnxP86S+9X4Wlt+czMbrqdHKzQvGxlVW/gEpnnh8Xji/unAYVx4d3cg5ILrN9huaGUxVhbF1qKNSDdMqVjUecIv7ZKmtVMqOi/xgiEExvFIipEQMzEmFFLi45yUxUxLoObM4+HEu7sHrLUMfYdzljkEYpA0j6F32Fd7uq5nM3R03rE0c6rVGmuEVF9MiRdc8OlwIdQXXPAJUTJNvrC+SSu0tljr29avJH6kLHY7lME4j+0HVK3MIaPIxKKYQmaeF47jzGmObaNcovOclybCGCJLyJQqySFF5TZpE2JZgFAyupm4SoVcNX1xMj2OiePpKNvAUSbJpVRSSJQscX/yJp0IS2BujXBZaUyI1CzHDIr793ccHlbiL5PuEKPIV7TB+45hs8U4kbKkVBnHmfv7R0IIXF1t6ftO4vGaGU+kKut0UVFXufJKBF78WSQqhaIUpclajLG4rsN5f05G+FmoFuN7xn9eovGpHr3+zJ/+YihQxp6j2E7jjDGK8TgyHUe899yExJClSXAVYpSmhc65iIa5VE7zQrx7xFpLLoZ5STwdjviu4+bmhqoN0zShtMblgvGOWiq77Rbfat+XZZH/vnoLUBhtUVR819EPg8gfpknu2bXgJcuORIwJisLr54l0KaVdY92iYp5rxIEzsXwZwyh661Yb3xZl5UVdfGmFMNrKPYZSbSJOkxjJz5es9QxG47zIcIyueCtei6v9ju22Fx19iVK5Pi9iPqyVGKOQ7BCYZzGuHk8zD48HnLPknPHeSeJJktet1pq+982fITGYxii8s1Ar3hic0R9daF1wwQV/GS6E+oILPiFylH3qHBUpqZZksWWzdaSsmZY7pilINp12VNPT7W7Z3b7hdDzy/u1beQNtGuuYEg+PT8zLQuc7Npsdzjqur19ze3vDPC9k/T36NFHqyGlMFFVRRrJ1Yy5Mi7w5G12xpuKswW0curM8nU788U/fSHlLqZgCNC2mEOLMPAVSzhyfjhyORyEl7iCGsULLE65M48wyx1Y0InKUzXbLbrdHWcntdcOGVDJLnAmx8P0Pd8Sc2e22Tb5g6byF2mOtgaqpJDEdrvIKJbFuKC2ZyAUkXm8tupPFgwJ8N+C9Y7PZn1sFL/gxlFIY3+OGHTEG/vzDe3KKTKcj4/HAZujZX93Qb3aSLtEWiiGKCW5cFuZYmAuc7p64f/gzpVSudju224G+G3j1+jO++NVv+PN33/Ef/u7vyLkw7Pb4YaDrB37z699gnOfdu3d8973sFGx3W/quwzlPv+nRSnN9UzDaEZeFu+++Z1wSMcESK34pjFPg8TDSe423BmMUuWZSjmhMaxFt5UJZUmTWKMp2NlpBEJQkZTnLsjCOE+M0E3Iho0hokrZkU/GbHdevXpNL5nA4ElqGuGkxgClHUg50nWF/tWG33eDNLb0T6dDVpmfTd6QYmcYtKSXevb/nh/yOECOPjwemUV4vp5Nox5flPQ+PBzrvePX6hs0gUp0cFhRws99xtdtgjaV3GqMKvdNcb3uit8T5RI72P/e68YIL/knhQqgvuOAToqzV4UVJ2Z5WaG2w1qO1JeVKSAXd4uukAtljfQ96Zg6ZeY4sS2AJEtd2nMSshvJ0VWOUwfqOfrMFZXC+w4SEsrZNzSpV6RbdJkUUpRQkIVkmdaltj8eUOZ1GgjXYqnB1NScKoU65GSizlLiEeZEJcMxUbdpWfZCs7SBFLbW2Nrkqk8/Ndo8+5/YaQlxYYmgFE4H7+ydyzoynmbBElII+S8zcmlW95vECL6bSUrcucml11jCXuiZ20xoFjRTKKIOu+scygH+qWIlUAVXEAKuMJS+B0zgRwsJ8GplOo0iIYiblim3GUeDcaphLISPnfQ6RuwfRms/zwnDquLm+4Vdf/Zabm1ve3d2zzAsxJZR1VCX3xWazoesHHh4eCUugAp3vSaZgTUUpSafxvmfYlNYwaFsCXm1FJs8TaqMNpRUirRNqpZRIqV+chPrCnPhMqtt/bRXsuRkDU06i2a+0Rkglr+82oVYpnafUa+ujUqKtr80B7JyVEqXOsx86rNFsvKN3huwMRonBczyNOGsoOZFTYlkWwv+XvT9ZkiTbsiyxdVtmlkYba9z9+YuXGUmVRYUaYgp8AMb4B3wX5vgG/EINAKIkAlVloiIy4jXubo02IsLMt8fgXBY1jwRABIQBg0o5ROrmpqaNqAiLyrnn7L12aoQIpcJliUAkeMcwDXIIqJWWM0aprs0WprXWCoXQZ7w1qNbwVibUt7rVrb5f3RrqW93qO1ZYE6BYl8g8R7QWbnPJwo2OSd50E62mCplPX54JuXE6nfj1y7NMuND9xVmj7IDRDjNOmHFCW8eSMl+fX0kxkUoFpeVFXskqGqNRRmMw+FG4voM3TIPFO8vDu3vujjumwfNwPOCNQTcwtVFS4fTySgixm/rEONdQ+GGgoanW0pTg66wfr4l3pdI1p5IAWJTi+XS+6ppRUNBgvFBMtKWgCRm+PJ9w/hOH4x6tDcPgmHYG63qIRW1Xsx8qdY2rvKnOp4ZNLquuITClwg/xkf/96X/D/3r9b/gPw3/mfxj/I5H/1+SL/8VXg7t/2PHwPx7YvQ6c/sML/9M//SdyiizzScJowkoOKykVPn3+glKa3TQSUsIYSR28f3zPuL8DOzGvgd8+faXpgRgTRimMgml3YHc4sD8cePf+A3/6079lDYHzsnI+z5QKdviEH0bO5wtaW2prrGsgpUwaM9Y4nLUopdjv9hg03oucobbKvKwoqhjzYsLoRq3mKsHYTlhCo1PXA5rkuuirzOMaWNRqJ+E0WqnUXCWCPaZO0ykiK2qN82Uh81mMuetCTpnqHc460WMbi0OIOefLhVIyq7fERcgpaTeSBs/mMFY07o4T5u9+IuXM4/0dl3khhMLzKVByY7dz7HcOrYW200U4tFbk562yxWmqS1CU7objjGoS2jMO7jahvtWtvmPdGupb3eo71nyRde84Bk6nFdPjxltrrGuWCXQq6CZr2Nwif/ntC789n5gvM18+fyXnzDTtmaadyBy8wymFmybcdMAYzWVNzPNXWpOoYbS5BmBUDc0olDUorfFaJnOHw8T9ccfgHR/f33N32DENA4/HA84YKJJwF5aV5+cTl2Ul9xCIWhsowzBM0rxbK1NwpanKAIqmDBWhIpwvCyll5mXh0/MLALv9Dj94atNgB3SrVG3ITbOmxq+fnlnWyPvHB4ZhlChv65km6Ya2VEG1iV+V8J61ll9jMofr0+ktjrxKQ/HH+IH/w/P/jqAj/8f7/zP/wf9novmvt6FWDR7/bwf+/f/pZ8yL4vnrF347/3UDPaJaQ7WCqpV5Cfzlb7+xrpHDYc8aI845hnHi/cefqK3x+MMfybXx+LdfwA4s60qYJclwf7zjeH/P8eGBH2ujacvlMvM//sf/xK+/fWFeAksSZF6pDa0d1Mo8B3LO7HZJgom8525/4Hg84IxMeq0VVvP5cqHkyHleWNaIVo1cHK2ZHurSr42O6lNaYfqf0lVvh7Zy5VDLm2Doci6kWFiWwGVeCbX7EZADY3k+9TtW/tOAaZrk+1iHtQal4PX1xOV8YnCak9c4o0l3B9JuwhrN6B1WG949HPn5px9orbEsKzEm5nnl09cXUs4c9nv2hz05JT7/9huX85lKpdYkWvGaoWR5fjbB99VSoWZoFW81u9HfGupb3eo71q2hvtWtvmPVLt4tlSv2quQ3xmzpscCbTGEjdTSVSUmkFaW069pYNcGL0XXBuXR2bJFmhyYmKfj9a6Pqa18JPLFowFkr8cedNCDpb0jIRoOWC2Rh5KYu86gNaVoNoEznUmuqNjStqbzRECry77o3sRsvN6YEgMsFbRu1VVKRxqWq1l/0G+fLCoD3nnkOaKWZdiOl9HW96oEvFaqqXU9dQW+K6d//d7tPGg3TDHd1R2kDH8s9fyiP7NvwX9xxGz5tCwiJSWgnGzv8yisW7toVm9foE/RvvqBSQnb4VkqgQJq6a+T1Rplo1+Z/42dv7//2c+lYN6XeWM7fChW+ve30yeW3n9NvGKoq7uY902VAzRDi3JGASq4PBaoadCsYa6lVaBohJtYgEh9lHMoVQIusSctjN06TfM/WPQRuoDaJKq+t4+qMuRpnW+sc6k5raX3y+/acqoIcBPIoZlcJ0DESSW7UNS2xbKFJ1VwZ5f8SZKH6ZPq/qA1afXUr9k+sm7Gwds5zEUlX0/KhXfpyvW95kypVrd4471vITBU2dVJy+o0pEpKhVoPTCmXk2XPFRXqLkaQbjvuBnC3TbmA3epKGcXCU5CipQZbHXKvt9terOfoKnkeeR3Kbbh31rW71verWUN/qVt+xSrPywl80KUOicrlcWNeVeVlIuVERnrTSDpQmFygUcgNlPVpVqtLE0iT1D6Aq0mXmMs9orTlME7tRGsIt0ELeJO7aO804OqzWDEZQdFPXbhqraRViEK7t509faKUQlpWwLNRSyUEiig/7PT8+/oi1rhslJSQlds1qro3QE/NSkcS8NSZe55k1RM6XCy9nQQlGpRg7MeG8zOS+3lZKotd//fyV0Tt++PCOnOF42POnJQDgrGEYLdbq3jD0ZtS3a9O4JSW+IdJ69fjopkBh+N+u/z33X0ciqWu9t2AQmUouITKvgWVZ+Z//8S98fXrh5fXM3379TOwSm1wqzjruHh4ZhkGSA0PsZIgKtTAOAx/fPzAOAwoJ9tBacdhNjKNHa4PzDqWVcI6XIM1jlECVUgo5ZloP6RD0oeFwPOAHj3eOcRzQSl8vgpQTr68nYowYa7DeoY1h2u8ZxlE2Htaj0MS/BeJuJauMtYpd2DFNI4+Pj3jnqCnRchQtutWkJDHYuT6jjcb6k2jTrWXcHbDOAYYP7z9QchFCSw8PeXp+5en5lcu8cjqdhTltHceHd+QiqZ+lRegkG6UVo/fsph21FJ6/PqMalJBQKdOqTGkHo2k5UOOFUhtrSJzmFaUbqeyuz4ta5b6XS2XT3UtzqzqjWvRBRU7DtV5zzkvKxCUQl8C6BJY5ktGk5qjIlmQYRKsdohh4Q8xcliBR7qPDDk7m1kpkGKkWaky9Uc4s85nBWdJuwjtDaxGnM1orDOAcjNbwsH/83QGhjpajf09O91zOJ758gpILozOoVoRmovr134Rn3Rk4fY5+q1vd6nvVraG+1a2+YzV0jz1W5CIv2pd55XK5EFIk10br6Du0sJRLA0qjdBOfUtJ051pRm8FOK3LO5BiugSLjMMpADTrhojcGNIzVeGdw1rIfRqwxeKMZnJghqY2cK8uy8PT0lRQjl/OZS9c774YR7xwHa7h//45xGAlrIIZELpU1yBQ75EJqSaKai0RAx5JZQmBeVy7LynmVyTPOU9GsKfF8upBy12bXglYwWIszmnVNHPcH7u8WdruRh/sj3lu0HuQgwhum2WhN00IAQas+LX+bWL89LnK/KwX/XfwT/336WUgO36z4hUzSeDnPvJwuvLye+R/+L55/+vMv/PrpK+k/vjIvlRAh5sYwWH746ch+fyCugfkyC54tZ1opHPcTf/9vPnLc79BUtCoYo3n3eMfxMEkjOo2oHtP9/HqW+3YOpJgoKRN6k221FlOZ97z78J7dfpLQjoNIgLaYvnUNfPr0G/OyYAePH0eMs9w/PrK/O6K0xXTZzl+ef+Ef/D8RVAKlcN5zd3fHzz//zDiOlBgoQWQX5/MrMQRyyKzx3OU2Bm1kAv34qBinHTTF3fEO4BqMMi8Lf/3rL8zzLBPuVZpOZSy73Z4lRE7zS99kyGNojWW/2zGNE8s8czldKDnjjWa0En40DQP7wROWM+e0yEEvy7U3eN3DZ1RPB2z8nrl85S929VCfMG9xh7VtTyU5YMZECpJCmmImYyjK0JTGWo11XrT9LYoROBfWmLGm4QfX6SLbvqRek0MVFUqUSbOzWArZWbyFNCiMMfJ+Y/DOMY07jNZiWg4BMNzvjiilePqqSRehjHjTJ9LdSFCvpt1vBDDbXXCrW93qu9Stob7Vrb5j6S3Br5ROSGjEKGEuCsV+v6cBxjq0czQg5kSpta/H5X2SnGe7vFNMU1ppmaAhUop1DWLGK0VePFu7puUdDwce7o446zhOE84IQcD0qVQtVW6T0uz3R8pUcG7ADxNaKaZhlECP4x3KeprWggurvWnuXN6Yi/B5m9xO5x2uNozzmFKwg2cYJQjEOAfGSMNJ712Ql/dKl8i0wrwEvj69EGPi4WHP48OecfAYcwQGTJdSaKX6Gr6gakMZhapVmhfzDRGk99etyl/NFfXwzWi/V2syIzVa453j8eGBmCoow/Prhctl4fU8czrPGGNIYeXSIKdMToIMtEphnSThpZhYTcBZzeCkwdyiqVupLGtEKcXlsohBrxTCEsmpT6iTHFa0dzhtUVrTmrCRY0zCdFaKHCM5ZlIWhnFOGWXMlVSxccSVqZh+oIsxkFKk5sI0jux2Ow6HA4fDgcF7goLQpTlGW7TOIqlIWWQ0FmxTtJZ4fT0zL+EqVWq8RYKHGEUHnCR183S6dHRiJmXZWNTOfNY9Kltr3Qke9SphESZzZg0BZwzDNOCsIUbTY77rdXtQWkMbi7EO1WkW3/LLG9tmosh2o22a+yImxH57uGqpux6/CFKyoqlKJEvkStPyM+TyprmOIVK0ZrEKTeshLnJtaWUxpqGB0SkGoxidZRhHBmew1r7xsLtBsmQoKdC0RrWKs51Mr8UrMQ2O3TRgtUhw9PVM2bXiTYNRVKWxxmCNvjXUt7rVd6xbQ32rW33H8tYDENfAp95Qp5zIpTDuJj5+/AE3eEqDgiCynl5fmJcFYw37cZAJnXNY6+QFs6+oQwhckGY4hshziNDeTHreaO7v7vDO8cc//szHDx8YvePd8Yi3lhQCcV1JKfHly1fOy8owjPz4/iPWWkGD5YxWMgm1xmCUxmhLoRGJzKWSUuG0hKv8IeRCU4phfy8oP+cZLytFG7Ae7cdrw42WQ0FVUDYLoZJ1+ZqK6FW/vpJCZBwcKa+UHDkcdtT6M4/3dwzeMo2+B8AkqFVS6nQRfbIxaByy5uabvrl3GBschDeNcmuN0kTOorTCOsf+oPlv/tt/x89/+jt+/e0z03HP+Tzzz3/+hb/89Ve5H16fiSmj1Vv6nd8fmKYJoxWny8yyLhwPe/xwB8ZQmiJWqDkRzzOlFp6eXvn89VmasSRhKarLOLRSGHvH3g8Yayi1EGMkxsDlcqbWyuvzC+fXk+i2nUUbzaQadnQ01ViWmdwKShu0X0FpTqcXzqdXlNb88e/+xOO794zTxOPje5y1vDw98VIqSRtCiNTWyMvK5bJSamUYG8OgKDXx6fNTRzuKNry1xrysrCGgteDulNZ8/vLMX3/5VfTaPXkxZ8Et1irSH2slTr32Q0Pq94dgFldUa0zjwP1hz+5wYA0rayrUkpnXxBwS+1yxbmCc9lhTqd1g2UT0fJWBwDfnqdaoqdJKI+cszXWtsnlJlZIqOcpbohBVpiqNKkAs1FavmvucCmGNaKVY15XzYBlGz4f3d0yjxTnH6HdYo7gbHZM3DFZzv3M4oxmsRhvRepeSoDRajpADWinGYWA/jGi93V8GXXak5aEHMCViyGwTfzrJpJmeLlrKm1bsVre61XepW0N9q1t9xzJaQ5MwhxhkXV9bo9JQSjGOI8M4ypR34yv3BD8hAlhhNjuHc9IU6v6iV7LwdVWDklOfeiNEBsAZj3UO72UqvNtNjN6z3+/w1hK07sYkeppj7YlqE857fK2UWq6TcmuMTOtSR+A1rhPqVKpMF2shlfI2RTcWbS3KyNRMG4v129SyN7X694a8rWoVg1eIiVOrhGB4fT3z8nqiNUGi7ack8hAn0o+qFVUraT5BJDICAr+uuzduWuud9Za4uFXrGurrdFXJY2Gt4XjYM06NmBPv3j3gvOPp+ZVxGKAFck6ENWCNBddNjgqMkRV/zplaNjOpKFdro5vnKiElYTbHKCE9pevUS+26aS3x67TrfVy6rIRWqU0m9PM8cz6fMcYw7Xc4Jei5zWRXakHljNINvRFhSqa1gkYzDAPH4xHvB8ZhwBjTyRTf6I4382mt32ikGzkV5svCGoI8rnozmV5YlhVrHcc7afxCjMzLQimVAYVFti3bY7A9D7amvHyjw25NDLQxJQn9UfJ8UVqL2bf2xMZSZduhN/Mj0PKbTv56Hbx9z+19dcPlXXX1fEP86NKg2j9XyVvtxj8JNHq7vaU0yW8SEwRKqy4vkdtlncXqnno6WLzVOG9xRmG0pFKq/vjVVuV536rgMb3DaEEAWiNTfWdFFkKDnCqpYyHFVvBGMxEmtXzObUJ9q1t9v7o11Le61Xcs20c+hUZqYv7RwnHDa4WlYWnM68zz+URtDavh/riXyWNJlEpf33ph255nUl/9j16Y0ksWLafR0gxZo7FaydSzVb5+/kReFwbneD3s8dZSvpElKGO5e3yH9wMYS0ULxaETOXQUznNcA5fTWfB5ayCGTSO6JcYZkoJWFev5AnPkssz87bdPXJblSl5QSjHuJmnYdiM/uo/UWolrYF1Xaimsi2iH0YrcGpTK15cz//yXTxz2Z6yxPD2deDju+cPHR7x3TJNnHNzvcGjVWWkUVV99ayON50YfqY0myhlJVmwSoT33gBqlxcxXGwy24So83N/xx59/5DIvtFxxnSlMzTzrhtYWYyxKGUrNXJYL1hh244AyhlAqL5cFYxSn+YIx4Jxjv99hvcMPgWGaRJpxnok5471nt9tjraUqzcu8UGth/W0h58Rhv+f9+0ectTz+8CPvf/qDbDesRmmNdQY3Otlw9EOOMZZhN6GN4Wf7M/eP7zDG8OGHn7i7vyeEyNPXL8QU+fLbJz799ttVelJrRaG5P9zRmiKVbtZLifkyM6+ryA+skaYu1+4FgMsS0DrT0BzvHq6PxSbAuFIxqkhdqpJ0Q9Uglyz+AK0oTQ4hSmteLzNozZoyftrRaiGVytPrK4NXrJ2jjqn0m0RtlVLzdVtx3VqANK619o/5huiilMiItLDe5QmiMdqhlCbXRsntirCsm4l0I8BUIf0oNPv9gfv7I1ZXnKlYo5n2O/a7AWcUg5fn8egMkzfQCmm+UGIgV3kcVAOlo4TdaEkrtcZScrn+vmmtyd+VxrBRAcWtq0HMipVb3epW37FuDfWtbvUdy/U2obSKabU3r/LC6pTCKbBUwnzm6fNvKK15+PCe3X4n7N7XFzGhmQP7aSDFyDmtLJcZ7zzTuIfWCJeZHDPKWQbrGAZPy4mSVmqKfPot8PT5E85aDqOYErUW3bF1jg8ffuL+7k7IGNpSUIRcv9HBisb5dDrz6bdPxJT7tFcmwNZKM1FpZKC0xvn1LLSKeeGvv/zKZVl6MyKTxA/eMe4mRufZT++xRvPy8sLLk8gFNr2solGQ5urz04kYE7tpJOfCw92Bnz68w2vNbhxoeYeuYrDaqH4uW1TLNG1Ey61kgn01IPbGCa4gB0JMvJ4XcqnsDgd20yRa6Aat9am6VoQQ8VqzHzzPLy+cTy/UEkBZUI6Gku3EEvGumwKNYy2VfJ6BRk4LtUTu7u74+92BwY/4MTHuEjFG6nlmTQk7DIyHI9451lWMrWsI/O1vf+N0PvPHn39iOh45uIGPP/2Bjx9/oNEo3exZW6E00Ttv03frPNNuh/OeDx9/YLc/oI1hGEas8/z22yf+8R/+gZeXF3775Vd+/dvfoIF3HmMMx8ORd+9/xBrLl6evXE5nobmcZ+ZlQRsjWvlutm1ocmmkeaUhHoP7h3ciCZlnQgx9iC6PSalFJA5AjJFSSp+Oy3WUOhavAi/nM7kWWskMuz2KRiyFL8/PDF6zhEDKBU2jGWiKHkMuUohNngIywRXZT7keArfngfCru1ypLz2U0jIdV4YcMyVlWhN5SG1dz9+f97UbgEFzPNzx7vGRViO1rFij2B0OHO/2WAWDAaMVu1GSFGvJvJZGSjJ1zyELSQYNTUyLrYGzopOXn0X0+SWL2deqjWzSMXxcvcu3utWtvmPdGupb3eo7ltOahmDenLWCPOsx486aa5Rx6wxpaTnoEy0xLAHdUPT2qreh4rZ/t8ZiraTHWWNlUqXL28RtW1l/s75WKIyxGG2vK+naMqUIPm5eFpnAQm80lBjKQiSmJKa+KpKBcdQYKyvspjQokSQoY65NldvMhwpp5rXuWmeDcxZrNIP3YqTUBu+jhNS0KolubAziQjASbGG15jKNXC4L1MrgbZ9Qg1Ei+aimUIo0GtVU3lLvKhvjeZs+piJs8NwbN5EIqL5mF4mBGDgjrRUUFWs14+AYB89+N3DYj5SqKVUjKGqZVqqeDNnfdX1sxLjqJJBG696cOcaOtfN+wLmINiLbyFVMdq03gMZarHMYK2/aCi0m95+vdGmstnKNgEx5c6loI+mBuZtJU0rozhs3KbOua9cPixzIe09rXHW6SmnhcVfR/2/SDyHRyGOsjRF5Sxbtc2Njskv+kFGmR3P3rcG3uoPG7/++lfr9JFmu30LOpWuihf1SkQ1E/Zf6YLVxX9T1778DwWzomO1bqH/Rb37bgKou+aitI+kQWY4CjUE1hTFyncvNrtefVQyL/Rrvh9acCzFleZ40CWeKRhOMppYiFL9v5EJXeUlrqP41ter3dd2oJd3EjDC6KbWfH5Q05Ldm+la3+u51a6hvdavvWI/HPQAxew7TCArs4DHWUVojrAvLPJNDxPeAFaNlDeuMYT9N1NYwWpHiSk6la6o93g2MfkQrjbpXTMMOoxSDFy1m1pCqoLh8R9B559jvdjhrmaYd+90BUCyx8PnLC5dl4cvXZ2JMhJQIKaK1Zn844IdBJtTPr0KUmBeWdWXwAx8//sA07TDW4bwHFJMfGBrsYkSPAyFEYowsYUVrxbjb4ZzHeccwCqHBGM1+N5FSYhxGzueZnBLLIgi6SmPpbN+//fqZr18ty2VGl8x+GvnT3/2EBow1DKPBWC2TziINIQVax+HlKkmLVUlzkmvl5XRmXlf8MHK4fxR5BdIsppz5+vUr8yz0jRhk8mta4uFuxNvGv//7P/LDuzvOc+D5ZRaTZsyEXHtD1Sg1Y6zHeY/Rmmm6Z/A96W8YacZyvH/g/uEdMUWM9Ywvr9RaOc1ibDXWYv3A6Dx/nCZqrTw+PnL37iPeO17nwMv5z0JacRZjNB8/fuCPf/cnjDWcL2fmdSHGyOv53A9I7droboeunDMhRNkofPzI+3fv5b5LmVoqYYn89ukzOReWdWFdV0prMokfBrS1aOeorfH09MplXnroSm+cu0FOiB2iH98OOJuXYNseWCfXVuubCxkN94Ob1oSUaWpB09BK3ur1gPe2VUCL0EH8CgZtbG+Kf9+kb7p+kWoUtoPRJgEp3zSitVRiTjQK2sjh6tqk9zelRK8d40pOiXUNfPn6TC4FZxWj12gDNT/z8vKKM5qdt1it5LlrFFqB02CVpjZNbl1Og6SS0mANUcybMff7VIhBwzBQSiPGRC0RrUXyIw15vd7ft7rVrb5P3RrqW93qO9ZuEMqHdwbvrEg9pgnjHGsIfHkR3m4t+WoM0p2Ja5RmcJ6GaDBLnxQqpWWybCzOOnkhnBTeDaKZ7HY3qqUajWoKZy3eGryTCbCzjv3uwP39I7lUzp+/cr4sPL+88pe//sqyruRuMLTW8lgbuylzuiyc55UQI6+vr5xOZ6ZpYjrco92A0xa70S2sQxuLy0I/SCkxLzPqbABw3osZy1qcs9cpPtMknN8oU+J1DTJRzZlWpLEtpcBrFh4zjePgOOxG7u8OvHu4wzmDsb7jhdu1YbDaoHuSYW1VNNNKCwawVuZ14XS+cNCa98PAMI6sIbCGQEqJ0+mV19fXbybcsi7fjRarBn54f89+9Dy/nK+TRm00OlVaE/Nja/W6HbDWsj8cJVbdyOOK0ozTxG7akVLisqxUFJd54XR+IuXMbr/HjcIjPg6DSHkOB6b9AWMMz8/PnE4njNFM04Rzlo/a8vDuA845lHVgLI0LS5BDQgiCs9uSCGuVsJpNt73b7dmN0rwvl4UYE0/5mdP5wrqsPZGwgFZY73DWyIaiR4g39UqIQgcpfQq+mQt/l+gIV1mH4PaE2mL7tPvK9q6Nbq8DFKkUEMk9zggVrrZvtdHqasi7Jksqaca3+t0Qu7VriqLqJlYxLnaz6mZohK6LzlQ03jic7Tp+o98m2H0ynQiUKgSQ82VGacU0OrTy6KIoMXBRBW80cfQ4o+WQQMNqzcNxYhocrWkKGpnEv02saynQjaIld9lUl2XRCiVHUioY83YgaP1n/X+6DbjVrW71/1XdGupb3eo71mC7ZCNXmpZGrqR0pRNsMda1726/DZ2onRcsL3ISQpKT0C3WJZB9hSrUB+EeZ1SfYElUdJaYYy0N9eCluZ/PC0qtxFBYlkSpja8vF87zyumyssRMSDINrihyg3kN5Cp0gePdHfta8cMgjZ1zDNMARpqOmJMYAGtDaZERrB3Pt66BGCMg0ee6UwbOZ3pYhcVb0dwO40BrQsjIOZKTgWppVSKxR2t6k2WZeyP49emFaRoZRsdDOzKMXlIVB4dpW+jdWxR6A+Zl4bSuQtcIkYailMYSVkqr0lCvQvBwVgJGFGA2vW1ftceUoBaW3cQ0DhhtCDHx9HrpeuzGGjOlNEIt5Bix1mJ0o1U5uJQ6iDxAGYy25FK6/GUgpkzTclxKpbKGeNXMJpOhS0WU0ry+njmfzhIT3hTeOV5ez3z6/BVjDJ++fOb55ZllXfj05YkQVlLKotmujVIypVSmEcadoilNKo0lJmopnJeVECKXNRJLJTcw3uOMAQXVyOHBOocbR1prHA8Hcio9CTGI3KEIIk90yOra2F2JL00eL6Nap18MnaEtBJRa6hX5VrKSJFElfGijgWkU5KQxXRYi8d8ypladPGO2bwXQmdP12kDzzVtDtOi1lo7Ra9TydijYDgClZNE2VXU91NVWxKhYBYRea2VeJOQoJyeBRlqhW0ZTGLzDGUdrwq1WrZHI1HrGGYVVMJomh0Qr9zO1kdal4xYzMcnj2arupoL+U7SKap0Wo5TkSv0Xupdb3epW/5q6NdS3utV3rIOXF+uoG0YJxut1XViSTH9TiuQeRtKKILBqKdRcZN2+ykTPN03DEkLm6enE6fWC9wO7cUEpTYmRkpJIKZzBaM1usNxN0uRMw8RuGiVa/PMXwhpEwKottcKSJO1vjZGX8yrmLafRVkNphNcTAA/39/z8x59xznX2sbxgx9xDPlolhp6E2GQ6HlPi9XyWUJOwMs9L1yXLqjyoxnx+RSvFw90d7x7u0Vpzd3fk7nhkni8oVUkxscUjG6WYnDB6aw58eTmhlaDuXk5n9ocd/+bf/JHjcc9uN4J2WAMmiRSgd8Q0Gp+/PvOP//xnGo3DwwPjbk/MhefXF7QxhDUQ1hWlFNM4cLffYa1h8kLMoGaohZILl3dHUsqczzNffzyxrpF/+Ke/8tdfPrGEyKdlJq2JS8zMi+ii1/UH7u7vcd5zPB6xzorprEgTZ63jcDySagVtyCRqTIQs5BJvI8ZozvPK63kB4Px65nKZcc7x8JgZxgHMJ5T2oBT//Nc/89un38glM68yXZbHjGtT2Frj7tg43L/DasuSCnMQPOPz0wvLsjBfVi4pUxrc7w4c7+9orRHSSq6ZcRzZHw6i9TaWw/5AiJGn5xdCCBI6kxfBHH6LjPwmxKR2ycJ+t+Pu7o4QAufzmZwzy7yQUpI2sBay0aiNN6MV7+8GpnHEDwOtI/2qMaJVN2IkNJ0Vf9W39wNv2zh523y51d4QZ3IO5Cwa/1r6Ia034TklSp+Ml28+t1aRjaDEkJhz5evXF17tiWkaOOx34p1oGVUr+/2EdTumUcvvhiJegvXyQooL94cd/+YP79mNDjvt2N3dU3JmWVYhmsTIuiy0WnF2EuxmETJKrhllFE2J3EXbzaR4q1vd6nvVraG+1a2+Y9n+GlWUmOQqXJPqyjcmrM0U1/p/rvHX/WNqaX1y2PokMUFTaGXQKHKShtpohard4GeAJiY0rSW+WSlNipk1RGpTlCZr4lg0qShClrS6XCu2aUyXR+SSrwxt7z3jMOCcvU4M6zxTkwROlG11Xys0Rcqi5YwpkXrQhUJMZKUUeYFH3pcm0XwCHTunsU6kLdt+epsOO+9wxpBqJvRkvGVdOZ0tDcWyRtwwYF2hFCF/CI6tfbOGb4QQOJ0lPtvvD3iE75tyRtdKzrJJMFoS5UQyY5gGj9YKSoLaf64mqXgaKKkyOMthN7AbHK1WrBamcCuZEAQrt3bNdq0NPwzUBs4laRS7GVTrLVWRbuqrUPvhoIEpmtKZyADLurKugdo53kobliXwerrQaDw/v/L0/CLSg5KpGxnl2sj2JMJu0txY2SUXUhKcYojpmorZUILhc14axyLUiW0KvEkOvPfiCeiUmW/Z4wq+oWx8KweRN61FHlRKeTO1qjfTophN5U8oV2mHtbZzwL8xOKpN2Nxvg3r7rr/joV//921KrWi/MzFegzY3+UfbmmuETtMlR9JQdziIFnOgaJxVf35GmVBXCZ2x1pFSxTmZuLfaqLmxhERYVryzPQVSZEvKWHS/tsXk2d4SHuFKRrn+RP2wgNpMi//vfpPd6la3+v+0bg31rW71HcvQg1NqoWZBXGkl1I+am7BkS6FSr56pViolZdFkZjFwRZUpLbGukRiFyAAFowtKQQqRHINMaZPGaAXFoWtk8J7H+3v2+z2l1I730hJXnTK5Ni5LZu0orliExrHfTdzdHWlU1nUh5YTTovHMCgmlORyEid0qq1aEKBNMOTQIbzeGyOV8JoR4baKVUsSQeo9SqTVdO6cYZOI6DiPWWlqteO9wznaSRJYGxAnVxDvD3X6CWklh5ZffvrK/LLhp4u6y8PBwJ9pW76homrKkHDldTsQU+fPffuOXT59l/T+OYC3jKPppZZREcO/3MvWfRrwVo5i30qTRk95LVlRvMKrC5FB1R9x5Sv6Ru8PEvETev39lXiJ//uuvhPXPwrs+n4gp4/3AmjLOe0I6SpqkUuQqqYEvp7PolUMQM6fzlFqY50U05XzTgHYCy5AbfopiYKtfOV3E3Pnbl088vTyjjcGPg9BMQPorBUaLsbXWxvPzC5fLzIahyCVzuczCC68wTBNyNzTOlzMpJ15enwlxxTvHOE2AYl1WwhpIOXM+X4gpCc2iN5rOD2IC/UbDrbuZUCnIMbJeZsHB1YZu4IxlGkaEjlOvTblCYY3h7rjnh48fef+wYxzHLrExGCWpn1SopcsejJgVtdJYbWlKpBtNCR/aOwnnOd7t+fjhEeMGHu5eeDothNzIAUk8bUVkILxhGFUn2yi1NbByECq5UpViaSs5SSqpqpKKGVPF+SfGcWQavWAhlQI9oEwhFc2X5zOXZcU7L1KkWlFmYJjAmIhRQhbybsTZAR0C2p4hvh0qtVIMg5iDb3WrW32/ujXUt7rVdyyDdDiq83FbFWKHs4ZcxcSVSu4vuJKALZKPTE2FmvuEumVSVoQgTUjKMoUzWj43hkhcF7SCYnpjniwqBaZxQAG73U7CX6yEUtSar1PG02VlXtNbelongtzf3dFaxahGiGB7Q11ojMcD7+7vCDERQkC1RiuVpVVaK5SUibEIM/l8Zl3DddKqte5ykR7ekSOtVWIInE8njDEc9nvGYcB7z3G/Q2tNCCuxVZkWO8HFjW7iMA60WvnzP/1nfvn0hekyYcaJ13kh5IobJkn8cx7jPPMc+Nuvn5mXC3/59Vd++e0LxlqmuzvsMNAUHJuYuaZpEtOg1l3XalBta+AaLUswTNWKljUZjdWOwcrUeBwsP3x4ZAmZDx/OzEuEVvnzX/7CshYulxPpdMEPI2suOD9I+E1H9m1mv5fThfNFzIPTTqGtp+TCy/ksjWoSIgcNxnFi9BO5wLBGKpqX05k1iLzjdD5zWWbGaeDxw3sGY67BHkopwRhaS6nw9PyKUgqjFUYpaqlcuonROc8w7VFak3LiNF8IYeXzl8/M86UnLMrLiuj8xTMQOn1CzKHSbG7Nd0qi0261glboKpbAFCOr0m/YtwbeWMygZAKcE7V23CGSGHh3OPDDx/c8HEemSfjrgpWUa5AmB1g6KUQmtQZM37Do2jnwklqoNRyPOz58eEA7x/1x5Lgz6NBYcyEV5Hqugu6rSsJflAJjtrH2to3aeNSQYmJhBdp14r3GjNKyEXn3+MAw7FEYlB5RphJz5cuz6Kn3047H+3uMVljjGSaLs75rsBveepzx8jiabsJUbxPqYXTsdrvfT+dvdatb/avq1lDf6lbfs+oW7d3XqhpUldVro+PYUsJ5MeOpLiswWqNUvSLftnjjGL81MgrCSyMvksPgJYbbaIyGwRmsMxhrKbUSYiTmJGzkrlfdIpuHwcuMrzXKpmelopqkrTmrUc3ijUbLOJYSAnERDWtNsR8YCqqvrKXpFF62Nf17bfWN+VI25T3KurNy5b4pBCUGxmAt2mhSFClE1ZqUJG7c9rAMWk81dGLMW0NEXRb8cGH/cmIcI8M4SOMaC0tILGsilyYR6UaMgBtBxXYKhzHmTaJAj4tGwjyuI115B6qnM6rWjV4NrFE4qynVsJs8Wmnujjse7+/wfqVeEmkVk1vKmaZ0P6REUIpccqdCpCtTuVSJMZeY7rfH0xgDiLzCOnulYuSciTmLEbbLEYyR5JtSCilmud3/Qse8MbhB9O4Nrkxq55y8edcZx/J4Fiv3m7X2Ks2QL6iB2nF0Gt1lD2qTWYgmo6d9epwTeYdsJBRUMdqxHVL7bTRaU6tMgq8jerU9NPLvRuke3d7FGaXrmk0hK402wlNX+krj+4b4sX0/+Z7WKLy3V+b5OHhyLWiEJ31VI6s3XPYbfm/DAG4yDM31ZnezotyPIk+KUUJnJMhnQdGIayDHRNGFljPZKOYlcplXnNGMSqRmQiXUctBtIrGqHUdoOqJSm54ouj3Wt376Vrf6bnVrqG91q+9YtUiioAYG78gNYoFcFbUuvL6eWNaF9x/ecXd4lBc661DGUupMWKM0V7kScyPlwrwEYi6AwuiINYbDfsdufJRplXdYozGqYRDt77Is/PVvf+sIuoQyCj957DjQgLt3hoZmXRfR1uaMJVHnV4zRvBsddj+iG+gUUClyCivnT79Sa2PJiVwqNWVUDOjWsEhTqZzhfn9gGjIhRtYQrii7Tf7h3CCEEmfxXqZq8yopgdZqTqcTWilqyVfEYFhG4WpPE7Qqk/9x5PHjj+RS+PXLK/nXr+w/PfPnX78yTSP/q//uv+XfNMs8n/nly4l5mYlFsbuT6PLD3T2Hwx2Hw57j8dgn5NI4KkRKkYt8L237Cl8bwAANZQ2681HIFbTgybwT3bB3R2oB6r/BasXreeb/+j/9E//4l0+0VpiXBRUiFUn5QynRLjfRescqqL81RmIW3bnSlmGwMMD+IFPWcZwYOl0j5sKaZlKOhCAJhXbwDPsdtVYuF2FbD4Nn7FNchTSinYcBSFJh7Lrvw+GA977roieR8CQJ/IlxoFVJs9y0yq01LpeFRYmuW5mePFgkqVAmo0IX8d7x/vEHrLEsy8x8vshhI0jTaIzBey8HQiXhQUVl0irkFDGdVuikGasUVimcMnhtUaUQlyRSqZhRVg5h5mDQzopnsMtbWimyMWoZRUGrwjRa3t3v0Urzhw+PhLXy6Wnm6eWJVPoGyiiaUhQlf1pr8N7JNiklchb8pbO2b4u6MZkGRTTYtcD5NKO0Zj4vfPn0JNdbldtidWWwFWsUBgsFRm95d9yxGzxOK0Yrh84UM0taKbngB99DlaSZlvCdfji81a1u9d3q1lDf6lbfs/o0ULGtWpU0pciqW0gHK7TGOHiMsWhrxeClNaXIBHsNmSVI+tkWy106uqtq8N5xPOxx1nAcB7zR0AqtRHlBzZnX11dyFhOg0gqjDFabHv4xoI3lfNYs85lIwVBoOaCwTHZkGkdKyuQl0PrENKaefqi1BKQUmV6rBqbpa0TzMDhBvFXB0G3TzNYqSkmaokzMLcY6ahHzWwwBrSHGII2diIOl2WuN7BJawa43gto6poNhWVbOX56Z54XLGjktkWma+PjjT7z7ELks8r5liWir8OPIMHiGYcL7gcEPDIO8WSN8cJqwq1s38G1s47aFhrS3CXXnFoJqaN0wRlb+ox8Azcf39ywh8ny68D//5ROSOSOEiKYKajW0LkHI21S6iJSgoqhdQ6+UxhuPsdv9J1uOcRzx40DJhfNlJsVEzonY46j9NDKMY2eDL+QsBkg/eOo3E2pNb6hbo/aQF+eEG77f7zDa9sOQwhi5xo1W7KZd50hznbaGWNCpoHST+6U1aTi3Rq5JHLzRA4f9nmEYMFrRUianRJxXUog027c5aksU1QKdvpoB5eu3KrIQjZhYjVIYFKpCqbJ5KRXIBZoS8159U0K8GYS3yXNFqYqzmml0xFSEfX7YcZkzBq5bGaOUPB+0XB/bNkgpJUhCetKpkSl+VZXSDx6tScJpa40QJHY9LIGzuqBUwxnQ/c/YG+qX3YXDNDINntEY+TmdRTmLRlHqlm5a+wZsM2XSm+r+ONx66lvd6rvVraG+1a2+YznXjT4NchUCRgiRc0iEuE3bBgn06FQCiZAWyUGrSlQj7W0d773HtoazltG7K3li6BxgZyUZr+ZGbUpW2yXLBKyv77VWgNA4WoHcpDkzZD487Gl1wlmDtzJFO46OaXQUo0hNOL3JarKXIJLmLGjDvK60i5gblfagHTGL8VI3YJRYcWl6fk+u6HcTuetjp92OaRyFo21Eh1pSouZ0VVnUnMkxsS4LRpsrOSVE4UmjLbE08mUhpsJff/mEto4YV15eXkkpsj+MHKcJZ32XKsg63PTV/bd03iscgjcpxHbDVadxYAw1p06dkMZN605/KInWFN5qHu+OaG14uDvycDwQcuV1yaSSyTESdGc6I4cvidbOXd4CQv9oNNMlOsZI+qIRfbnWGixyKLCWdYWYBcMYQiD3rxdT7DKidpUghBAoWXB0usuWnLO8fyfpkYf9jmnw1AolydT59XTidD5TSmFeV1Inw+Qs18O6LIRVthNbUmLr15LquMjNlHo+n2Uiv65X0+LVVGjMNTjF9Oh6ozX7acdgLa0mKBHXtzRUeRw2FGVNKzlc5BoulVwau/0OZxzsJpSSx2tr0K967n6EMkoaZm81d/uJd/eJy5wYnCZGiKrJofUq/lDdcKz7IUB3/rr6LwJtYFOtbM+KjXey/aM0/k13iE5TtKqIsTDPgVoqy27EGTFdNsRQ0VByn9ctlEY8G6ZPqje0361udavvV7eG+la3+o41dQICuciUsFQulzNfXk+EXPCupwk6ietWSjP4ATeMOCcUhZJbl4UqjDHsBwtavzXUWnPYH9jv9litGJzFaEVsjRgDpTTWZSXGtRvrZOpaSqZ1Ioeg0wq7aeLnn9+LfjUGSgo4Y3h3N7AbRnJKBNPxc0103Uob9LRDWcvXl1dKl3/4cYf1E2sQpF+gsRv3KCs/qzSKTagPy3qNnU4pY43h4f5eGmoF1oiyOi4LcVkoJRNXmayuK+jW+uocSmuCE0OjrGeNgcvLBa0VCfjLb59QCqxqaK34yRrev38nZA/vGTo9REx4IuYwG7JPKVoPztkYxd9qwI2xYgxNuod/ZJRqWCNmU0nFbOy8Y/jxA3fHlT/++IGvz2deLwvn5YmSImurhJxBqWt0du3bCZmQ98OXMTTPNZ1wt99dp/1aa1qTcJXWGkrDsi6UnDmfz6LX5g0jOBU5VNEU5/OZkjt5pRS0UvzpT3/kT3/3R6y1+B5nvswrL5czMUZ+++UXfvnlV1AK6xzaGGIuhCC67TVkQsxdAy56XqONSEw63Uaw3mLKNUZSQ7cp9OF4wFnBD5ZSoTW00RhtoDUmb6EVUpxZ52eckceP0rXGKZKiZjmfuTx/IafM6+uFy7zw8PjI5CbUI9jB4EcJzKmlUnK+Tp6bohNeFJO3/PDuHqsHYigcRkOKopGOVVjTknEoDbjtG4eiDVWLn2CLVYc3VOHbO6CvQq7/Lp8jH6eAWjUFxbwkvj6fmQbP3g+oCloZHu8d2mhaW8h5C4ySP53W6D41rzRSSd//F+CtbvVfcd0a6lvd6juWNiIV0KpeWbXSEJQ+mdNIuJy6rplb62PQLTa5T5S2saw0TOZqltuIBd/GNYsEtF3fSv+eavsyGozITDu5TiBfzih2o2P0nqQrSWWssQxW461CNwNO0GadyCvx0t5CR9jZrse0RneqgsYZTTGid9VWpvFbQy3TMkWtbz+v6utw5xxKSVIe3VC1rfh116du3ATVunigN7goLT9fE1KGqop5XqUJM5ppEK15rZsBT762mNi+mU6rtzmh6m4ztTHmGlfT14Ynvn50N8h9C05oVdL9lHF4axmcYxoEiRZSvjbqrVZa11CL7kJ/Y+D8ttTbu77559YlIhu14S15UG7TNu0Gucy2aWmrTZqrJA2oEGpEM05DJvjG9Ou4UMvWqEZSCKQYuumwx7tvGuQ+6d2MtLVIEqdWSuQavEk/BJsXKUWaZdeNlqpP4SugypuUajPT6X4x1+tzoj8e/X5rvZHcDiY5RsK6slwWpmEix0xJBWMVNNMfQrlPfgfE7s2sVoJOHL3DOyvphUaMqFeWR2tdQ7L9/V88fNs1y1vDvMWbXzcj/VrsM+0rfm8zE2qlaE1dOfWSQCnBQPKjqy4h2ZYqV6ckb87Jm9bjVrf63nVrqG91q+9YtXdZhUpp0gSM48hDhSUmYjmTeoTyGhImN1I9Y+bI6/lCSqVPlDZ4QZ9YbRIDZTqCLnFmlklak/V0LZlSEjR5cZU4a4M14KxinEYmv5EypGndTSMfHu9wzlLzQM07FAqnDVo11GhRxxFQ5NqjvIHYG+T9YLk/jKQs5rlWIk417g979ruJJSQuyyI/i7UobfoEV9bhYsrskeRakVIip0hYLtSSe+iFmBLv9juRpTjfpSFaONNo1pj47emZeQ3Y4nDDIJrUlCmnmWkc2O/2DKNHa0NJmZYy3hh248g4eJG7GIXRYLS0b2+HnYbq93MrBTrhJKdAq5kSUke7CQ/ZasuaA/P5hXUJDFNl2nt0a3x4uOff/elndp+f+O3TV3JY31KrtcaNQw9M6fr5JumJ1liREuXCuizEEJgvl2szy3YwsVZMgzGKRnsjsCihTBhnO/Yu8/nLF7l2kiDorNaMXrjll/nM50+/Qmusy4WUIilElstypXHcH3e0BqlUSo5YZfC7naDu6kyOWQgoSmKvnZbtjLp2j3KYCN24KgdGI9uFnLBGDnM5ZWiN3bRjN01ySEiBVjK1xK6d1kLr6NporSxGOVTTlFjJoZLmTLpE0hCJ55XoVzSDmDyRQJVaJYinBvEOpCyoRFUag5FE0uPkeTyKObbNiXWRw0pulVLF0CmBM+rKYn87rb0dJOGt8VdK4aztWmt91T7vpoHBWbRqsmVRMHnD6A3eGmpRhLWwusTlEnDOkHJDGScR5kqOL7KMkGbdOIe1m/30Vre61feoW0N9q1t9x9rS+GrbGmoxHx6VRemV18vSsXgSsqJypaVKU4HzZRFyhniifi80lnZaUF9KkVK5yjdKitRSukZSPsHSRLuppUl0Fo77gXd3e5zR7JzGG83gLfeHSQxU/RvXInzokgvWWcbxgFJGqCNFNM/nINSJ3WA57kZSLixBeMNWa+4OEw1Ne37l5eWVWhuWEeNkKW6sxJQPw8AwjbLOTjJFXZaFly9fyTkxWsVgNaP3HB7uOex3eO/ZTTuM1jRtQBkuy8rrshJywbqK9b7fx5UlrIAYGN0wopUR7ncpOG2YvGdwFmc0Vnc+uGp9WijTUloV/nQT9jY504o00rUkapLwEdWnut56IonlsnA6XThUi/dHVFO8uztSEbb13ltm3SiqkZHJ/TQM+HHs6DwxgXo34L2kVL48vRDXIPi7fg1s8oENb/ftBkOuHpkOa9P/3RhJjDyd+mFBft7BO5wVo+Eyz3z98olSMk9fPjNfzhJC1Gkjh+Mdd8cjuVRezzM5ZZy3TNNEA9YlIrNome42pEl0veGX42cjt0aM8ZqIaDqPO8Qkh6ZSuxxFJu/D4KH2azRFNAWDsKhpXYTeU0WNtrA11LGQ10yeE2mMpEskDtKAsiUO9mTNkitpjUL9qBqqmBu9MUwODqPjYT/QambODbNmmYa3TjOpbxuB35X5fVrklrIoJ045jJnOhPfO4azh8f7IbjeiqvDtoeG0mBSNgloVMRSCyyxLJGdDK0KDEYSl6kqSSmuZpiSV9Bbscqtbfd+6NdS3utV3rJhFl5ir6IMbMnXciAhbo9P6pBHVaAqaauRcrtMqbQxOCTNad/1la03SFJWi1EzcUhiNwXlDq0Um1DSUksw2rQy73cg4OJl0eSdcXacZjGJwBmc1VvfJmSRckxGjVatFiBAUUqqE1Mi1kpPEe9eubaU1ck6ENaGMxXor5qe++i+toWtF1dI5yJHcJ/ibBMFcdeOaaTdRq2c0msEqaS686xpafV1/Q1+tK3DeSTR6a5gYoUjMukhDhOkdjCGOhhQ9yaWOhgtoVcnZorqpa8tlFuKDuhrdRGOcxVzXG6eNE/6tHPZqOO3BIqUUzucztUlzPjrLNAwc9zvhhTdNqCKREXOdrO0Vb1rb1mOlt8nmdf3/TfMsSELX9dQ96v4qPWhXachGEZGfgzfJi9pkByIP0kajlGG/3+Gc7mg5mabu9wd2+z2lNIz1xJhpdFNsbddGvz9I8kftGuWehrhJaTb9t95oFLxJITYdsNqMmikLWcMYjPJQE/SGO8fEMi9MztBq6ymIhsEPctjRYj1tRcyQYQkMOyfXsfpWzyzXttBV6JKQN9OiAobBM8WMdW+mWY3QPjb5yO9KKbn/1L94/zdVWxUqSSlUo8lFpt0iwWno3lBXDUU3rAKTFcUIL/syD33K3TcSGhpaoDTUTtmRjYLqaZu3utWtvk/dGupb3eo71vP5FYDSNLkpCsKkHYwmlYKzllLEZDUvgdY/tqKYl9AReU0Mc7s9G1e49ITBy0VoEmG+EJeV/X7i7//0dxwPB87nV16eZ1ndUzCqcjyM/OmPP/Pu4YCh4BDd7s6C1+CsZjfIRLIViWUuVGLLUCIpZ8ISqQ0uS+SyRhqaqhxNaWLIMsXLhcvria/PJ5wfOD4onB+63jZQaqOiMbWxxMjz6ZWYs4SrWDGq3R3umIaRcZr4+P6daLE1OK3QNJkeq3ZNvlNKkWolFzmYHO+O+GnCns7EWkmpQBQsXamNp6dnzq8aVe7Y2UbLiacvX5gs7HYjltQZ1Bpnjdz3UQ4OIiyhUx9ELlNLFh1xSrRaukSna+IbaG2Z9ntQhpeXM3/+y6+AYv/wA4/He3JK/Pt/+3d8fHzgdYm8zFEQecbStCFuZrdaKURCv27eNOfmOs3dkH9K9aZUbeEgFzkI9JjuWjIhxa5lf5MaGGtxPeVwa3adM0yTBK788eePXXYgMd3y/R3aOGptrKGQc+W3T5/5h3/8zyxrIKYo9wuwNckpFlIMKCWmStFng/cDsEmd3hpOmfZWSpaDW1gDszrjnOXxuGcaPGE+M7+stFR4fXrhF6dp6yP173/Gast+2qPffSCGwPI0c24n+dgvz+Q1ginsHia0lYbXKE2u8r1ySjjjxSdQKikE4hKxSvHh3SPjtONrqOjnGd2QeHNlRLdd6lUnjuqader1cNPfjVEd04gwqxUdtZcTWiniumC1IA1N/xynapdtweTExHuaRtblgnOW3W68EnOsE315NwAIG7s1XPomeOlWt7rVv7puDfWtbvUdKySZUDdlaMrK9FVrrDLXCbXWmtIQHS9KdJeNK29605IOwyDr5xZ6Y9FIWWKal3lhuVxkWmsswziyrPPVjAgZlEywj4c9D/f3kFfIK5rKYBreCMHAGcF8ibERcVnxJv9IOVMKrMvKPAdQBuVG0E4meFU+McXIMi/UCvtcaFYQaaW/UQpoYQyvIUjzoITjbJ1jGicG7zHWcry7Y3AWq0TvTavUtAqWzvQAGfrUvmPWvHcoa1liErZ1U5gi7OHaGusaSArWxct00mrCsrLMM0Y3Uhy61KOHtdQmpJYk1AvbJ6qqp81thsOStzQ/uE5XuzzBWUfxlZwLL8/PoDS743sG59iPI493RzkcmIVcRaeeUJQGGSVSjC4zyXVD6LXfTaS11gzDwDRNv9Mm5yzbiutEG5kQ55Qo334NNkayQXd5AFd5iGEYHI+PIrcx2uCN75po0Zi3BjGKQW5eFmqrHfdXfj+lVepq0N1ud9NCNDHmbQuzPQfemv43s2DJhZSk0XTWMg4jLUUWBC8X18jlfGHdjdTa0GicdTBOEvZiHRrhp4d1RQFpPQjCr5scVZ8wbzpxgxWjaBP9fEkZBUzjQEV3I60MuHWPHm/d+CfmYq5mxHq9P8QYoRrXaPDWHx8Ald9kODnFKx/cKnmskqpYVUXy4cCJ9kPkXc5Ko25Ei17ZNjpcG2qU+ua23OpWt/oedWuob3Wr71md65tKJeRVGpNB0hCHceDx8YGQMpc1cl4Ctb2xcVNnDrcqJrTdtKN09Jq03sKR1cBuv8d7zzQOLOvK08sLl8ulm6EK3mu8tWitiGFlnS84XfG6h2MYULoblfocTf4UravWBm2soL+0pTZI1VKapylN046GobaCKxoo3B3uqc2hesR1ytKkDONIqQ16IqQbGofD4Q3j1gSnJjzphNGB59eThIkMjp0X8ofzErUuTBGRFpzmE6/nM6lUXtdMLJVcG9ZqtHEYaxhKo+ZEXi6kkkkxEkPEG826rKyXFacVaQ0YGroZSpMJdYlRwm1aJZSKojEMjsE5Si3kkiQ0pEtzlFYY67Femq1hmkAb9oc9d3d3Iq/QihIDNSdMq1hAlwIxdvOgATSexs45SmvEUoldXuOcwzgnhtOevOedsMzlgCF6Xuscx7ujaLFDkI1ANaA1pTV8l8gYrUVDbg2Dtxz3E84ZPry/5927e5yzkqjoHa001hhprZHLRploLEvqOvrAbn/AOI+2Hu9Dl5e86bxFhyNTcb1pijuiI6csiZEbgaQbdLXqOA2UUC1SZrksqFJJ6wKloluDUqgxUbNw0I3Wop0fJ6ISs62StRA5JJLS1CLposYY4bgXaWxTTMQ1okeLM72x789PkX6IF0IBVve8zFrJ7e02i8qj9ea1fUNfeSNtbAcTIZf0qXE/4ArxQ/7NWcthGrDGsBsEp6loWCRJ0ehGpZJyvB5sJMRJrktppuU2TNPEMA4b/+NWt7rVd6hbQ32rW33HasbSgBAXXi8SI3zwE95Zds5hdwdKhV8+f+EUPlOyTLVjKsSYRb7QFIMfuDvek3JinmdC68gxieBjmiastdAap3nmdD6T4kJcF7QCM05M04A1inU+c9KV42TZ7z1GK6xpGL0F/gkSr3ZPF70JMVVhcHg10poGnTEu9+ZapqioTKkOZyvq/cTxrhBS5nmeCTGB1oz7vTRViLRltBYzDMKkTlkS3RqU2pjXQMpyiLDW8O7+gL4/4KxhGkcGZ6k5U1IgpcLXl6/89Ze/EWLmy2klpMLdwwMffvxRaBdN7GrrfOHz+Zm4rqzLwDqvGBqX1wtn59CtEO8GTMvoYjDFymFnWYU8kjMhSMLlfr+n7iZaE9xbLlkSC60QKswwYMcdmMTu2HA+EkJhWRIlVznkrAs1BGxteMCWhFrnPrH0QnMxBjuOVOB1XuX7K80wThIE5BzDMKK0vuqVZaqaKKXgnGN/2NFonE4n5nmm9oa8tcbxeOD+4R6jNd6K7GCaPO8ejwze8XB/4PHhcCVOaK1Yl8B5mUUKFDIxZFIunE4XQhQD5d3jA602pv3CukZKLvJnKcKZ7s+V+m031wN/lrqQYrwaA0vZDpLmSrwpqZBK5fTySrgYdE3oUtA0SVkMkRpTn+hqjJOgm2gd3nohgZRKWleohZZFimWtoVZNLSL9CEtgXRascoxOEDetv9Xc30pvqK2R29tvm9IWY7z8Tiily2425F+fXveGunZcpkahtgNGb8Il6V4IOH4ceXx8ZBw87+8PvH84AIUSztQcWJYLp9cnUpKwoPM89+2PHLrkfha9+v097LlJPm51q+9Zt4b6Vrf6jtX4PReaq/O/guqaV6O69lUj6YVCF4COyevBHv0LvhnSvlnRbjSEVisptSvzd/uIjbMM6hsmsJapVXubmm2a37Y50ei3qU+q5fM3aYVMI2uD0geNpTZyzjKBbjKl1Vomd5tZ73rftMamKt0MdVpLilzt0oTNLBeSTH6lOZAJcO1r8y5R5tvxmtzntafstauW2CiN4k1rDPTblsnJkJNEvZfs5PaWQi1CTmjdiNhq6Xi2fDUiipmv0vrEb3v0Gm98a901zrWn/Wmle0iMMLWN1nhnKdnhjcVpjaqtQyoES/jto6Ja18D+TpV8VRT0a6ReH+9mZeq7JToaY0SH28Xg4zgyDgPGdFygUnjv+5sVI6jbiBwyLc6lEFIkJQltiSmTUmGNkRBi32w4mtquUWnknJOGXH4O+Xql1jfZwSZL6c+ZTeoiDGj1hufuDbmSB1JwdlSclpRE25niGmmaaxHZ01uKIV1b8Xu9tt6IKK1Ln/r1K8ZN5LteZVHtqu2+mlGvP0YPZbpKp//lDFht/0D30l6vm+3LbJ/RvvmUqzxnY1GbTkNBoaylUq6pkq3fZxvHvNS3r96QSX7u0//fPYludatb/avq1lDf6lbfsVKX0lZtMX6koZjXxJxf0cZhx73oT5XCDwNogw6ZRkZrwzhOgCanzPPLEyklzucz8zL/TjcLV9KXTCutpWgwSAOxRZtvL6i5VJY1olrCKBgsnU/t2E/jVW+ptKapQqIQamUNkdPpTE6F0yVwvgRQGuNHtDa8ni58+fpMqU2SEoeJEBOn11dCSiypcIlJNOI0SkNCapzocFOPKZf1tqGhiKmwLEsf5BVKy3hnSHknvGijmbzDOs/7D+/x40CImfvXCyEmrB9wVtbtwvK1tMFzOOzxPSnu5fVCDJHn+x3earSqLJc9ulVUtRikaa4pdjxhlqZEvTUnSimc9/0gAClntJb3e+fRGLIvaCQ0ZLnMtNp4/+7I8fDA/S5zPxyJMXHnJlxspFwIVWLr11J4XRZSrQypsG9QSiWeL4QGwQgKkI3yoYV5vKxLn5pr3FlkP8ZZdrsJ7z13d/c457vkw1/vZ9Uq3tsrZWTrBXPOnE6vhDVwvsx8/vwsCY69tc258HqaiTFdw0bkaCn/brTmsBskKj5nSozU0lhTIMd0TUJsrVFjxsQkzXRtnfwCtjfVOz+w8x6tGo6KaZXd4Hi3P+KM5v4wcLdz3I8T4TTz9NsXBmvZeydkmSSHok1yYrtUxiiDbpoUC+sSWOfIMkfWNXLca/ywB10o7USMlRAy8xpZQiQE2TCl7VDckR9y6FJv7wM2rb3Wugce9aa+N+KpIwnNFrOuQCmD0ppcKqfTmdVqWgnEMGM1jB6cATeMfPzxRyHu9MNA7YeDCpSSSTnRlKY0Rbolj9/qVt+1bg31rW71HSv3CVdTBm1F1rAm0WJaP7AzHm2sMGe9o6Ku61ilDd5IqEYpmfPpRMqJZZkJIVyNXKo7z1pTQsIYXH/xrZhWkFS1LflNJsylNkKUCaxWkJyYEYcB/DB1+LLpjXghE4hNcV4Tn55eCCHx/DrzelrQxrDbHXHO8/XrM3/95RdKbdw/vGN/vCOmzHy5SEMdc2+oG6k1cgNjHePY0MZKwts2KTPSeKRSmOeZVqtIa3XDO4uiMEXPYRqZBo+xhvuHBw7HIzFlpsOZEJPEX3eEm9UaYw3eW3bTKHjAkrjMMzk7TueZ3eAYvCaEIOl3quJ1b/By6ri8gqL2A01vqpWSsBUlXPCYEroCSosEBC0hJk3RKoRlhQaD9Twe76il8W66F4LFWli/nggpMYdEyIXzGphDpOSMa4oR0eYvayDmQlNaIq21wliHcZZcMss6k0uWibDWGKt5eHxg3O/Y7/f89NNP7HY7NmOcIOIitaSedikT9G3yXUrh9fXE6XTidL7w229PxJRxzmOdI+fK6SINdU6ZsEYAxmHAO884DEzjkcF70rqy1kShEUqiReGyp5hEM10aOr+lBkqgd4+DB3Zq4N5bmWCXCLVytJaPxyODcxx3lv1oObiBOK+cvr5SRo/ZTdLMpzejpDEScmO0RSPT3pIqYRX8YwiRsCZaUzg/UlumNU3KlZgKIUTWNYlUK2/XsX5bLtU3WYfuW4xvkYe2N9Rv2MW3iHWsQfcgFpTuvxMql3kWI2KJpLjgneHd/Q49OsbBc3/cobUixCBs71oJMYmULAkVpyHMl1zfFmG3utWt/vV1a6hvdavvWLlPfSri9G9NiVmJKlrTy4xSmnmNpCTT2dpRAEor0YoqkWnkGLqcQmgZaC08XsUVr5eNkQme0cJHLhWtGrWKwUom04LiMipjOjYvOlnz74piHCUWWri0ks73clm4XBZezzNP5wsxJpaUKZ2PHEomN0i1oLQWOoZWHeHcRKetFd4ZJq2prRFKJdWGcz2YxVpirsQiTU6uIiVRKJkqK7kzc6lA5nyZiVvcdcnXkBBrrWhbs4Td6CpsblnFVwlxyVsMtqzq6RzeWAox97ckQSml6j5Z7KYxOSGxITS00hgjUgjVG2rx0UV5rEuh5NLlBpuspetiS2U5X3g1TxIWUjStNlTKTNqItt0pRtOwTZEnaa4vuTCnQlQQELJGQZjgNIXSBaoYVp21aCPNvvMiA9hNE+M44pyndQqH6sQI6KEv1mL0mzQi5cwyL6ScZAobE7WCHwa0tTI5VfrtgIHEYw+DQwG7cZDvaSyaCjVjNewGSzGKNljRqpdKZov8ViIJ6TKo1kTG4a3FKMVxN3E3TbKFaROqVY67ifd72T4MTjFohUdBLOQ1EmtjqVByvk7RG2Ccx/tBkjO7hmmZA+fTzLpGlLJYO1CqYlkTIWRCfLtWYpL/L33iTZdNyR9vIpMGtB4l/zvySZOOdpMnNbWFjYvOebveSi3yXtWEUa3ApUwwXYrTv7/SGmXe5EbaiAHVAaaKjvptKK2kyb7VrW713erWUN/qVt+xQsfM1qbIWKpqbBTgdUk8//Ys9AttaNpKU1zbdTrsvUehOF8unOZLT/tLlFpRtUFvMpdFkvKMMeynCWcF9WYpGA2+s53ntfDp6xlnNZRIKwEFjN7gjOH+/g78HeNoiTESkmhh//bLJ15PZ15PM3/79SspF6bdgXHai3xhXQQrlxNmcFgFzmmMblgDo9MYZZms48E64VjHzJoyw7jj4d1HrPMsMbEE4V2/vJ5Z1oBWmnGYZLqnFGtMUAtPX2dqSYxGCAfOWv7w44/88P6DGAfnhRQi1nkOo6T1zUtkiSspRWIUEkWJmRwTsVZOa2RcA251nC4L0HDGcJhEubxh4UTAINNgawcGP/Xpr0NpQy0XzmWmtkIKkbgu0ESXrK0TyUIulJD47Z/+zNf2C8449n6HVQZ1XvhgPc04GHuc+i7zh+lAzJlPpxOfTmfW3qadW+uNogT99OxtaT73O5TRTOPI/nDAWsNuv2ccR1AQozTH3olOWmvF0KUenZ9Ca43zaeHl5ZWcMk8vryzrgjGOx8f38riEIJHhSEOoVSegeCGQ3B8OHHY7ai2kZaXGwOQd+/0OWmW2hXVQUCo1JKiN0XrGzTgYC61URu+5PxzFmDoMTKPHas00OAk1sprJSROfc6DkgMVQXxfWNRON4my0hOu8zMRU8KNmtz9wOB6wbiCGQi6ZT7898cuvf4MGRk+YcUdKis+fXwkx83JaOM2J1znyclm59G2CyG5At57YKMp1aam16OprK+RUxMdAoTV5LE0Pz4HNQ0GXgMhbSIm1FoxSOPlylJqISbMbBx4fD2AsylqME2b21U2hFFNnTMaUWUOfWqfEvKz/f/3deKtb/S+9bg31rW71HSvXN+d+U93w1xe/uVQu8yJoODdgB3U1MW0TJmPkRbh2bNdmfOK6PJbPSd1MZ400xrVarBYsFm0zEipybSwhkZKi5kBNK4pG9E60sn5kjRVlYImFZY2sIfI6S0z6y2Xm+TLLlNhPeC0T1VwlzKW1ium6ZG1Ujz+XJqG1Jiv1YRADY280hsEzjSNuGFE6SLOqDVrPV0OVSE9Aqc3gWFmWlRRXglakRaaWj3f3YsYr3YiXs2DStHCSae2bCXUPCalNjI5ayYT6myl1SttGgDd02TZn7FNHYYkbtDZY4+Rx67Kd1qfQEs+tsUqYwBvvmVJZ5pkaCoMbMFPDGQspM/bGx/SvOWqDQYmuOgTmzjAflSKhoFXipr/tATBaa5y1GGcZx5H9bocxhnEcGYaBUsXwWWsVCobWqKZR2J7IWa8G2JQSIazkPtlNqaCNlwm1Nj0aPYlRrg9UjdWSxmktu2lgvxvJKVHXhVozVlumQSQbDA5bLC1Leh+1sXOevZukoTaZlgu7ceTdcY+zjnGQN2sMh92IdxaNMMKhsSyVULM0tanI81FB0yKtSCldzXjGOpz3KG3IRYKAZEK94KxlGuW+q1WxrpE1ZkIqpFxJuRL6lLp0DCD9+UnfsqhtSq2E0kHVbJCPNwviNx/btxkgBtONx102U7GS3xNaKUySrYK1gkBs/QtfTYvdhLoxvpVopyQFtTfUOec34+OtbnWrf3XdGupb3eo7VkgZoOuW5SWzNA3agjLy/tJoqlBVFIOfEU610aav4EH3qHKlFarKy6+1DucHAE6nEzlLamKMUVLVvMWODu8s98c7Hu8OQqhIgi4rCVLs2tRaibphL4mvLytTFPlAqZrcHMPunoMZKXbHXRLz4LQ/YP2INZr94zuRVfQmlkYnLWhyLnjnZBqMJqOvwS4lR+KqeX19lvAVlCD5mjSE1MowDBzvjlhrcF5jnYSohPmRnCJOg1cKZzTv371jHCaccbRcSWNCa4s2htpg9J7WFNEYYpHmr+RMqhVVapeciL78cgmo2rBKoUvFWM00ObwbhW4RA6015vNCyeCc4+7+AT9YrPHsxr0E4cTM09dnCUGxg1A9tOX9ux9Yp5Xn/MzlckZTCCZRTUOlAlmuHVVl5a9qY1Qi53kYR+rdkVgqfhxZcmGplXOtpNY4lcSlJLQzTNOI9Z7aKs9PX6WpehEmd+sykdYxjKZzyXejkD2MVqJX76a6a9CQtkyDHCRiTKASJUvgjbeWdw/3wk83msFatNZMo8Ma0GjUfqSOjsM0cLffYRQ8TB7yA6o0VMxQGraBrUoG7rmhqhw4pkGm0uNgGAeD0RqrGxphSFtjZULtLRXfJ7uZmhqlNUqTyXDBMOwPuGkHxlGU4TxH0m9iAH45rSyhUhv4waCwLEtiDQsxFc5zYE2V9Sr5yN1YK+FMV/W3EprLG3d6I5Z0ZUgTCknbDm1V/84j8S3Vx3mHwnWqSRYSTmukAmvMfH16JcbI3XGHUsghQzUMYkQ8nc7kIrjL1p/767ywrrcJ9a1u9T3r1lDf6lbfsdYgSYm5tq6nVhg3dpSYoVTIpUHLqNLQxjDtDzIpA3mh7ZNGa01PizM0YJwmjsd7QDTU8ywT3RAWaA2vdzg7MXrP+4dHfvz4gbAsfP38ues+IQS5nSEWUFB1xH+5MIwZ6y3GO8Aw3r3HA3q8EBjIOYkm11imceRPP/3Acb+DUmgpSwLfspLXSC6FeVnJpXBZE6c10Cq0ksghkFMWGYc2DOOecXdAbUmKOTMdD/zhxx+YppFp5xgn10NWArVkDGCRCetgLL7jAyfrr8mOoRshd8OAtU6wbjmhtGZdV1KuNAohV9bUmNfM62mhhEQJkXhZGEfPzz//wHjYE0IgVGEpn18vnF4ujOPEOB7wfsJZz3F3pJTCy/MLl9MFYyy7cd+j0h0//vQzYQ7MT4Gn/EqrhZVE0RVTKqZkVAOlhFmstWLShmY0ejexc44MvG8Qm2JpldcmGvR/fvrK316fsc5y3O9w48jzywufP3+SAJ0mBr9tE4KCkhM5RZSCafB4ZxgGz/1RZCLOObx3nT4zYq0llcy6rtcUQ4U0fHf7e0mq3JB3SEOnAWUMO7dDNThMAw/7CasNx8EzWYeqFRPlMJXnlXRZUA08BoswtmtPo5wGy9Q12kpVoGK1xTuZ/lY8aEVKmfPlQuhM5pAjDfDTwHi4w+92NOspyvJ8WVmfX0k58eV55rJIQ73bO3RzvF5e+PxVpFqntRJSZYmZJSbWmImpkHOR2HilBRnYsYGbH6JtCZdseD7R2gNXDrxsed7wjgo57PhhwDsrCaPzRTTnRabctSZ+/fSVr0+ax4cjWivGwXOYBnajJ6bM5y+fuVwuQnYZB5FCXRbWm+TjVrf6rnVrqG91q+9YV2JHa/0FX/3+TX1D6eifs8U+t/q2blfbC3JHsolOVSKE6bpLa8yVDrBh3IxSne4g2C3TOc9K6aumc2PpNiDnSkwZtKEAphvSSmfthpg6j7eJ2VG/ERKctddVdyuVpg1VK3TtP13rCD+tsVYCRYZBGo/ENgEt5JykIamFViWN0BohmEhjJxKBqqFVi6oVVbLcx1pdxTBGGzSKWhtGSyS6MYJck7X3N8Ea/XbLqj+TsiGnStKVlCrRZLTWpJjJUQyGSgnGLJZMThmtLTEkopc4+P4jkzsBwuiCagZrLCUWSeGjx4p3NnDZeMs0kSmoN8721dbW70NvhSOdEfMhrZFaxVQjSYdGJEPbNUA3SNYi0oc385r8/CXL2l8rBUO7mie3SelV2qI2Q51wnbdrVGslaZpWzKHemg3iTFegfxOZbdAKhs65dsbgvRN5SgNnQVeIKEytUME1jWkyra1GmlDnHc47UG8R5U0pqpxEyFRSrcR+0IhFOOaxiAHQKgXGUJUm5oKKiSVF5i5tWUMm5orpko7aBOOYemBL7tPobcr/Fuv+FuH+9hxvG177m18QCPWFt8/d2PXykLbffexmWvwWmXnF8tFxjUWkVzHJQVIrRfZuG4ojRtoNgyhhMduh5yb5uNWtvl/dGupb3eo71v5wAHqjmoWvXJrtacsGZweq23TVDWMMg3OMzhFTYl4XSi1oDdNukM+vldrX6a2KLGAaLTwehCgRAq0WDqNltJpBK1TJlHWVia/zODRLVbRURfuaUyeAFJ5fFqzLVCWRLrlknp6f5baUQoryPe+Pe477PabINLpYh24VXWpfRwdqXIkx8vryxBojZpjY7/egNIeHewpCOPntSUxeMQfmp5lcCus8U1KgpIGaFpoDVcBUOUj40aK1Z50vvJ7O1FIYjMUZaaS90hij8NgeBCNp1akJfkwj+m+tDM5J7PLpdSavkXJ/5MO0h6ohJ2oqLEtGqS88P5/Z7UYeHu7RSvFp/sLz1zPWBmrWjOOEc45xHKm18vL1xJcvTz2kplPQtMeZgRQzn+eVp5DwToFveKUYrKW5fuTZSButUZpg1IyCwZhuStMUpRkBryDWyiVOhLqnaSMGxZxQraKNRjcNNVNKlkZMBuBopXqD6/jjH//Au8cHrJH48U2Da7Uhl8zLywvrsgjJxWiU1hynPYfDvh+aZCrLFXghLG5nBek4Oos1iuM08XjYSeOZIi0n3DDw7nCPt5Y4L6znCzVX4rySY8IaJY23UkzjwG4cKbVwvlyIMZIbLE0oLs/rhdNlJqXC6SIyjab6468VTRma8YRUefnlCyhYY2QOQfTlIZJzwl0yL5eCMbqneULKjdNlZQ6ROUSZKmuDNRXvmlA63ADGCEYxymZAG4PSBrlXylsb29r19wBKvBG5y35MP0zSn5OlFZqSOPlmTT+syEEspExoFX1eGT6/CmVFaaZhRBvL+3fvqPd3lB5oVGul5YTCcuuob3Wr71e3hvpWt/qONY4jIAENxCyy4CSTS9BY4yi2p/q1glG6kwosJUsaXykZpTXeyJQpF9GyGqNoTdbE3hmMnqg5k3SlFc3orXCUtUKVQk0RVRveWCyakgrRJEDS/0qphFi5zBFtCqnKRC+EwF/+9hdeT68YrXHGyuSzNQZjSEZTQqSNqa/9ZSpJztSSyHFlns8s68rBWsbRYazH7Q4YP/JyunAOicbCGlbO55M07iHKRDVHWo5QDKpYdHMYpNFz1pBWiHElp0Szjmos1hi8E72yMhtVoevRmxAOQHVSmcYYR6uVZQmEecErw7JknPaoUlClkExBcWL2M+/fPfLxw48462jlictpRetIKwrvL+z3e9SDTP8vp4XXlzM5Fy5LIJfCOB7Y7+6E2Rwi51wYVGFoUJDNhu1NY+2bhlaLcBjbW0KgNIaGohSubyFSrRwnz10cyChCPxSp1rF912mpSA9K76K8c1hnGYeBd+/e8fMffhJjYb+Wt2l1CIEvnz9zPp9x3exoLUze8XDcA42cIrXkHhKjerPuGPyItYb9KGE7x93I/eGAorGcXoklYZzl+HDHNI6s84wbB3lsjaLMDeMc427EGsNuHNlNEyknZgpNV1KprDGRqTynwNNykfs+RFKugpCzDoPCKY3Vlpw75z0l1pSYQ/jdxNmozGVOHXsoBJ6cYQmReZGIexn4q25OBbTGeC8oxRpZS6TW2rGSv99UtWszDVvYS0MOz0DfItCNsZXaZPOlre5YQWmmJRQHwTEuiZfThSE4Ho4HSmlYYzkejmgNMQSW+SIbJ2do1fx+In6rW93qX1W3hvpWt/qOpfq6fpMzlNpoVdPq24vglQfQ17ASgy0GQz84bDWg9JU7TYgUkIllFo221QpnHFjTpRCVnXPsxrFLQSRtsGQJqqilsAZBx5UuI6HrO5dlFd1pyd1kldBKM/gBZ22Pp950tA6tNCFELueLmNCMlnS2WgTvpzX7/QE/DIz7A+M4orSl1EpeV2LXQrdWGbzj/u4o07kk07P7+yPT6PHOYjS0kmlU0tpoRkMpTN5TtEG1RitVUuTW1GPVO11FKbKxVG1YQyCm9GYi64SSWiu6yX3zfDqTU+Y4WtokzbtzYhRdQ+b15YKzlhASIKbHeQ6sayKlKpr5BpdlJZVGzIUlyPeMeWZNIgd5Pl94mRe8TZQqaY575zh4J7IIRJpgFQy6Ux1MJ4kowKpvpBl0edCmZBG0orC8BYdnjITbjHXoSMdNIiMSEe+9TICNuTbgCgRFmCQgRKgYFud851kbjLPXyarQU2qX+ohsJeWCUkJNUQps0mKSzZI6mZaFEgO5Noz+JEbWNRDXlZILy0XSLG3QnMOC0Yr9bsc+CjLydZkJMRJTYlkFvfh8OfN8OZNLY10zuUiAkKkSdtTmldiEsX2+XISxnRJrTFf+s1YSbgNdAlMLKtceuy5x67V13neD2DK5SVR8yZlSKjXLKXqLT9+0H1siaamFul0wdAlS6zH2W7Pc6S3b/auVTOoVdHmYHI2a6UcgbShtS0ZtlAoo4ZmrJvrsYRhpTTZgw+D/f/q78Fa3+q+tbg31rW71XUteOEsVKoSAK6xICWq5ahe/RanFINNW6y3H4wFttoWukhWwOhNDIudEWFaUgofjgbvDXvorZArrjGY0FlojzCufXi+klLmcF3IqvePa+GYaZQwxZS6vJ0oVYkHICaUU3nvu70amaeTh7oC1ltFZBmuxWvHy8sr8emI3eo77HRoIQTjP2jp++sMfpJHxA2aYyLXx+fmFl/PMvEZyClAzd3d7ftofrkQEie227PcTxmg0lZYCOTXSRfQT1ljeHe+gwfl05nKWxuvl6ZmwSjR663HNdn/AjCPzsnK6zMzryrIGlhBFB1wlclu9nPmf618ZneXD/ZGPDwcG71DK0Kqmtgs5/YLRmhgzSnlyzjw9vRBiwDqHHwaUUuQqGts1ZL68XFhDotQzuUiT+enzE6+vZ2l6lcg8DuPA3TRgFPgmhr7DOPLDwx3eOXaDZ/IepRXWq36NQFZgKxgH2mxh4NsWQ3F3mKiA9V5iykG6XaRhjjHivWeaJoZhkIbaiBb6Mi88fX2SwwcwTRO7aeLh4b5Pqh1NSQBLzLkbHN90vjlEliTJnGbuoT+tYnrj7bQcHFqt/Kd//OdOemmoVq/mXJog41KU9MW744G747E/x0QKtayB1/OZlDKfvzzz9flF9OpNZBbaSEy9Uho7rxhriClxOp/l0FCrYBSVYhxG0fo7x/1eZCo5JUqStMHzeSHEgHOe/XQQZKKNOBOJufB8FixmbkJrEfen+Aa0UTjn0EazhkDqdBzBDuprA739Giml0LTuBxKFdZZpnDBablOOsQc9if9CGYVAhhohNdZUsVVjtJzynR047CY5iCl5DLbD/a1udat/fd0a6lvd6jvWdYnbObJ1m1C3byfUrQ+l5OWs9uhhY/va35r+Uar3vp1fu73gbiY1JxIBr2SSZpUWTnSpLHUmRplIL8sqja4xnXEsUgGFonbe8DadjjlhjJEGyw8SGz3tcNZI89eNTTFEcquYTojQSkmD0xpGa4ZhxHkvnZ4T1nCtlZQSpeP+oOGd47Db9dtmhG5iNN4ZGdrVLBPqWqmdn2y9wo8Tm9mq1UrJmWVZWOYFtAFtr7IZ11FvqWRykSm6bA6qhGy0RkiF87ySrGbygndrTSLFk2+okLmoVZqTbrkrFdYQWZYVbRM2JjGRGYvSRvjRqQgJosehp1w4ryuXGGWUXqWpyTXTkPAO3xpOdB7clT1YjVMNr0Wr3CQlHvjGrKalYZN8F2msjVE4bwHFMAn3Wy5Okaas6ypGP2v7Naa6CU5d5QeSLCjNpjG2T6mdGEW39L/WBEnXqR9imITaCrpuEgq55skJUkIBo5MtQE6J9TJTcsZ0uYvqpAwF5JwJyyoNp1ZgNxKGvC0pcQmBGBPnsHIOQQ4N2gEa3RSmG3N1qaiopaGeF2moWyOXetVYV0QyFIuIMlIW42rJWZI0S8VasNagtcX3DQm1oWqhZom93xInJaSlQjNvKYZa4l82S2N/NOX/1GZa5CpDkam1mGuN0W8mWd2uxkyUbJ5KFdNrKtKclyJyIacU1jpJMbUiDbvVrW71/erWUN/qVt+x1vUCTdLoSo6U0voEuomuuma0alhrMNZSWyVEWVdDxTiDsZ1LbZ0ElqRMjRFvDIeHB4zW3O8nDk4aWW8MRmmsNjhjqaVwmVfaEqmqElGkJjPv3i5gOyvCDoaP0zvgLYBGa800idHOOss4ioHv9eWZL6+vssouGUXl3cMDdhSdbFOaZj1ZGZZUCDWS8irxzD2YRRXRdL+7v6ei2O337PcT1jkOxyPjOOK947CXSVxcZuIyk0Lk6csX1nmGXAiXGYAaE7qB1YZhmGSyrw0YR1OKUCuXy4U1JtZciK2RlaJ2F12rQG0kpVlrI+fGl7OYJKfBYxTEkBkGR85yWCitUWsj5czrkgixUEOmNMGQqW5CS6VwiZVYFZdQOJ0XUimcYmbZfGlIO2W08JsH53h8uOO4m3BaEa2mao2dHMNhpCpF7rKOpjXVSoe9ezzw3htya4QGGcEzhiLGxPfvP3J3/yBNcpCm8NOnz/zyyy/U1vjy9Qunyxlob/HUDczgsUqSEDeJ0us8d2nTG+3DOYuxXmQ9ucjXqUWkRa2JE7K1KxpRKxi9w1tLyYm16+cHZxlclyK0Aq1K8uXhKOmLd3fc3911XGSUDU5VFDWTVaNZj/aj6OT9hNaWXBoxbwFBWSQROXOJudNlJK1UK0WzhawLkUS5zPJ4x0iOAVpDN4U1jmkYeXe4w1rLMcqkfwmRugZcKay1cSmiVy+1UJGDsNrINd7h60htcujeZDhKmW82WP1uaG9EE9XNpEZrqjF9qi3m1VYbsYic6ddPT8xzYLCah+PA4A13h4n2IImT1twa6lvd6nvXraG+1a2+Yy3zBYCUCiVncq6d+Rq73MJKPLQzDKMXusUyE9eZWjN0FNk4TYzKCMUjRUqM7A8HPj4+4p1jMIrBSJCK7yQFayzWeUouPL/OYBaqLkQgAIaG6fra1sC0ym6c+PjuEe8d1joJyOhpe7q/YNdWyTnz26+/8NdffukT9cyW1Hd8fGRgwGqDdZaM4hIzUJgvM68vJ2m8rEMZibs+7vdoa/GDx48jbvD8+IcfOd7dsdtNvO/EifPTVy7Pz8znC/lyocwLLWdiiLTaqKmgkQZjGCeUcTRjadZRWuN0vnBaZmLOrCWTWiMraNb0Pk8BlaQUc2mYWomnmZfTmck7rNLEkNlNI7UorJFGORXR1J6XJNPnFFk6n1kbg+qynYKhoTmFzKfTLFPrUsibtLZfN1ZrRuvQ08jhjz/zw8cPpHVhOT0TambYDeTjBDRKWoVV7jR2EB3zwR8x93tKg1jpYSbyp3WOv/+3/44ff/oDORVOrzMxJv7v1vD69MQaAp8/fWIOK6VWUhHSxI8//shPP/2EsVZCX4xhmWdenp97emIk5oT3Ax9/+Mh+GIkpspbceeCF3LcvJSeRJdSKqq2zryuDk8lvDEF8ANpwGMx1Ml1L4W7acfjhR6Zx5P54z/3xjtx5321dUbmR9WtvqAf0UNDGMuwOGOuZ55X1dCGXxrKK5rqUIkjIvq0oRRrV6gpJF3SuzF2uUmOixojRins/MlnHbph4f7xj8J7ap9fzshBeX7ExcMqS2NiabB9SFWmH1l2L3g8utcqBuqaeI7p10Uq2WdC3XYgvY2umm9FUa7spsaEqfQMk3oTLJfDX8oVhMPzwbsd+dHx8d89grUTOG4U1t4b6Vrf6nnVrqG91q+9Y2+vhFsHdjJLZb38xtNaglMFuJrPWJKq7kwBaXw/XInzmkrMwnruxqTMCvlkoN1ot1NbIG2yjiB564+Vu1qdtWqg7ikt3SYky+o1B/A2LWCFr/xBDX3WXN3lB13g3FKlWdNlMfhs9WUFT8nn1G1JF/7q1iC43adVxfZL4mFMiJ0tKkVZNJ5+UrqfdluJvRq+6xTKXLrbpo71rO7LJGLQWTTeFimjOW48ib/3jRZ2wTfLp6/NGKY2UCusaBaNWt1RJYR7nJgaw0ieNhSrmSEQGUencaW0wVnUzW+uTR6FFNK2JtWC3KPSShcbhDKoplLcob0Vn3Iys/LWCTjQxaJzuLGvBOMvtbw1rLVorOZyVTM5JIrhL4aqcuF7AbxdxQ76Oao1Sqmi2u7zh/9Hem/Y4kt3pfr+zRgTJXKq6Wi3NKkMwfGEbNvz9v4lxgWvckboldVXnQjKWs/rF/0QwqyXNHU/n+M3EA2RlVeXCIBlBPud/niWlprkPkYpmCRHjIikmYhQSLedg3gx5m3uSwqbp0BptDY6OWguu81jv5dZVJWuNdg5tLcoYYimMbTJ9nWbmeWJeohhRm/7btjpxtJSsyPnVstcVlJakUpTkglfYovUK8phVFLrW1uS5Pg6r4ZjtXNSoJlMyZGMYnGPpPFElXK5QC6nJcIA2JZep+Nucj79AXW9QbdKPUmRhq6C1V2o5rna9rj92i9osmCQlUMEoQpSJvFZazpO6E+odO94TO6HeseMdMXgxfhXrGDxCPK4zC4XOee4fTti2pV1R5KxIhwFnNFW1lNqcma9Xxqu0ooVloeZCjpEwT9QkjYbWWXKVbd5aK0tITHMk5sLL5drSJgqxZpJuZSs5o4vGWt0Ih2pkvJBihEVMic45jDGcL2f+/OOPMtUrifsPj6xJJUqBHwYuo5j9dF1VrWp70y6lgjLNTCelHiElnp6eRc9cM4mC955xuvLw+MjQdfx4d5Lc7RBgCcQgU3oLTbSiyRTSErheJ3KtpEybymZiESJrrOVwPJFLwfSJ1HTB07xQcmGZZlKJlFoIWQpJrJUEC2MttWhyqlzDxOVZJBHVWooxkpKiW6JFUSRlhESX2vS2EpsXc8H6jrsPH4Xw9T3WO1KWqWbOiWm88uPrK34acQfP63LheOj59uM9nXf09ye6+6PEHV6hBgXWQssc9spikWOqxooxk5boUWEcz1wuF+Z54acvLyxL4PnlTKkFYzSH4wHXdxv5rAp83zMHqdbMRUhyiol5lsbI67gwjhPWLsSq6LozWzoFVch7znhnuT+dcM6JAbSlfkiSi8Naw2HwWGO2jzXRRmQgHt31JK35/vMXzq//DzFEnp+emKZZSmKcR2tDd7rDn+5JpTItoe1MiNQnA9U6iUxMGaqmajEKmzY1z1oTa9NvK0n8qLpQtSWjCLmiSpIGxphwWtMrJYZdev7p0zd8Oh3583UkP78wpYzNiWsuoCrzNLIssxB3eRFosplbeU6ttZHpW9qHLjCXylMqWK05Ho+cjgdKW/CVUuV6ropSZQFpmqB9XAIpJ/rO83qZ6Fyi80aKeHbs2PFu2An1jh3vCGuMTFGNUMukE1bLPNcazfHQ430njWspk6n03qGopFqZW5xbDJEQk0xRs0xnSxbSq0oht+l3KYW4SIzYZVx4Po9S2BJEipCq/N4CzRwFWpdWQ71O5ZqxLGVyKq0URUpnLteRH798IYTA6f7E6XQUg1qbZGslxRjAG5OdwraGPaMl91e1ohBjLSSpTV+WhSUFpjhLdFtnSSninWO6nrFa42oVEh0TJUk1t5Q1KmpV5JRZ5kUaCLU04Am5XpMVDJ3VJCo1O3IVM1fOlaQyUYcW/aZItbahoEYbh9YWqqZkiCEyXS6UUqDrwHuU0ZhOPucKuZFYMT8Wlph4vY6EmLh/FJmLdZ7D/R3d0BNjwF3OIpOIC5d5wkTNl9dnEpFP+gPfdZ/wxwF3GrDHQbKe0wRkiUuzLc3EONBOpuDOb42dFcgp8/nLM68vF6Zp5vOPT8zzQkiZQkUZjTceC1StJJqwTT2ltrwyLwspJ0qupCSNiXNIjPOCNoaiLji/iKTByG3nkiglAx3aSq25TNhbBFznW1pIx4cPD3j35u2oVnnOc5aWSyPlSC+XC9//8IMsCJ6emKeZu9OJX336FucM1vdYK5Xb15gIMcpikUpWEjGnEYMiMbdtjIoyskisSs4DA61GvE3VtcQkploxFYnGy9KgaZyhNxqL5ePpyLHzJKX4cZpQOhJjJSCT7xhbBGaLxdzCpreNl9XAePuSTLMRc26UZkuJLnQSp7fGKXJrX1Vboo94N0qRCMd5iVKDjmuZ7PuUeseO98JOqHfseEcMvmt/a9FkSjP0nqXv6DuHtwZvNKoUaks+sFpRjRGibITc6pYNXEolBtGkGnNLVQgxQJHc5hDF0BVLQTuLMRW9ykNanbkQakkhUYhO2ziPNq4lGximEJhGSX7QRpIULpcrMRUKimE48vHjNxK7RdnycCkS07ZNpXMRw1jOQlyMkD6MaVv8ViaincMuMypoaRrsOjrnsK2GvVSp5tZN3tF3HZ11xCBT0lrBec9wGIilfiU1uMYkQQ++Qzv/lSGtZtGrSrNf+3cj07pWjFI4rfHGcuwH7g8HFm0gJEmcqIoYEtoaTK8x1qExmGpkIhwDKiXQmlMRQmOdlclkyRzKIDniQ8/pNFCp9N4g5e+V46HHWQ01M00jUDgeOozVaG3p+h5j9FYRLoRMywc0g6tkHaemY57mmTkEiYezBtt5is5YUmt0zJRa0NrgOyHkktctUp8QV5lII9RFMpO7vsdog/ce6yxQUUqmvYd+wHlL7z2Pdwe6zkskXslorTgOA13n6bzn7thLuVEjqbUWcjUyMS+VeZ7JOTNOE9MsEiRlLK7rRIPfdzhnRZZSErlmtNXY6jC5YmyEUslVpEqU0mQebPIprTWHw4Gu62RnKLRK+ZSpOWMqLFXI7ZJltyPXAhiMll2Tzlk0cOw6Hg4DLjiWcmUMkh+fWLnzmtxRWwIQb0pWdHs6V1diWX+iyZJoraqSfJKyXH/1DQuvbRepVLVJrlIuhBafuZ03O3bseDfshHrHjnfEw/EIbBJfkkssdyd0rXS+49RL0YauQKpkXSlWY5XBFoWKom82g5DdnDPjdSZGibMrVGJJhDFSW41wTBInZ3yPPRwwKILRpEU02LmlbLx5u0a7Dt8fMM5TlSejebku/PnPX6RJrZnJahXNp7WGx28+8T/97ndoKjUtUDJxWZinEWql6wa86xinie9/+CPLHET76hzKGLCWag3O9HwzdNRauU5XLuMVay0Pd3fcHZusISXKOqkrFWfk6957LueRnJ6hKo7HI6brpT766ZUUF8Zp5MvLKxU43N3TH44i9YhBJotVbW2AlEzJSYh0YYshHKzl5D3f3j3y3cMj4/WCTZUQAp/nmes8YztP92CxfS86eCtEZlqmLYN8ON1RKlynifP5Ve7n4x2dVdzf3/GP//wP9MPA97//F/77xxMxBpb5SkyBWhJPz1+4jo6HhwHnfyUNhM5QG1legpgzq7JUZcilMM8LqdVoj+Ms5slxatnbYLoO5TtUStQghDlOEzkmrNOc7k4Ya3l9PXMdJ9Erj1Ipn1MhRpEY9X3P3d2xlcNI3GPOgRwXjFF89+mRbz99xFnNYfA4a4QclixJNfd3HA4D1hiGoUdrzTIHpmkReYnS5GyYxonn52eWJfDT0zNPr2cAuq6jOxw4nI4cHk5YYxinmWmaKBWMd3TekZVizlkWl0li5Wja+YLCKCHTzjm++fSJD4+PnC9X/vD9D8xLoGYpo9GNvNpaOQw9S4q4bFBYnJapt+k6inMUpZhRXENgSYnz9YqqEJVIlqoqW5pKzpLUIQsk24yLGmN1qyMXE6WoQGQH6TrNQp/VG88CsEmjm/ZaVUkwyVTmJXOdAzGLkbFL+T/89XDHjv9M2An1jh3vCNtay2ozvaENzhp8y9w1LWc5NblEVc28WLWQAC2GNms0xsmbq7Wmbe3eJlk5Z9GY1kJq+laNaIYrtKSJjCq3rX+4bQUrLdFuKLndWqTZb15EHxtbEsK2ha8kI1vKP4AkDXKaSolSkuKdE410m8athrzVGFio5LZF7ZwVSUFJ+BSxVrSzxugWAVaaybHl8WqZmq+Nfm/NhjL4NkIm6tra18x+tYiZs02gb+nFb/DW8Fkl7cFqOR5vHb31JOskktDI85PyqgWW6mltFdZpKhWbLSknjFFYbakoQoyt7h2pFK8FoxXD0HM8Hri/P/H4cE8IC2eV0XORSX27P6yRabppp9v5ssUdtt2HUoT0pZyJMbGE9nwmma6DSA2U0mLUtGLcU0ajkkwujdHtOZfpZsqyqEptYSZGQ7nt1fC4ZiuLLllaGvvOczoMWKsZOnluZUItv3/oHIfOtedVWhqTUW3aqyhaUYsYdWOIW7zkWnSiTdO6O4exRgppFJRaZB9GI/IOrcV4Cyhd2wJkNa5WuR7a1NY5R9f3zIu0Q5YWS1eLTJRTkbzplAupijFV4uzEfGy03I6zlt45MlK4JL2LVWrDqazNiGIivOVMr9eoQsymq/bjq4rwKlF8ISZ5fdCWdZi9GhRXIyOIJl5D24koJF2agfaXvdbt2LHja+yEeseO90SSyLFa5Q2sZIneckbjraF3Fmsd5EJtGbhUIdVaq7at297pckKVIm/Izt7ixxoB1E2ffLyTanDb9fjhJG+cSouAoBVylAred3T90CqnJVc5pYVxksiyl/OVOeY2oRazU2dEYuCc43Kd+P3vv6fzlg93B9neNhbrPSUXLuNEfLkwLwtTCKSSiS2xgpz46fxCiJG7uxP/+A9/x9APKCvTOOEXhWkcySmTQhDZh1IUNClVFBeudmaaFpaUiDlxvk5c5nkrpSmqcjgd+YfTCZTC+V40xUqJ5EQpnl/P/PT8gioFXWsjOzLNkzg3z4f7e06+o3cOCzil6YyjWiFPKSdMkfQJ13VS/W2E3lrr8LXgfcfDh29wzvPnH3+U8pOcuZxfmOcrr68/oVTieBKD2f/+v/4XaimcL88sy4QxCu+lqvp4HAhhkdg0JWkp8zzz5aefJF5OQhEleUXJ55jl8cso5pi4zovkUEeR0zjf4fsBZ+Gx8+2clVSXMk+cz2cu57NEO84LMSaRhHipn7dWQy3UIhrzpGDoLI8f7+mc5dPHez4+nnBGc+gd1mgUVeRCSmGNRtdMDoGXy2uT5UiEXamVGAo5FcbxyvPLM/MsGu2Pnz6KEdN7jDG4vpNzvVRqSwVJuTAvgZSazKHJYmrNWxRkLiJzsc5zOh5w1lFrZRxHYkp0XQdKE6ZJjL9AbguYMcVWcR45GcW9F6lHbR4IasEbTS6a3hoOzrCUypxkQUaRHPGNRreM7/X6V9TNlyjFOWz/B0hpS4yyiHHNs2Asx4OlVljmmWWeEQmO/Exp8iOlNV3fS+PkrvrYsePdsBPqHTveE+2NVyaLlZqF6jitpBrcOaxrhNpJa1+lYnKWHNymkZa4NjHhOS21wyFEYkptWi3TSuc9j4+P+L7DuA7XDVJ7HTNzTDL1tqLtHYYD9w+PMv1rkWYhBMZxJKXEOM3yM6XFpFXw2uD7Ae8sl+vI7//wB06HgUP3d/Sdx7Ts66QS15czL8+vxJyZQyCVgikJ2yQpf/78mefXF3793a/459/+E8PpgHEa62QCn5fINE4SGRgilELRlqINikwIEvmVUmJpx/86Xnl6eSUDAbaymLvHD2gtU9xSkNrm40kmqX/4nufnZ6iiA98IdcsPEc3vHUfn6a3FIITat9xfhdRC51rQ1mF913TDBSjy/KrK6XTi7//u7zgepbr9Ol6Zpomnp89crmdeno+UNHM8Hfm//s//g//tv/wvGKu5XF5YlqlVVctE8/XlhdfXZxRKkjGMYZonvjz9RAiBUkUHb4yl608Y62RrH0VWiiVKzFxIics4kXPh4fGR7iTHdugHOu+5XK/86c9/YpoXLhdJBsktJi+XgvcK73sxmGpNrbKTUHOg1szd4YFPH+4Z+o5PH+75+HDEWcOp97LroqTtkVqZl7nVn8+8PD0RQsQYh7GtpTLIwm4aR14aoT7eP/DxgxBqpWSKvsbHlSoyDm0tVIn0W5ZAqWqbQlckYlLKVGTCbJ3j7u5OJFW1ch1HUir4rsdYT92SdvKmgZ5S4nkUac4H75iHXs6hpsenVrzRlGoYnGVwFpULl9aoKJy6xQeitpZKWEk1qHLTTa9xeCv/jblQamqLY9kd8MZy6HvRTqfEfMv3a1Pr2hpTLb4buH/88P/LS+KOHf9ZsBPqHTveEdvW7CohoG7bybpNYWtet/Bvec+b6LrFnOlmcpL3RJE+rCY6BdJ2Zg3O2S1DGlqucfv9MvWWjNzVRFbbm3lMkRwTMcVtK7+0beBab+5/rQ3OOtnaV1oi9rJIQ5ydRfM7TRshn4KYEUOMsj2+BGCi1FthSCmFZVnEaNZSJLZM6da0F9YJtS6NUGuMlnSIlGS7O2WZgK8pJrURLNGdJrTWEs2XK6lYlJGymrhO+bnJKHS95WQ7a+i8wzvX0kw2hcnX7XU5syyi2TVG6pzXmLP18Vtzn6HinKVkh/cOH6S+2zSSWUsmxYVaRR+tED23syJjcE7kLrBW0UsNtXeukS1LQTcZj9oMnTEXUmoSCGMwzcipS5F0jrJmnkt7YUpR5DIlt8fConXT37fyE6XkvDZG4axu8gQHGHpvcVbjbCsvcrZlrstju+azUytGaXKbthstiTB6rUDn9lgbo+n7vpkgO7xz7cmQZdBKKuWHxHiayyr9EdPg2vKomtRCTKl6eyxXiURui6w1x7mUfMuKXrOzq6KqlveeNaEUQikYRYsFFGlIaXIjjRT3mLLmx9evB8N/bUrc0j5ucpD232+/pb1sbNnWWsy8YjqU545a2o7A7TZVO3dTjHvKx44d74idUO/Y8Y4oZStuRgMohdeaagwGRZ4DRWdqqdg12qyUZhzMEhUG9MOBrh8opTCOsyRYKLBtz/f+dOT+TmQNVSvIUtowT7PISFLEaw1Wkiq8zWL6WiR/+fX1lXma5EAbyYhJClIAjBFt7DD03N/f472llkgtiRAz3//ps0xJp5HX11dpu4vrBL1uRslSxHSllaIfHMOho9TMH//4A8/PT/R9x9D3UMXwl2NinmZen19IKUv7o3aSY20cWps32uDCFBaWUmQCaUQvO4fA+OWzxL3NCyFG0el2HUobxnkilwAqixzZazElZnlOTseejx/u6Y1lwGCoWF2xClIjTaUk5mXihx9+wPz0heOx5+Hhri1yDNbKJP2nL585v74QlpnH+yPp0NF5xfxwZOg7vvnwQN935DDxh3/5b5hWC601qL7DHU4yOT0MmEbWV93u6XTiV7/+TgizslQsMWVerjMhZqaQeL1K+2FRlu5wR6cUx7aQyzlLdGGtXK8XFFVKQOaZkjN957EfP5BzYZwmYoxNZ55QRXHoOu5OB9FI91JWdOg9d0fXqq57PtwfJcwtJ6gJi8FraaksxqCKRfmOdDiSfG5FKlrO4VyhZO5OB377z/8o91tpim4+hUaodZM71FKZ5sS8XAkhMi+JJWSs1Thv5TENsqjTWtF1koGtjSbEhMqqSSokMWaaxNCZUgSjW9MhKFtJWnGOkVALzzFwn6N4GJLItFIuLC1hxWjFsetAJ0zIqFxoY+OvCPJN+tESWnJsX78R+pUWr4vHAoSQyCRKaj4KrXHG8HB3lNeWIOkyTmsskvwzXa88K26rlh07dvxi7IR6x453RG2GKZBpmFaryU3LVqwIRIFWftLIbMkyWa5F3myN1vSd1IgHHclk0c4CKOi9k2KHWlhilNzlLKQ4VyEiViuKFqmComUlJyHe0zRxvY6bEUvexJt+U0kbojEGax1d1+G9I8ZKiplUCufLiFQcX3l6eiLn3Nx+6k0bXCGExDIHjNZ86x45HKQF73y5MM8z9/d3kj9c2YxvIUau00SKSSQAWqbN1haUFqI6z0ESTorUeCsk7k4pJV9vhHvNu1ZaY5wTEyZrxJhM/W2LMbQorFZ03nLoOzpjsKlgSiv1U7U13slEPcfE+fxKHQ05n+g61yq6e5QylJIZx2szUdK+blAc6LzkMh+HHu8dJUdeX56w1jAMEgHnnW7Hp+ichb5rMYmtMKXznI6n1uznAMsUIuc5kUMitqzoUopMp50YOp33aK0ZxyvL+UwpmRwjpZlbc5ZdA2vslnVcSqvhLpnSfALOKIZBoiDvTj2dtzir6JzGW03vDUPvZfo+y+/UyGQYZEJdtaFqKT0yOrfGSSiqEJuvoPMe3/USV5cyS8rrs0dFb4RaSoQUMWZiKtvOiwztdZus367NVSqxEljVDJCyuEyEKLst69QXEL1KrRSlWHKmqsqUM1PJMokuGdWi/1aZjEHhrSWsu0zqLY9d/9LaGd/sgOQWR7kZDeXbxHwLG7nOWQy4WilSTFSj6azBW0spmVAiJcmiVq/JHyEwjTuZ3rHjPbET6h073hMtnm5LZwAMoJrhqeRMbU1+KcuWdFgCuZEESQlRqFrIjRSu5kRdK7ZtXesqt7URSRGmiqM/V6Yi+tGYCktIbYqpKWghWEq2yd8WgKzbxForhr7HOSuxYyWTEi0f+KbLFBq7JiVIjJnzDpq5TWQnRqbM1vDxw32baBr6rscaQz/0HIZBso6nhRCCGNxiS5UoMhUEBW26KNrvuG3R57YI0EXquMuW2iFlOtWJ1MP5Thrp3mo3DkfZAk+RNE0Y4OF04sPDA04p7GVChSjTSWswxUoetNEUhZRzKEUqkvWcstyWsbIjYdu5oJrkoSKpKasMQiQiUtgzT5OkVagK1TFruJztlvJSatl0tEZpeZxLIeciw9wqUpppGpmmmZyLZDNXMafWJocZr1dqKaScNukDWgyDnfP4e49WmmkSwyolY40C26LheovRml99euS7X33CO7sRaq3AakkoOR3EuJoTkoiREmmJjPmySRVEx9ya/ril2IDCOo82tRWqtOrwJNPfWtkWRqUkUppIufD8fOb19SKRgktbaBZISZJQpnmRuvS63iZbYglKicyofdymx6veR/T4VClLilU63peSmUtBl4paFkgJp5scp1Z6H+lTIlXw1uLb7SZoae7r+XjLn9nkKdwI9S0VhDYt15s5Wa2JHrWgCzjXcRx6co6oHEmqSpKK0a2VsWyEfceOHe+DnVDv2PGeiIkKpJgIIaCUou8Hhq4jxsR1mUgpM84L13lBdraFNGhj8L4TnWoppGkSDWgM6JSxpdC3iZqtFZUTSim8VlRlW6Fbm1LHyOVyIeXKOIuOGG1b41xFG43zXqZtjYCaN7F0D3d3dF2HNYqcI6VEqBlWQg1sOXOqojQcTwfu7++F8LXos48fHvj20ye8c9zficxBJvfS7qbkD+Zp5vnzE9NVyGBYAilliioUJY2RIcaWI11Enw1fCZtlF1xtk1WNTHZdi+Trh0GmkkbMe0ZrDv2A947lOvLy+TM1Z3796Rv+/te/QpfKmH8kpoSxBtc5sgbbOYy3VCrZSExcSImXy1maMo3BOIetYJ2QfItMW0HjrEFVhzMGqNSSWZaJnBasNagSKakjhZkUZsl57r0UriiNQmO1kfi+tvBYciLkyjTPvL6+cBknjOvp+yNK6VZCUpmniacvXwjLQtd1DMOA0lJXXpXmdDry61//Gu88f/j+B6br96iS6azCG4u3hkPv8c7yu3/6Db/97T/Recv96YB3lpITJS0oBXfHI8e+I8ww5kIKkev5yuvLM7VUXOcx1kl8n5HPYhiUJ7PrHdrY1jopOyN1SYSYkPQ6MZ1O88Lr64UQE59//MJPPz03HbtIQnIJ5Hzd9P9r4ZA1FqU01dGKTkQ7nWLcZDVyXq0JIbVNg8XpqnMlUrmmxHltML1eqSHwcDjycDyhlRYDYQG04TAtxHUKXiq6qi3GUBaI6wuJ2o7ppnNW7fqTibtuu166yOKRJuNRVPrO8+HxnhQjpiTCAp13OGc2Qp1i+I95Ddyx4z8pdkK9Y8d7osjctpZmPmymQ90+17Z9vsobaq2UpodUSCTaNjUuTR7StsorbLIGo956mZqBUL3ZHm4T8pxXs19LoXhLFLZtZNHm6mZmMi2L2BqD1rVNtGlTsLp5s2hTbmsNVHnD7jovZjaj0Upzdzry+CCyjsMgSRLrsa2GK9lmF3NcznkruZCpXIsNK4XYpA5rEkpthkLVEhzUm+neajbTqwHOGJwxm4zFOocxhuPQ03mPyYW5FXI4a3FWUhm0VtvgcJ3G1/XBZiVbEqWWWsJLzInYJDC5FHSRTOW3hkU5blgXJ7VUipKc6pyk2EZRCVrIntIKYw1K1ZssoOUjr6kseZM5yIe2b4yvTS6kFJsJUUxrMg1W7Xww2uCtl+ZDY9q5KzsnSolZ83To5PNx4HTs8c416YqVSX/jaVabbQFWS6VkSa6JIUm0nJEcdKl7l6zw1RirgFrlga+wPee3c7puWcohJKZ5abrpsOWga22Qmvki/oBKi8qTc7jq9vmN8a+0hs5ter1eYepGZtcdqIw0a6b2QZFK9tIm6GK0lEWqtxafs5gTtRZTKMgux+1GtmtRrdf1v0WV0Ramb+/LltPdWik347Ja4/ngVi2zY8eO98BOqHfseEeY9g5pqyYjCQi6KMiyXR2XSIit2bDJBYyVcgttzKZnLim1dkORdBSjQFtwFqUVx65n8I5SK3OWiW2tqn3AWt6ibcVWLckDWaa8tRaplC6iD805QZVmOaNNk4kmcl4Q5UZLRaCgKFhrOR5lsvtw8nz3zR1KKU7Hg0hFrOPueMRZy3EYuDseAZEaXH/6wjhN/Pj5R5Y2wV9Jz3geyTHgreHbT99Qq+I8Tpyvs1SLp7TpodFrqYvFe4dzjoeHOzovyRyiWV8JChtRocLxcODudCf3ox/oveesNeX5iQjoGJnOr6hSiTmSVWVKgS/nZ6YlcA0zWUHRGuVF4lGbBCDlwtPrhes803nPNx8e6DqPt5rozJaQcasKl/NFiKxkTscgDZdr+6JWmrmf8dc23W9EcQmJZZpJpbCEzBRFf26N6O8rmXk8o7Si6wb6zqOL49R5XJX4tuV8QSmF6zzWWnLKvL5Ko2MKgcFbrO347lcfuTsdOB0GPn28x3vHXSPURms6I/IWjIVeQamEJfByvhBjZLpOcu6h6Q9HkS1Yi9KGlAvTeZTzXRlQYjrMLNQKIWXGOZByYVwC09wMqbPkTF/HkZ9+eibGxDwtxLjKNeTPvMZAsk571wg9uVZijFyvIzRTpmjIaXnwLbFl/XiT8rH6JkPKXJcgmeZ1nR4beuvlOT1pDr6nGyd+OF+ZQ5TmwiqEVuL+6k0jzarxZyP6K9Zlo1qv83afmlVRJDS1ElJgXmZKTltxT9WqkejbIn/Hjh3vh51Q79jxjjAVqIpSFKa2xrMM5EpJhRgiMUZK29JVWou0wjppPTNCumIpUg2NyCluaQayZTt0ns45YikseWlNbrcoLZTEpGlV2zFBzGFL30ittlym5Ul+qOqWpFGpVdI6KlCbJ6tS0KqgrOI4eA6HHm8tfee2ZAFrDb3v+PThI33XtSISTYqR1y+fef7yhaenJ/7v//pfuVwvbSFh27T4js53+MHx+PiIMZb6+ZlpjtvUNoTQGvKc3Der8Z3jMPR89+1HjodDy5Su6xhODI8pMY0jJWceDwPfPj7irOXQDXjn6FLi4j1LzugcmS4XNBCzlMUsKfB8OXOdZ8a4kDWSruIs2toWQya7EvP1Qn3NDMOAc45DLkSryb7lBTuzNRGuEHOoSHBiXChZJtRaCaGbZ4/vVrmMxMClUglZCNSyRCFqReISO29ZQiTMEyjNofMcvEVnx7Hz2FZRPo0zSjf5g9XkVLicr2itySnSe8Nh6Pnt3/+G7371iYf7E3//m2/wzhHmkbDMmw5bIRF3RouRcTpfOb+8EpMQ3ZQzoPH9AYAW6EaKC6+XiSVEjPUY6ykV5pCILSLx0irUU4GYZTfgfL6yLIHrdeTpp6dbEySqyTPKRozXgfPa7Ai6GfyERMeYNknHmg+t9C3WUqt1p+Kmp65tah6yZL6bWnFV9O1KGzpr6a2jsx3lAMoYDs7RKUVAyXXJz7KmEa37X0Vdb7rR57LuSK2nUqVUMVfGlFjCAo2sK6NAy1S6VtHz36j1jh073gM7od6x4x2hVs9e2wJejU4UkW34NoFWrXFEtS3gNe9YNyIoaQiqvYlqlK5N6tFmVKUZHEuLRchlM2/lLFYn26K+qhGtac6FJUTgJjcwWmO9HNPhMHA6DGij6VoiRHuLl881Q83YNkn3zjd9shXDXa2kGAkVLuczyzxhlOh9c5I4ttyi147HA9pojJXpstaGw3DEWVlcoKT2uq4SFSVkyHce65wU2RjD3f2J0+lA7z191+GdaTXjdZtKrzXmKmdImbwszJcr2VpMrijvKTHhjKE2I9myLCho6ReJrEB7h6kVXQt6a3FkM7ApY6XaOjV5ApWQEiYEwGKMwsjfsFpTUVIVTiGkhJpBKdFU3zIchPJI/GDbom+TzVSFUJc2ZU0piRSmyXKUVmJCUxrvHUPfY5Qi3t2xeI81IyWXN7ch5lPdyGQtshshJFQIc82ZZZopMZLiIgU8rPnKbBKHUm5EVcqLWpX2mhUOIlEpck5ex5llCVhfcF4JoV4iMUlJ0OU6boQ6F1pSjcg8QohNBgKrYVYWl2tlt1o9tOtVesudvomWv5IgyeWhtknxKlGCJvPhJv9JLXnF1EqNEdMkNSVLjvpaKmOULJidtdhyq7rfxtKom176zbHKS4LcL3U73G09th5Hbed9AVJOxCjPTS1vpSq33y0a8x07drwXdkK9Y8c7wmRxzqeYIEShRdpSlcIqxYe7OwowLguXeQElxjnRIYuWmNri3LTeNLOqtu3eVV8do0gMisS3lVKIOTOlRK4Vo+A49KANyvZUNM/mlZSSvNkXMfrJ1r3IMz48PvDh8UE0l20g9zZGLYaZFBeGvuP+7p7T8ShTYiXa8PF6Zh5Has78ISzUXPDW0TsHCOnLOdM5y//8u9+hjBHD5uHYtsktCsPlOvKnP39hXhaWGKQxUsHd/R1H7hgOA/cPD3jv+O67b/n06QOUQlqulJYDrFY5SwqSdBAjepooMXG9Tox/lBztx4dHjocDpWROXQ++o5bCl6fPrJNOKiwK+o+P6Jw5ny901ysxF6YUiSHgnKcfBpSCsCwQAkUpXq5XrvPEcegpHHDO4joPVsyhcxTyfJ0myFIlfRhEo7xq0UGRMpSlRREuoZHLSmya37VcBK1R1oKSJJGh77DW8s3HR7799C0lFX798Rtyyvz44xd++OGPhJgYwyK55AqmRuzujh13h0F+h4KaE5fzK/P5CaUqzhicbWkjSbTJ3nmGfqAC5/PI+TKDksQOayVhpaLJpTCNV8Zp5uXlzL/8/k9cx4nD8cTh9CCJHEsgxMx1mvjy07NIpZqsKZfKvATRRjddda2adWMCmgb7q6SMlUS21sAYN73xW9zKmWSxkVISs59SrYxnvVZFAz2FyDMXdCm4ecGkxL11zMssyTxtB8aiOPqOuyERK9h5Fr8AcFMB3Sbg67Gvi6S2Rmz3Z/VlSLxeprRFvMQbjvMkMY9K4U3zXKhK1lUkaGiU3t/+d+x4T+xX1I4d7wjdJl9qnRwjUz1Kluld10HbrrdRYuCslpzqWgs11S0ea9U4tt3a20hKCaHIsU0k26S6pEQKgYxMS52zKG0xXgpNpNFPU+ut/c8aw9B3eO85NQOhGLCE2Od12lbyTUPtHM6JcU3VIkUniJkuLAsxLJxfXkgx0jvP0PUi/WhylW4YeHx8xHWdEKjjSVIOimpGNM0f+bJN+VaC4zuPMobj6cj9wz1d1/Hp0zd8990nUgy8fsmEeUQVUK0dUBxvkoutc0LFSAyZuESsNnRKY0pBGy33RytyzUzL3B5rmapmBbbvoFZsjJgQSCpRolSsW8BYK5KMlFFGGvaWmIgJrDXEXEA3K5jSVBoRLIUcIynK8+OcTIXRQj5pk+xaJc5tCZHQJr8roY6ISU5tVdQiI7GaFlPYcTwcpPa6H1qdduD5+QVtAlNYyDluk1uloA4O79p51BZNMQXGZYRaOPQdQ+fbzkSbyHYF3TTQoR2nNgbjRbJEI9RUSLkwL5FpXjhfRi6XK6UalOmpKMZpkcr0ceL1fJW4u+YQLaWyBMl53gys3AjnJj1WN8OlfM/t+76aOv9cZrGOtDcjpBBqa+3N2Nf8Eqnt/OhSKCFg1gzrlMkmi1eiXXO25UNbreWZres9Aurt+n5LqBU3H0N9c3jbhHrbjSntuoWYMkuQ/Hej7BYnWet6M3Kre1Pijh3vh51Q79jxjnBN0Ki9w7R3Pes92rpGkORNzSnw7XtlLgsgumdqy6hu0g1dW6HLqrlshHvN4VVVaJdRStrQlORIK+8pKEKplJroneHx7khKmcE7Yox47zkOgxCFkhkvF6A2qUP5KpEjpkjOUlX+3//le5yxGK0ko7hWwjKRlgWouO6E7yqHruPY9xhjJKfaWYxz9IcjxlpygZfXa5NZJHIqnC9XlkX0wN0w8NF7ITHWorTGdx7nxDy5zBOvz8+kMHN++kKYR+6GgQ+nO7SCqAzJWII2qOtMLIDx0B0wWnMaDnTek2phDrOU4lhpXRQdraRbLCUzplaWkluO+Gb+1BJJtyxiKK1lex5LlXSJOWZepwkXLcoaiUxT0hOikDzioiylKqaYyQQxKrraFiMarZtEpGoKhoIis6lwJYMYMMZgrORPFyrGaOZ54unpC7VU0iLk9/n1mXkRs2DKIm1Z5RFragTQprmS6xzDwnQZqSVzPU8iK+JGSLWeMOZMrXCZZsZlQSmNucwoLQvJmEXf/Px64TpOTNNCVRbXHUhFc77MlFq5jgtLbMkdsZAzzUNgQFW0hlIb6V2Np28vxp8lc6i65oHrW1qLXHZf/xxV9Mm1bPIIKYBhux6aChuQCXIqFV3ElCh+hcK0zFI908qTtNZ4Y+idlRQcaNU06kaW1XqN3z5XhCTXpqG+vQ4UULL4oWnrNWb7d8rrdauozaRb9EqiNUqZXUO9Y8c7YifUO3a8I3rT3qCsh6EDVIsHE73tOlHsgGSERmultgY50yQdc0iUnFHN5GRaTu1KpFmLPoC1kdEp6FsO8nA64k9Hlph4er0QcubYOzr3SKmVpeU8r0RXK0VOgdenJ0rOzPNEikEygrXdxmFVQQyR//b0e+Z5ofOOoe8k6cEZnJWJ97efvmHoe459x/1Rylzu704MwyDT7DYJfXp55acnSWg4v16Y56VN/BKlwvHujuF0lAmjMbIoqWujZGUeL3xZrqRl4vz5T4R55PSb3/Dd3/8GbyzRTqRpYbIT9jKzoPHW07teprm+Q1vH6zLx5fLCkiPucMAeB7nv1qG0YV4qLyERcuIaM0vJpFqFqChLKoU4jSjAeY9zrk2eW/JCCEwpYYxmyYXDvOCc5TCIFlwVhVJWyPWc0EuS58aLfnnN0panXmhYVhlJHS63LHNkimqbzGaVzF4vr0zjhZwyyyxFQtdx5DJJCUpMC7nEFp2om8mwkdEmr1BKM48j56dXUkzkJGkkWmv6XlJCJIkliIZcafmot7i6JSSmRfLEr+PMvES0Nljb4fuBeQm8Xq+klDmPE/MSKKUSopjpnDEY20nRkQZdMqVmKUaqddVGAbepdH1DtA267VrwMyJdb1rl9u9Ve6zULRO6VtlV0O2aQ8kiJ9ZGqItot5eYOI8jJSdZtBqJohy8JWRHbwymiolZrxp0XSXtQ8k5XtYdrjdJH1viCLkRbYUxok83WmNto+c5EVISWUiFbOT/vVGtst2ilft3vcbt2LHjr2Mn1Dt2vCPWeY/W0qaHkukQKHJtebVvJsp1jbxq4buq1TKvgWrbdnX75XU1PK6RHiBTqnrLsUYpmRxrTVSI0z9noBWq0NJEUJvZDGAVaa5byPJ/b7aW2+dS65b5SxUjmmnNf0YbmRq2+dtqQgOJKRMTXyVu1eSReV4k8mxemNeym7xGGqhW3X1LP5ApoZTMpJohiRmy1oymYrVUPXfWgtGbft1rTdWazkgCg9K6kYtVUnO7n9Is2MhM0yqnIrF4UvUtchKlFapoqmr5xutTIiJXifcrzYRXKlUVYk6EZKiA81bkPbVNN9vsVLfkB2nEW4vS2/y45TOXym0bv50O9e3tr88pkj0tpsNMiEKoU06wGRhp2vk2DVf6Zr5riRkpyc/HmEkxyUeKYqjVmtyMiHMj1FUbipaWx5gyuRaWJTK22LtxDoQg9fJKScqNRDsmOb6YSUkWoE3JsN33dWdAEmkqqLI9QnKf3hr85MJZFR8SmddI7Eq4m/H1Z6Pq7bF8K43Yvnc19alb1vd6I4VKKlIisxLiLeNd6698CrfYO9UWyG1dsF7v7RhXHfh6l26f2+1ruVYUUIqcH+uioSm4bif5jh073h07od6x4z3RGvysd/RDL9pg2tQqBKYodciSatG3qV0kJTGkqbVMA0VvHaqKjES3SVgqosHVSjUC1mrIFVuKAFpBzuSwEKeF8XJhWoKkI2RxPznfYY0j58x1Gqm1MnQi/9AK1P2pcQOJtatVjE7jvKCV5XiKGNPR9z3Ho8gnvDM4I4ThcpWt/OnqGC9XiSr74x+bblgm0Lk0Yh4CtVRibJpiZIqmtEJNM0WJ3nVcJlJKGwnRCgZvGKzBGcW3Hz7QWc1vPn3iw+mAQRE+PzO/vFJi4mAMfd9hjccZIbJjCISSqRruH+5JCqLRRKNJpTJeLyxBmggvSyAXWRRZ7yVRIWdMraSUqFWSQayzOO+FGFtz07g2BfAcpe3PWkNIUXTTWuOMTIV1M5gppTCTkCgpmxG5Q+96rLGElJiXRaQeVqGMpFfknFEpresRIeEr6aMZTUvGWsvhdKTWSpcGUi5opZqMQ+GdxN+llBjHkRgCy7QwLxJjWHOlFEUtles4sxYFVaUoKOYlEpLE3Y1BcqSXJTBOoZFsWaAoDBezAJolRJYlSl14rlD1pnUQObwiJUnPcc7jnZgGdQxb3f06ZX4r06itxGQzFQKbpKLJOIBbE+IbvJ1Ql7J+XaFbuo13ThZoWRZ0RLm1JQQsskNhrcEVS+89sVQG7+mdvem6FRSlyFpTlJT4WMy6R9AWEzcpyLZgZ113SkNo14tfIWktmnrk+Rcu3bLptRFjZ/orq4cdO3b8u7ET6h073hMt0sxqxeA7MQMVmSTmlKSwJUZMP+C9J5ciW/AxUrWWSSVClo0x6Kav1kCmrHy9zX9Vm2bKFMoohVUg4tIs0WZhYZkmmQKnQmgyD2MM2nlSzMzjSM6ZwT1waHF0w9A1A5akAZQi8oxcXlFohiGhlGMYBo6nkzQratUSPzLjNEmltjXMk5DKcbqwLJMUecyylS/EwAIKrb0Y2lpShSoKwkJGSN3z6xPzPN8q0rUm957aee4OHY/ffsPDceCbx0dOhwGVC19yJlyvqAq9EUJhlMMoS66Fa5oJIVAHz/F0ojrLJYm0I5XEeZq4jlIsM+dmvmwaZQVUbdrEGnSShj5jLdbJS+tKqGu9mQrDMpNaAUvKIgPpnaX3TghQFSHHlvrCjVBb41BHC8oQY27T4ILHYY2R48sFpTNKSQW8kGmz2vEotWz1877zgPhnS216bS063JolVzvlzDzPBKWJIRJC3nYIVFXkWsghUWqR++4dFQgxcZ1mYsqcp5mYcyPUy1YxvhYR1SI7JzEVQhQqaLTEKa667nWHJueK1grX2i61MVRVv9L8v22jrC17GcA5J+d1eyzk+28/q5TUd6/YWia13p7DW9ul2fLD+85DSpSwULNotGOKBCV0WDfJh3eOrlQ6Z+nMWmAjWviiROOs2yRab/F8jVLXusUcanMj1CCLAm0M3ncYrSTpJudt16ndG0kJUloIdf7LhJMdO3b8+7ET6h07/qOgbp//qvlHrfOjf/0X/OtveX/7q+ukbZ3Csc27fvZ9P/v8dht5m3H91cN/+59//Thu88LbG/vbvN/12FRzW90ygN9oTf7iQOtGMt7eI8Vta179xQ+9vW9//c5vz8TPb/bNxPIvZnp/Qybwb0H9G39f//0Xh/pG4/vVFLX+1SP7H/7Gr56/N5Pstw/DV8dY3+iM2+m03vQb5fHfvFNvtcxf/+UmLaHWn/3Mz+/H7Zj/FhnczoHty//fSOPf/r1/4/v/Dd/4l1ey+itf/9u/XKH4+eT865v8N/6+/8HXduzY8e+Hqv/aVbpjx44dO3bs2LFjx45/FXtV0o4dO3bs2LFjx44dvwA7od6xY8eOHTt27Nix4xdgJ9Q7duzYsWPHjh07dvwC7IR6x44dO3bs2LFjx45fgJ1Q79ixY8eOHTt27NjxC7AT6h07duzYsWPHjh07fgF2Qr1jx44dO3bs2LFjxy/ATqh37NixY8eOHTt27PgF2An1jh07duzYsWPHjh2/AP8vy9SD4dU4nt4AAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n","<ipython-input-42-50cd51316cdb>:32: FutureWarning: `multichannel` is a deprecated argument name for `hog`. It will be removed in version 1.0. Please use `channel_axis` instead.\n","  window_flat = hog(window, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False).flatten()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Việc sử dụng đặc trưng HoG (Histograms of Oriented Gradients) thay vì chọn trước các cửa sổ có thể giúp quá trình phát hiện và nhận diện khuôn mặt trở nên hiệu quả hơn:\n","- Trích xuất đặc trưng hiệu quả: HoG tập trung vào các hướng gradient, giúp mô hình học được các đặc trưng liên quan đến hình dạng và cấu trúc của đối tượng (ví dụ: các cạnh, góc cạnh của khuôn mặt).\n","- Giảm kích thước dữ liệu: Thay vì xử lý toàn bộ pixel trong cửa sổ, HoG chỉ trích xuất các đặc trưng quan trọng, giúp giảm kích thước dữ liệu và tăng hiệu quả tính toán.\n","- Khả năng khái quát hóa tốt: Các đặc trưng HoG giúp mô hình dễ dàng nhận diện đối tượng dưới nhiều điều kiện khác nhau như ánh sáng, kích thước, và góc nhìn."],"metadata":{"id":"4lSa2WWkN4ZS"}}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1N-H9e34e-xuPe9kraQnWAgt6W0VPf2rb","authorship_tag":"ABX9TyNeKXOnXwO1yjR/JC39YblK"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}